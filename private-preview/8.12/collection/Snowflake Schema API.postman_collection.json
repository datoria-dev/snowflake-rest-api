{
	"info": {
		"_postman_id": "9850c095-518c-4c16-98e6-1cab8e172b90",
		"name": "Snowflake Schema API",
		"description": "The Snowflake Schema API is a REST API that you can use to access, update, and perform certain actions on Schema resource in Snowflake.\n\nContact Support:\n Name: Snowflake, Inc.\n Email: support@snowflake.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28868798",
		"_collection_link": "https://snowflake.postman.co/workspace/PrPr-Fast-Follow-up~221950c9-2cfb-4efc-9682-eac740a73ea5/collection/28868798-9850c095-518c-4c16-98e6-1cab8e172b90?action=share&source=collection_link&creator=28868798"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "v2",
					"item": [
						{
							"name": "databases",
							"item": [
								{
									"name": "{database}",
									"item": [
										{
											"name": "schemas",
											"item": [
												{
													"name": "{name}",
													"item": [
														{
															"name": "clone",
															"item": [
																{
																	"name": "Clone a schema",
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"k9Nd4\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"in exercitation in enim\",\n    \"reference\": \"deserunt ut sint sit\"\n  },\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name/clone?createMode=errorIfExists&kind=&with_managed_access=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name",
																				"clone"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists"
																				},
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema. At the time of writing this transient and permanent (represented by the empty string) are supported."
																				},
																				{
																					"key": "with_managed_access",
																					"value": "false",
																					"description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner."
																				}
																			],
																			"variable": [
																				{
																					"key": "database",
																					"value": "KW",
																					"description": "(Required) "
																				},
																				{
																					"key": "name",
																					"value": "KW",
																					"description": "(Required) "
																				}
																			]
																		},
																		"description": "Clone an existing schema, with modifiers as query parameters. See the schema definition for what is required to be provided in the request body. (Cloning not currently supported)"
																	},
																	"response": [
																		{
																			"name": "Successful",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"k9Nd4\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"in exercitation in enim\",\n    \"reference\": \"deserunt ut sint sit\"\n  },\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name/clone?createMode=errorIfExists&kind=&with_managed_access=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":name",
																						"clone"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "kind",
																							"value": "",
																							"description": "Type of schema. At the time of writing this transient and permanent (represented by the empty string) are supported."
																						},
																						{
																							"key": "with_managed_access",
																							"value": "false",
																							"description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "name"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"status\": \"<string>\"\n}"
																		},
																		{
																			"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"k9Nd4\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"in exercitation in enim\",\n    \"reference\": \"deserunt ut sint sit\"\n  },\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name/clone?createMode=errorIfExists&kind=&with_managed_access=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":name",
																						"clone"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "kind",
																							"value": "",
																							"description": "Type of schema. At the time of writing this transient and permanent (represented by the empty string) are supported."
																						},
																						{
																							"key": "with_managed_access",
																							"value": "false",
																							"description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "name"
																						}
																					]
																				}
																			},
																			"status": "Bad Request",
																			"code": 400,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"k9Nd4\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"in exercitation in enim\",\n    \"reference\": \"deserunt ut sint sit\"\n  },\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name/clone?createMode=errorIfExists&kind=&with_managed_access=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":name",
																						"clone"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "kind",
																							"value": "",
																							"description": "Type of schema. At the time of writing this transient and permanent (represented by the empty string) are supported."
																						},
																						{
																							"key": "with_managed_access",
																							"value": "false",
																							"description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "name"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"k9Nd4\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"in exercitation in enim\",\n    \"reference\": \"deserunt ut sint sit\"\n  },\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name/clone?createMode=errorIfExists&kind=&with_managed_access=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":name",
																						"clone"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "kind",
																							"value": "",
																							"description": "Type of schema. At the time of writing this transient and permanent (represented by the empty string) are supported."
																						},
																						{
																							"key": "with_managed_access",
																							"value": "false",
																							"description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "name"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"k9Nd4\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"in exercitation in enim\",\n    \"reference\": \"deserunt ut sint sit\"\n  },\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name/clone?createMode=errorIfExists&kind=&with_managed_access=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":name",
																						"clone"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "kind",
																							"value": "",
																							"description": "Type of schema. At the time of writing this transient and permanent (represented by the empty string) are supported."
																						},
																						{
																							"key": "with_managed_access",
																							"value": "false",
																							"description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "name"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"k9Nd4\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"in exercitation in enim\",\n    \"reference\": \"deserunt ut sint sit\"\n  },\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name/clone?createMode=errorIfExists&kind=&with_managed_access=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":name",
																						"clone"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "kind",
																							"value": "",
																							"description": "Type of schema. At the time of writing this transient and permanent (represented by the empty string) are supported."
																						},
																						{
																							"key": "with_managed_access",
																							"value": "false",
																							"description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "name"
																						}
																					]
																				}
																			},
																			"status": "Method Not Allowed",
																			"code": 405,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"k9Nd4\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"in exercitation in enim\",\n    \"reference\": \"deserunt ut sint sit\"\n  },\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name/clone?createMode=errorIfExists&kind=&with_managed_access=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":name",
																						"clone"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "kind",
																							"value": "",
																							"description": "Type of schema. At the time of writing this transient and permanent (represented by the empty string) are supported."
																						},
																						{
																							"key": "with_managed_access",
																							"value": "false",
																							"description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "name"
																						}
																					]
																				}
																			},
																			"status": "Conflict",
																			"code": 409,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"k9Nd4\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"in exercitation in enim\",\n    \"reference\": \"deserunt ut sint sit\"\n  },\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name/clone?createMode=errorIfExists&kind=&with_managed_access=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":name",
																						"clone"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "kind",
																							"value": "",
																							"description": "Type of schema. At the time of writing this transient and permanent (represented by the empty string) are supported."
																						},
																						{
																							"key": "with_managed_access",
																							"value": "false",
																							"description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "name"
																						}
																					]
																				}
																			},
																			"status": "Internal Server Error",
																			"code": 500,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"k9Nd4\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"in exercitation in enim\",\n    \"reference\": \"deserunt ut sint sit\"\n  },\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name/clone?createMode=errorIfExists&kind=&with_managed_access=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":name",
																						"clone"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "kind",
																							"value": "",
																							"description": "Type of schema. At the time of writing this transient and permanent (represented by the empty string) are supported."
																						},
																						{
																							"key": "with_managed_access",
																							"value": "false",
																							"description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "name"
																						}
																					]
																				}
																			},
																			"status": "Service Unavailable",
																			"code": 503,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"k9Nd4\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"in exercitation in enim\",\n    \"reference\": \"deserunt ut sint sit\"\n  },\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name/clone?createMode=errorIfExists&kind=&with_managed_access=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":name",
																						"clone"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "kind",
																							"value": "",
																							"description": "Type of schema. At the time of writing this transient and permanent (represented by the empty string) are supported."
																						},
																						{
																							"key": "with_managed_access",
																							"value": "false",
																							"description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "name"
																						}
																					]
																				}
																			},
																			"status": "Gateway Timeout",
																			"code": 504,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		}
																	]
																}
															]
														},
														{
															"name": "fetch Schema",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas",
																		":name"
																	],
																	"variable": [
																		{
																			"key": "database",
																			"value": "KW",
																			"description": "(Required) "
																		},
																		{
																			"key": "name",
																			"value": "KW",
																			"description": "(Required) "
																		}
																	]
																},
																"description": "Fetch a schema."
															},
															"response": [
																{
																	"name": "successful",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"name\": \"\\\"9\\\"\\\"VY\\\"\\\"\\\"\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}"
																},
																{
																	"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Bad Request",
																	"code": 400,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Unauthorized",
																	"code": 401,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Forbidden",
																	"code": 403,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Not Found",
																	"code": 404,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Method Not Allowed",
																	"code": 405,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Service Unavailable",
																	"code": 503,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Gateway Timeout",
																	"code": 504,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																}
															]
														},
														{
															"name": "Create a (or alter an existing) schema.",
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"\\\"9\\\"\\\"VY\\\"\\\"\\\"\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas",
																		":name"
																	],
																	"variable": [
																		{
																			"key": "database",
																			"value": "KW",
																			"description": "(Required) "
																		},
																		{
																			"key": "name",
																			"value": "KW",
																			"description": "(Required) "
																		}
																	]
																},
																"description": "Create a (or alter an existing) schema. Even if the operation is just an alter, the full property set must be provided."
															},
															"response": [
																{
																	"name": "Successful",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"\\\"9\\\"\\\"VY\\\"\\\"\\\"\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"status\": \"<string>\"\n}"
																},
																{
																	"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"\\\"9\\\"\\\"VY\\\"\\\"\\\"\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Bad Request",
																	"code": 400,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"\\\"9\\\"\\\"VY\\\"\\\"\\\"\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Unauthorized",
																	"code": 401,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"\\\"9\\\"\\\"VY\\\"\\\"\\\"\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Forbidden",
																	"code": 403,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"\\\"9\\\"\\\"VY\\\"\\\"\\\"\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Not Found",
																	"code": 404,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"\\\"9\\\"\\\"VY\\\"\\\"\\\"\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Method Not Allowed",
																	"code": 405,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"\\\"9\\\"\\\"VY\\\"\\\"\\\"\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"\\\"9\\\"\\\"VY\\\"\\\"\\\"\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Service Unavailable",
																	"code": 503,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"\\\"9\\\"\\\"VY\\\"\\\"\\\"\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Gateway Timeout",
																	"code": 504,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																}
															]
														},
														{
															"name": "Delete a schema.",
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas",
																		":name"
																	],
																	"query": [
																		{
																			"key": "ifExists",
																			"value": "false",
																			"disabled": true
																		},
																		{
																			"key": "restrict",
																			"value": "false",
																			"description": "Specifies whether the schema should not be droppped if there are existing foreign key references. Returns a warning instead.",
																			"disabled": true
																		}
																	],
																	"variable": [
																		{
																			"key": "database",
																			"value": "REST_DB",
																			"description": "(Required) "
																		},
																		{
																			"key": "name",
																			"value": "TEST_SCHEMA",
																			"description": "(Required) "
																		}
																	]
																},
																"description": "Delete a schema with the given name. If ifExists is used, the operation will succeed even if the object does not exist. Otherwise, there will be a failure if the drop is unsuccessful."
															},
															"response": [
																{
																	"name": "Successful",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "ifExists",
																					"value": "false"
																				},
																				{
																					"key": "restrict",
																					"value": "false",
																					"description": "Specifies whether the schema should not be droppped if there are existing foreign key references. Returns a warning instead."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"status\": \"<string>\"\n}"
																},
																{
																	"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "ifExists",
																					"value": "false"
																				},
																				{
																					"key": "restrict",
																					"value": "false",
																					"description": "Specifies whether the schema should not be droppped if there are existing foreign key references. Returns a warning instead."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Bad Request",
																	"code": 400,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "ifExists",
																					"value": "false"
																				},
																				{
																					"key": "restrict",
																					"value": "false",
																					"description": "Specifies whether the schema should not be droppped if there are existing foreign key references. Returns a warning instead."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Unauthorized",
																	"code": 401,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "ifExists",
																					"value": "false"
																				},
																				{
																					"key": "restrict",
																					"value": "false",
																					"description": "Specifies whether the schema should not be droppped if there are existing foreign key references. Returns a warning instead."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Forbidden",
																	"code": 403,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "ifExists",
																					"value": "false"
																				},
																				{
																					"key": "restrict",
																					"value": "false",
																					"description": "Specifies whether the schema should not be droppped if there are existing foreign key references. Returns a warning instead."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Not Found",
																	"code": 404,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "ifExists",
																					"value": "false"
																				},
																				{
																					"key": "restrict",
																					"value": "false",
																					"description": "Specifies whether the schema should not be droppped if there are existing foreign key references. Returns a warning instead."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Method Not Allowed",
																	"code": 405,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "ifExists",
																					"value": "false"
																				},
																				{
																					"key": "restrict",
																					"value": "false",
																					"description": "Specifies whether the schema should not be droppped if there are existing foreign key references. Returns a warning instead."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "ifExists",
																					"value": "false"
																				},
																				{
																					"key": "restrict",
																					"value": "false",
																					"description": "Specifies whether the schema should not be droppped if there are existing foreign key references. Returns a warning instead."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Service Unavailable",
																	"code": 503,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "ifExists",
																					"value": "false"
																				},
																				{
																					"key": "restrict",
																					"value": "false",
																					"description": "Specifies whether the schema should not be droppped if there are existing foreign key references. Returns a warning instead."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Gateway Timeout",
																	"code": 504,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																}
															]
														}
													]
												},
												{
													"name": "List schemas",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:database/schemas",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":database",
																"schemas"
															],
															"query": [
																{
																	"key": "like",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "startsWith",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "showLimit",
																	"value": "<integer>",
																	"disabled": true
																},
																{
																	"key": "fromName",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "history",
																	"value": "false",
																	"description": "Includes dropped schemas that have not yet been purged.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "database",
																	"value": "REST_DB",
																	"description": "(Required) "
																}
															]
														},
														"description": "Lists the accessible schemas."
													},
													"response": [
														{
															"name": "successful",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "like",
																			"value": "<string>"
																		},
																		{
																			"key": "startsWith",
																			"value": "<string>"
																		},
																		{
																			"key": "showLimit",
																			"value": "<integer>"
																		},
																		{
																			"key": "fromName",
																			"value": "<string>"
																		},
																		{
																			"key": "history",
																			"value": "false",
																			"description": "Includes dropped schemas that have not yet been purged."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n  {\n    \"name\": \"\\\"f\\\"\\\"\\\"\",\n    \"created_on\": \"<dateTime>\",\n    \"is_default\": \"<boolean>\",\n    \"is_current\": \"<boolean>\",\n    \"database_name\": \"<string>\",\n    \"owner\": \"<string>\",\n    \"comment\": \"<string>\",\n    \"options\": \"<string>\",\n    \"retention_time\": \"<integer>\",\n    \"dropped_on\": \"<dateTime>\",\n    \"owner_role_type\": \"<string>\",\n    \"budget\": \"<string>\",\n    \"data_retention_time_in_days\": \"<integer>\",\n    \"default_ddl_collation\": \"<string>\",\n    \"log_level\": \"<string>\",\n    \"pipe_execution_paused\": \"<boolean>\",\n    \"max_data_extension_time_in_days\": \"<integer>\",\n    \"suspend_task_after_num_failures\": \"<integer>\",\n    \"trace_level\": \"<string>\",\n    \"user_task_managed_initial_warehouse_size\": \"<string>\",\n    \"user_task_timeout_ms\": \"<integer>\"\n  },\n  {\n    \"name\": \"Dz_bSe\",\n    \"created_on\": \"<dateTime>\",\n    \"is_default\": \"<boolean>\",\n    \"is_current\": \"<boolean>\",\n    \"database_name\": \"<string>\",\n    \"owner\": \"<string>\",\n    \"comment\": \"<string>\",\n    \"options\": \"<string>\",\n    \"retention_time\": \"<integer>\",\n    \"dropped_on\": \"<dateTime>\",\n    \"owner_role_type\": \"<string>\",\n    \"budget\": \"<string>\",\n    \"data_retention_time_in_days\": \"<integer>\",\n    \"default_ddl_collation\": \"<string>\",\n    \"log_level\": \"<string>\",\n    \"pipe_execution_paused\": \"<boolean>\",\n    \"max_data_extension_time_in_days\": \"<integer>\",\n    \"suspend_task_after_num_failures\": \"<integer>\",\n    \"trace_level\": \"<string>\",\n    \"user_task_managed_initial_warehouse_size\": \"<string>\",\n    \"user_task_timeout_ms\": \"<integer>\"\n  }\n]"
														},
														{
															"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "like",
																			"value": "<string>"
																		},
																		{
																			"key": "startsWith",
																			"value": "<string>"
																		},
																		{
																			"key": "showLimit",
																			"value": "<integer>"
																		},
																		{
																			"key": "fromName",
																			"value": "<string>"
																		},
																		{
																			"key": "history",
																			"value": "false",
																			"description": "Includes dropped schemas that have not yet been purged."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "like",
																			"value": "<string>"
																		},
																		{
																			"key": "startsWith",
																			"value": "<string>"
																		},
																		{
																			"key": "showLimit",
																			"value": "<integer>"
																		},
																		{
																			"key": "fromName",
																			"value": "<string>"
																		},
																		{
																			"key": "history",
																			"value": "false",
																			"description": "Includes dropped schemas that have not yet been purged."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "like",
																			"value": "<string>"
																		},
																		{
																			"key": "startsWith",
																			"value": "<string>"
																		},
																		{
																			"key": "showLimit",
																			"value": "<integer>"
																		},
																		{
																			"key": "fromName",
																			"value": "<string>"
																		},
																		{
																			"key": "history",
																			"value": "false",
																			"description": "Includes dropped schemas that have not yet been purged."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "like",
																			"value": "<string>"
																		},
																		{
																			"key": "startsWith",
																			"value": "<string>"
																		},
																		{
																			"key": "showLimit",
																			"value": "<integer>"
																		},
																		{
																			"key": "fromName",
																			"value": "<string>"
																		},
																		{
																			"key": "history",
																			"value": "false",
																			"description": "Includes dropped schemas that have not yet been purged."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "like",
																			"value": "<string>"
																		},
																		{
																			"key": "startsWith",
																			"value": "<string>"
																		},
																		{
																			"key": "showLimit",
																			"value": "<integer>"
																		},
																		{
																			"key": "fromName",
																			"value": "<string>"
																		},
																		{
																			"key": "history",
																			"value": "false",
																			"description": "Includes dropped schemas that have not yet been purged."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Method Not Allowed",
															"code": 405,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "like",
																			"value": "<string>"
																		},
																		{
																			"key": "startsWith",
																			"value": "<string>"
																		},
																		{
																			"key": "showLimit",
																			"value": "<integer>"
																		},
																		{
																			"key": "fromName",
																			"value": "<string>"
																		},
																		{
																			"key": "history",
																			"value": "false",
																			"description": "Includes dropped schemas that have not yet been purged."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "like",
																			"value": "<string>"
																		},
																		{
																			"key": "startsWith",
																			"value": "<string>"
																		},
																		{
																			"key": "showLimit",
																			"value": "<integer>"
																		},
																		{
																			"key": "fromName",
																			"value": "<string>"
																		},
																		{
																			"key": "history",
																			"value": "false",
																			"description": "Includes dropped schemas that have not yet been purged."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Service Unavailable",
															"code": 503,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "like",
																			"value": "<string>"
																		},
																		{
																			"key": "startsWith",
																			"value": "<string>"
																		},
																		{
																			"key": "showLimit",
																			"value": "<integer>"
																		},
																		{
																			"key": "fromName",
																			"value": "<string>"
																		},
																		{
																			"key": "history",
																			"value": "false",
																			"description": "Includes dropped schemas that have not yet been purged."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Gateway Timeout",
															"code": 504,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														}
													]
												},
												{
													"name": "Create a schema",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"name\": \"TEST_SCHEMA\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=orReplace",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":database",
																"schemas"
															],
															"query": [
																{
																	"key": "createMode",
																	"value": "orReplace"
																},
																{
																	"key": "kind",
																	"value": "",
																	"description": "Type of schema. At the time of writing this transient and permanent (represented by the empty string) are supported.",
																	"disabled": true
																},
																{
																	"key": "with_managed_access",
																	"value": "false",
																	"description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "database",
																	"value": "REST_DB",
																	"description": "(Required) "
																}
															]
														},
														"description": "Create a schema, with modifiers as query parameters. See the schema definition for what is required to be provided in the request body. (Cloning not currently supported)"
													},
													"response": [
														{
															"name": "Successful",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"\\\"9\\\"\\\"VY\\\"\\\"\\\"\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=&with_managed_access=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists"
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema. At the time of writing this transient and permanent (represented by the empty string) are supported."
																		},
																		{
																			"key": "with_managed_access",
																			"value": "false",
																			"description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\"\n}"
														},
														{
															"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"\\\"9\\\"\\\"VY\\\"\\\"\\\"\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=&with_managed_access=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists"
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema. At the time of writing this transient and permanent (represented by the empty string) are supported."
																		},
																		{
																			"key": "with_managed_access",
																			"value": "false",
																			"description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"\\\"9\\\"\\\"VY\\\"\\\"\\\"\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=&with_managed_access=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists"
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema. At the time of writing this transient and permanent (represented by the empty string) are supported."
																		},
																		{
																			"key": "with_managed_access",
																			"value": "false",
																			"description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"\\\"9\\\"\\\"VY\\\"\\\"\\\"\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=&with_managed_access=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists"
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema. At the time of writing this transient and permanent (represented by the empty string) are supported."
																		},
																		{
																			"key": "with_managed_access",
																			"value": "false",
																			"description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"\\\"9\\\"\\\"VY\\\"\\\"\\\"\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=&with_managed_access=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists"
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema. At the time of writing this transient and permanent (represented by the empty string) are supported."
																		},
																		{
																			"key": "with_managed_access",
																			"value": "false",
																			"description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"\\\"9\\\"\\\"VY\\\"\\\"\\\"\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=&with_managed_access=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists"
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema. At the time of writing this transient and permanent (represented by the empty string) are supported."
																		},
																		{
																			"key": "with_managed_access",
																			"value": "false",
																			"description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Method Not Allowed",
															"code": 405,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"\\\"9\\\"\\\"VY\\\"\\\"\\\"\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=&with_managed_access=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists"
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema. At the time of writing this transient and permanent (represented by the empty string) are supported."
																		},
																		{
																			"key": "with_managed_access",
																			"value": "false",
																			"description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Conflict",
															"code": 409,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"\\\"9\\\"\\\"VY\\\"\\\"\\\"\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=&with_managed_access=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists"
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema. At the time of writing this transient and permanent (represented by the empty string) are supported."
																		},
																		{
																			"key": "with_managed_access",
																			"value": "false",
																			"description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"\\\"9\\\"\\\"VY\\\"\\\"\\\"\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=&with_managed_access=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists"
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema. At the time of writing this transient and permanent (represented by the empty string) are supported."
																		},
																		{
																			"key": "with_managed_access",
																			"value": "false",
																			"description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Service Unavailable",
															"code": 503,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"\\\"9\\\"\\\"VY\\\"\\\"\\\"\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=&with_managed_access=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists"
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema. At the time of writing this transient and permanent (represented by the empty string) are supported."
																		},
																		{
																			"key": "with_managed_access",
																			"value": "false",
																			"description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Gateway Timeout",
															"code": 504,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			},
			{
				"key": "value",
				"value": "Snowflake Token=\"{{sessionToken}}\"",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://org-account.snowflakecomputing.com"
		},
		{
			"key": "token",
			"value": "",
			"type": "default"
		}
	]
}