{
	"info": {
		"_postman_id": "d25e28cc-ac31-43aa-be51-da1091c41eb0",
		"name": "Snowflake Database API",
		"description": "The Snowflake Database API is a REST API that you can use to access, update, and perform certain actions on Database resource in Snowflake.\n\nContact Support:\n Name: Snowflake, Inc.\n Email: support@snowflake.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28868798",
		"_collection_link": "https://snowflake.postman.co/workspace/PrPr-Fast-Follow-up~221950c9-2cfb-4efc-9682-eac740a73ea5/collection/28868798-d25e28cc-ac31-43aa-be51-da1091c41eb0?action=share&source=collection_link&creator=28868798"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "v2",
					"item": [
						{
							"name": "databases",
							"item": [
								{
									"name": "from_share",
									"item": [
										{
											"name": "Create a database from a share.",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/databases/from_share?createMode=errorIfExists&name=<string>&share=<string>&kind=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"databases",
														"from_share"
													],
													"query": [
														{
															"key": "createMode",
															"value": "errorIfExists"
														},
														{
															"key": "name",
															"value": "<string>",
															"description": "Name of the database to be created"
														},
														{
															"key": "share",
															"value": "<string>",
															"description": "The share the database should be created from. Should be of the form \"<provider_account>.<share_name>\"."
														},
														{
															"key": "kind",
															"value": "<string>",
															"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
														}
													]
												},
												"description": "Create a database from a given share"
											},
											"response": [
												{
													"name": "Successful",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/from_share?createMode=errorIfExists&name=<string>&share=<string>&kind=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																"from_share"
															],
															"query": [
																{
																	"key": "createMode",
																	"value": "errorIfExists"
																},
																{
																	"key": "name",
																	"value": "<string>",
																	"description": "Name of the database to be created"
																},
																{
																	"key": "share",
																	"value": "<string>",
																	"description": "The share the database should be created from. Should be of the form \"<provider_account>.<share_name>\"."
																},
																{
																	"key": "kind",
																	"value": "<string>",
																	"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"<string>\"\n}"
												},
												{
													"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/from_share?createMode=errorIfExists&name=<string>&share=<string>&kind=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																"from_share"
															],
															"query": [
																{
																	"key": "createMode",
																	"value": "errorIfExists"
																},
																{
																	"key": "name",
																	"value": "<string>",
																	"description": "Name of the database to be created"
																},
																{
																	"key": "share",
																	"value": "<string>",
																	"description": "The share the database should be created from. Should be of the form \"<provider_account>.<share_name>\"."
																},
																{
																	"key": "kind",
																	"value": "<string>",
																	"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/from_share?createMode=errorIfExists&name=<string>&share=<string>&kind=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																"from_share"
															],
															"query": [
																{
																	"key": "createMode",
																	"value": "errorIfExists"
																},
																{
																	"key": "name",
																	"value": "<string>",
																	"description": "Name of the database to be created"
																},
																{
																	"key": "share",
																	"value": "<string>",
																	"description": "The share the database should be created from. Should be of the form \"<provider_account>.<share_name>\"."
																},
																{
																	"key": "kind",
																	"value": "<string>",
																	"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/from_share?createMode=errorIfExists&name=<string>&share=<string>&kind=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																"from_share"
															],
															"query": [
																{
																	"key": "createMode",
																	"value": "errorIfExists"
																},
																{
																	"key": "name",
																	"value": "<string>",
																	"description": "Name of the database to be created"
																},
																{
																	"key": "share",
																	"value": "<string>",
																	"description": "The share the database should be created from. Should be of the form \"<provider_account>.<share_name>\"."
																},
																{
																	"key": "kind",
																	"value": "<string>",
																	"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/from_share?createMode=errorIfExists&name=<string>&share=<string>&kind=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																"from_share"
															],
															"query": [
																{
																	"key": "createMode",
																	"value": "errorIfExists"
																},
																{
																	"key": "name",
																	"value": "<string>",
																	"description": "Name of the database to be created"
																},
																{
																	"key": "share",
																	"value": "<string>",
																	"description": "The share the database should be created from. Should be of the form \"<provider_account>.<share_name>\"."
																},
																{
																	"key": "kind",
																	"value": "<string>",
																	"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/from_share?createMode=errorIfExists&name=<string>&share=<string>&kind=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																"from_share"
															],
															"query": [
																{
																	"key": "createMode",
																	"value": "errorIfExists"
																},
																{
																	"key": "name",
																	"value": "<string>",
																	"description": "Name of the database to be created"
																},
																{
																	"key": "share",
																	"value": "<string>",
																	"description": "The share the database should be created from. Should be of the form \"<provider_account>.<share_name>\"."
																},
																{
																	"key": "kind",
																	"value": "<string>",
																	"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
																}
															]
														}
													},
													"status": "Method Not Allowed",
													"code": 405,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/from_share?createMode=errorIfExists&name=<string>&share=<string>&kind=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																"from_share"
															],
															"query": [
																{
																	"key": "createMode",
																	"value": "errorIfExists"
																},
																{
																	"key": "name",
																	"value": "<string>",
																	"description": "Name of the database to be created"
																},
																{
																	"key": "share",
																	"value": "<string>",
																	"description": "The share the database should be created from. Should be of the form \"<provider_account>.<share_name>\"."
																},
																{
																	"key": "kind",
																	"value": "<string>",
																	"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
																}
															]
														}
													},
													"status": "Conflict",
													"code": 409,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/from_share?createMode=errorIfExists&name=<string>&share=<string>&kind=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																"from_share"
															],
															"query": [
																{
																	"key": "createMode",
																	"value": "errorIfExists"
																},
																{
																	"key": "name",
																	"value": "<string>",
																	"description": "Name of the database to be created"
																},
																{
																	"key": "share",
																	"value": "<string>",
																	"description": "The share the database should be created from. Should be of the form \"<provider_account>.<share_name>\"."
																},
																{
																	"key": "kind",
																	"value": "<string>",
																	"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/from_share?createMode=errorIfExists&name=<string>&share=<string>&kind=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																"from_share"
															],
															"query": [
																{
																	"key": "createMode",
																	"value": "errorIfExists"
																},
																{
																	"key": "name",
																	"value": "<string>",
																	"description": "Name of the database to be created"
																},
																{
																	"key": "share",
																	"value": "<string>",
																	"description": "The share the database should be created from. Should be of the form \"<provider_account>.<share_name>\"."
																},
																{
																	"key": "kind",
																	"value": "<string>",
																	"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
																}
															]
														}
													},
													"status": "Service Unavailable",
													"code": 503,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/from_share?createMode=errorIfExists&name=<string>&share=<string>&kind=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																"from_share"
															],
															"query": [
																{
																	"key": "createMode",
																	"value": "errorIfExists"
																},
																{
																	"key": "name",
																	"value": "<string>",
																	"description": "Name of the database to be created"
																},
																{
																	"key": "share",
																	"value": "<string>",
																	"description": "The share the database should be created from. Should be of the form \"<provider_account>.<share_name>\"."
																},
																{
																	"key": "kind",
																	"value": "<string>",
																	"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
																}
															]
														}
													},
													"status": "Gateway Timeout",
													"code": 504,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "{name}",
									"item": [
										{
											"name": "clone",
											"item": [
												{
													"name": "Clone a database",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"name\": \"T\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"eiusmod commodo\",\n    \"reference\": \"culpa dolor\"\n  },\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name/clone?createMode=errorIfExists&kind=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name",
																"clone"
															],
															"query": [
																{
																	"key": "createMode",
																	"value": "errorIfExists"
																},
																{
																	"key": "kind",
																	"value": "<string>",
																	"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
																}
															],
															"variable": [
																{
																	"key": "name",
																	"value": "\"C9\"\"{Nm\"\"Nh3\"\"\"",
																	"description": "(Required) "
																}
															]
														},
														"description": "Clone an existing database, with modifiers as query parameters. See the database definition for what is required to be provided in the request body. (Cloning not currently supported)"
													},
													"response": [
														{
															"name": "Successful",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"T\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"eiusmod commodo\",\n    \"reference\": \"culpa dolor\"\n  },\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/clone?createMode=errorIfExists&kind=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"clone"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists"
																		},
																		{
																			"key": "kind",
																			"value": "<string>",
																			"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\"\n}"
														},
														{
															"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"T\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"eiusmod commodo\",\n    \"reference\": \"culpa dolor\"\n  },\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/clone?createMode=errorIfExists&kind=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"clone"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists"
																		},
																		{
																			"key": "kind",
																			"value": "<string>",
																			"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"T\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"eiusmod commodo\",\n    \"reference\": \"culpa dolor\"\n  },\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/clone?createMode=errorIfExists&kind=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"clone"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists"
																		},
																		{
																			"key": "kind",
																			"value": "<string>",
																			"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"T\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"eiusmod commodo\",\n    \"reference\": \"culpa dolor\"\n  },\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/clone?createMode=errorIfExists&kind=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"clone"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists"
																		},
																		{
																			"key": "kind",
																			"value": "<string>",
																			"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"T\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"eiusmod commodo\",\n    \"reference\": \"culpa dolor\"\n  },\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/clone?createMode=errorIfExists&kind=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"clone"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists"
																		},
																		{
																			"key": "kind",
																			"value": "<string>",
																			"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"T\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"eiusmod commodo\",\n    \"reference\": \"culpa dolor\"\n  },\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/clone?createMode=errorIfExists&kind=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"clone"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists"
																		},
																		{
																			"key": "kind",
																			"value": "<string>",
																			"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Method Not Allowed",
															"code": 405,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"T\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"eiusmod commodo\",\n    \"reference\": \"culpa dolor\"\n  },\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/clone?createMode=errorIfExists&kind=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"clone"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists"
																		},
																		{
																			"key": "kind",
																			"value": "<string>",
																			"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Conflict",
															"code": 409,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"T\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"eiusmod commodo\",\n    \"reference\": \"culpa dolor\"\n  },\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/clone?createMode=errorIfExists&kind=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"clone"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists"
																		},
																		{
																			"key": "kind",
																			"value": "<string>",
																			"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"T\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"eiusmod commodo\",\n    \"reference\": \"culpa dolor\"\n  },\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/clone?createMode=errorIfExists&kind=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"clone"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists"
																		},
																		{
																			"key": "kind",
																			"value": "<string>",
																			"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Service Unavailable",
															"code": 503,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"T\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"eiusmod commodo\",\n    \"reference\": \"culpa dolor\"\n  },\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/clone?createMode=errorIfExists&kind=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"clone"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists"
																		},
																		{
																			"key": "kind",
																			"value": "<string>",
																			"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Gateway Timeout",
															"code": 504,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "replication:enable",
											"item": [
												{
													"name": "Enable database replication.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name/replication:enable?ignore_edition_check=<boolean>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name",
																"replication:enable"
															],
															"query": [
																{
																	"key": "ignore_edition_check",
																	"value": "<boolean>",
																	"description": "Allows replicating data to accounts on lower editions. Please see https://docs.snowflake.com/en/sql-reference/sql/alter-database for full description."
																}
															],
															"variable": [
																{
																	"key": "name",
																	"value": "\"C9\"\"{Nm\"\"Nh3\"\"\"",
																	"description": "(Required) "
																}
															]
														},
														"description": "Promotes a local database to serve as a primary database for replication. A primary database can be replicated in one or more accounts, allowing users in those accounts to query objects in each secondary (i.e. replica) database."
													},
													"response": [
														{
															"name": "Successful",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:enable?ignore_edition_check=<boolean>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:enable"
																	],
																	"query": [
																		{
																			"key": "ignore_edition_check",
																			"value": "<boolean>",
																			"description": "Allows replicating data to accounts on lower editions. Please see https://docs.snowflake.com/en/sql-reference/sql/alter-database for full description."
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\"\n}"
														},
														{
															"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:enable?ignore_edition_check=<boolean>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:enable"
																	],
																	"query": [
																		{
																			"key": "ignore_edition_check",
																			"value": "<boolean>",
																			"description": "Allows replicating data to accounts on lower editions. Please see https://docs.snowflake.com/en/sql-reference/sql/alter-database for full description."
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:enable?ignore_edition_check=<boolean>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:enable"
																	],
																	"query": [
																		{
																			"key": "ignore_edition_check",
																			"value": "<boolean>",
																			"description": "Allows replicating data to accounts on lower editions. Please see https://docs.snowflake.com/en/sql-reference/sql/alter-database for full description."
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:enable?ignore_edition_check=<boolean>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:enable"
																	],
																	"query": [
																		{
																			"key": "ignore_edition_check",
																			"value": "<boolean>",
																			"description": "Allows replicating data to accounts on lower editions. Please see https://docs.snowflake.com/en/sql-reference/sql/alter-database for full description."
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:enable?ignore_edition_check=<boolean>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:enable"
																	],
																	"query": [
																		{
																			"key": "ignore_edition_check",
																			"value": "<boolean>",
																			"description": "Allows replicating data to accounts on lower editions. Please see https://docs.snowflake.com/en/sql-reference/sql/alter-database for full description."
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:enable?ignore_edition_check=<boolean>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:enable"
																	],
																	"query": [
																		{
																			"key": "ignore_edition_check",
																			"value": "<boolean>",
																			"description": "Allows replicating data to accounts on lower editions. Please see https://docs.snowflake.com/en/sql-reference/sql/alter-database for full description."
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Method Not Allowed",
															"code": 405,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:enable?ignore_edition_check=<boolean>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:enable"
																	],
																	"query": [
																		{
																			"key": "ignore_edition_check",
																			"value": "<boolean>",
																			"description": "Allows replicating data to accounts on lower editions. Please see https://docs.snowflake.com/en/sql-reference/sql/alter-database for full description."
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Conflict",
															"code": 409,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:enable?ignore_edition_check=<boolean>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:enable"
																	],
																	"query": [
																		{
																			"key": "ignore_edition_check",
																			"value": "<boolean>",
																			"description": "Allows replicating data to accounts on lower editions. Please see https://docs.snowflake.com/en/sql-reference/sql/alter-database for full description."
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:enable?ignore_edition_check=<boolean>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:enable"
																	],
																	"query": [
																		{
																			"key": "ignore_edition_check",
																			"value": "<boolean>",
																			"description": "Allows replicating data to accounts on lower editions. Please see https://docs.snowflake.com/en/sql-reference/sql/alter-database for full description."
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Service Unavailable",
															"code": 503,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:enable?ignore_edition_check=<boolean>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:enable"
																	],
																	"query": [
																		{
																			"key": "ignore_edition_check",
																			"value": "<boolean>",
																			"description": "Allows replicating data to accounts on lower editions. Please see https://docs.snowflake.com/en/sql-reference/sql/alter-database for full description."
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Gateway Timeout",
															"code": 504,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "replication:disable",
											"item": [
												{
													"name": "Disable database replication.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name/replication:disable",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name",
																"replication:disable"
															],
															"variable": [
																{
																	"key": "name",
																	"value": "\"C9\"\"{Nm\"\"Nh3\"\"\"",
																	"description": "(Required) "
																}
															]
														},
														"description": "Disables replication for this primary database, meaning no replica of this database (i.e. secondary database) in another account can be refreshed. Any secondary databases remain linked to the primary database, but requests to refresh a secondary database are denied."
													},
													"response": [
														{
															"name": "Successful",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:disable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\"\n}"
														},
														{
															"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:disable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:disable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:disable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:disable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:disable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Method Not Allowed",
															"code": 405,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:disable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Conflict",
															"code": 409,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:disable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:disable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Service Unavailable",
															"code": 503,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:disable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Gateway Timeout",
															"code": 504,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "replication:refresh",
											"item": [
												{
													"name": "Refresh database replications.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name/replication:refresh",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name",
																"replication:refresh"
															],
															"variable": [
																{
																	"key": "name",
																	"value": "\"C9\"\"{Nm\"\"Nh3\"\"\"",
																	"description": "(Required) "
																}
															]
														},
														"description": "Refreshes a secondary database from a snapshot of its primary database. A snapshot includes changes to the objects and data."
													},
													"response": [
														{
															"name": "Successful",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:refresh",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:refresh"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\"\n}"
														},
														{
															"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:refresh",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:refresh"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:refresh",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:refresh"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:refresh",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:refresh"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:refresh",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:refresh"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:refresh",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:refresh"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Method Not Allowed",
															"code": 405,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:refresh",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:refresh"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Conflict",
															"code": 409,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:refresh",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:refresh"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:refresh",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:refresh"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Service Unavailable",
															"code": 503,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/replication:refresh",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"replication:refresh"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Gateway Timeout",
															"code": 504,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "failover:enable",
											"item": [
												{
													"name": "Enable database failover.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name/failover:enable",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name",
																"failover:enable"
															],
															"variable": [
																{
																	"key": "name",
																	"value": "\"C9\"\"{Nm\"\"Nh3\"\"\"",
																	"description": "(Required) "
																}
															]
														},
														"description": "Specifies a comma-separated list of accounts in your organization where a replica of this primary database can be promoted to serve as the primary database."
													},
													"response": [
														{
															"name": "Successful",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:enable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:enable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\"\n}"
														},
														{
															"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:enable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:enable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:enable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:enable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:enable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:enable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:enable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:enable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:enable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:enable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Method Not Allowed",
															"code": 405,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:enable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:enable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Conflict",
															"code": 409,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:enable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:enable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:enable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:enable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Service Unavailable",
															"code": 503,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:enable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:enable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Gateway Timeout",
															"code": 504,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "failover:disable",
											"item": [
												{
													"name": "Disable database failover.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name/failover:disable",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name",
																"failover:disable"
															],
															"variable": [
																{
																	"key": "name",
																	"value": "\"C9\"\"{Nm\"\"Nh3\"\"\"",
																	"description": "(Required) "
																}
															]
														},
														"description": "Disables failover for this primary database, meaning no replica of this database (i.e. secondary database) can be promoted to serve as the primary database."
													},
													"response": [
														{
															"name": "Successful",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:disable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\"\n}"
														},
														{
															"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:disable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:disable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:disable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:disable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:disable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Method Not Allowed",
															"code": 405,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:disable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Conflict",
															"code": 409,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:disable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:disable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Service Unavailable",
															"code": 503,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"accounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:disable"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Gateway Timeout",
															"code": 504,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "failover:primary",
											"item": [
												{
													"name": "Set database as primary.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name/failover:primary",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name",
																"failover:primary"
															],
															"variable": [
																{
																	"key": "name",
																	"value": "\"C9\"\"{Nm\"\"Nh3\"\"\"",
																	"description": "(Required) "
																}
															]
														},
														"description": "Promotes the specified secondary (replica) database to serve as the primary database."
													},
													"response": [
														{
															"name": "Successful",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:primary",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:primary"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\"\n}"
														},
														{
															"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:primary",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:primary"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:primary",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:primary"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:primary",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:primary"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:primary",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:primary"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:primary",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:primary"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Method Not Allowed",
															"code": 405,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:primary",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:primary"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Conflict",
															"code": 409,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:primary",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:primary"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:primary",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:primary"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Service Unavailable",
															"code": 503,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:name/failover:primary",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":name",
																		"failover:primary"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "Gateway Timeout",
															"code": 504,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "fetch Database",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/databases/:name",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"databases",
														":name"
													],
													"variable": [
														{
															"key": "name",
															"value": "\"C9\"\"{Nm\"\"Nh3\"\"\"",
															"description": "(Required) "
														}
													]
												},
												"description": "Fetch a database."
											},
											"response": [
												{
													"name": "successful",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"name\": \"o1\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}"
												},
												{
													"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Method Not Allowed",
													"code": 405,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Service Unavailable",
													"code": 503,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Gateway Timeout",
													"code": 504,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Create a (or alter an existing) database.",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"o1\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/databases/:name",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"databases",
														":name"
													],
													"variable": [
														{
															"key": "name",
															"value": "\"C9\"\"{Nm\"\"Nh3\"\"\"",
															"description": "(Required) "
														}
													]
												},
												"description": "Create a (or alter an existing) database. Even if the operation is just an alter, the full property set must be provided."
											},
											"response": [
												{
													"name": "Successful",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"name\": \"o1\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"<string>\"\n}"
												},
												{
													"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"name\": \"o1\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"name\": \"o1\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"name\": \"o1\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"name\": \"o1\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"name\": \"o1\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Method Not Allowed",
													"code": 405,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"name\": \"o1\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"name\": \"o1\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Service Unavailable",
													"code": 503,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"name\": \"o1\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Gateway Timeout",
													"code": 504,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Delete a database.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/databases/:name?ifExists=false&restrict=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"databases",
														":name"
													],
													"query": [
														{
															"key": "ifExists",
															"value": "false"
														},
														{
															"key": "restrict",
															"value": "false",
															"description": "Specifies whether the database should not be droppped if there are existing foreign key references. Returns a warning instead."
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "\"C9\"\"{Nm\"\"Nh3\"\"\"",
															"description": "(Required) "
														}
													]
												},
												"description": "Delete a database with the given name. If ifExists is used, the operation will succeed even if the object does not exist. Otherwise, there will be a failure if the drop is unsuccessful."
											},
											"response": [
												{
													"name": "Successful",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name?ifExists=false&restrict=false",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"query": [
																{
																	"key": "ifExists",
																	"value": "false"
																},
																{
																	"key": "restrict",
																	"value": "false",
																	"description": "Specifies whether the database should not be droppped if there are existing foreign key references. Returns a warning instead."
																}
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"<string>\"\n}"
												},
												{
													"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name?ifExists=false&restrict=false",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"query": [
																{
																	"key": "ifExists",
																	"value": "false"
																},
																{
																	"key": "restrict",
																	"value": "false",
																	"description": "Specifies whether the database should not be droppped if there are existing foreign key references. Returns a warning instead."
																}
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name?ifExists=false&restrict=false",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"query": [
																{
																	"key": "ifExists",
																	"value": "false"
																},
																{
																	"key": "restrict",
																	"value": "false",
																	"description": "Specifies whether the database should not be droppped if there are existing foreign key references. Returns a warning instead."
																}
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name?ifExists=false&restrict=false",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"query": [
																{
																	"key": "ifExists",
																	"value": "false"
																},
																{
																	"key": "restrict",
																	"value": "false",
																	"description": "Specifies whether the database should not be droppped if there are existing foreign key references. Returns a warning instead."
																}
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name?ifExists=false&restrict=false",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"query": [
																{
																	"key": "ifExists",
																	"value": "false"
																},
																{
																	"key": "restrict",
																	"value": "false",
																	"description": "Specifies whether the database should not be droppped if there are existing foreign key references. Returns a warning instead."
																}
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name?ifExists=false&restrict=false",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"query": [
																{
																	"key": "ifExists",
																	"value": "false"
																},
																{
																	"key": "restrict",
																	"value": "false",
																	"description": "Specifies whether the database should not be droppped if there are existing foreign key references. Returns a warning instead."
																}
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Method Not Allowed",
													"code": 405,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name?ifExists=false&restrict=false",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"query": [
																{
																	"key": "ifExists",
																	"value": "false"
																},
																{
																	"key": "restrict",
																	"value": "false",
																	"description": "Specifies whether the database should not be droppped if there are existing foreign key references. Returns a warning instead."
																}
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name?ifExists=false&restrict=false",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"query": [
																{
																	"key": "ifExists",
																	"value": "false"
																},
																{
																	"key": "restrict",
																	"value": "false",
																	"description": "Specifies whether the database should not be droppped if there are existing foreign key references. Returns a warning instead."
																}
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Service Unavailable",
													"code": 503,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												},
												{
													"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:name?ifExists=false&restrict=false",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":name"
															],
															"query": [
																{
																	"key": "ifExists",
																	"value": "false"
																},
																{
																	"key": "restrict",
																	"value": "false",
																	"description": "Specifies whether the database should not be droppped if there are existing foreign key references. Returns a warning instead."
																}
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "Gateway Timeout",
													"code": 504,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "List databases",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/databases",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"databases"
											],
											"query": [
												{
													"key": "like",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "startsWith",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "showLimit",
													"value": "<integer>",
													"disabled": true
												},
												{
													"key": "fromName",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "history",
													"value": "<boolean>",
													"disabled": true
												}
											]
										},
										"description": "Lists the accessible databases."
									},
									"response": [
										{
											"name": "successful",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/databases?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"databases"
													],
													"query": [
														{
															"key": "like",
															"value": "<string>"
														},
														{
															"key": "startsWith",
															"value": "<string>"
														},
														{
															"key": "showLimit",
															"value": "<integer>"
														},
														{
															"key": "fromName",
															"value": "<string>"
														},
														{
															"key": "history",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"name\": \"\\\"\\\"\\\"6\\\"\\\"\\\"\\\"\\\"\\\"5]\\\"\\\"\\\"\",\n    \"created_on\": \"<dateTime>\",\n    \"is_default\": \"<boolean>\",\n    \"is_current\": \"<boolean>\",\n    \"origin\": \"<string>\",\n    \"owner\": \"<string>\",\n    \"comment\": \"<string>\",\n    \"options\": \"<string>\",\n    \"retention_time\": \"<integer>\",\n    \"dropped_on\": \"<dateTime>\",\n    \"kind\": \"<string>\",\n    \"budget\": \"<string>\",\n    \"owner_role_type\": \"<string>\",\n    \"data_retention_time_in_days\": \"<integer>\",\n    \"default_ddl_collation\": \"<string>\",\n    \"log_level\": \"<string>\",\n    \"max_data_extension_time_in_days\": \"<integer>\",\n    \"suspend_task_after_num_failures\": \"<integer>\",\n    \"trace_level\": \"<string>\",\n    \"user_task_managed_initial_warehouse_size\": \"<string>\",\n    \"user_task_timeout_ms\": \"<integer>\"\n  },\n  {\n    \"name\": \"qRJ9VStDWd\",\n    \"created_on\": \"<dateTime>\",\n    \"is_default\": \"<boolean>\",\n    \"is_current\": \"<boolean>\",\n    \"origin\": \"<string>\",\n    \"owner\": \"<string>\",\n    \"comment\": \"<string>\",\n    \"options\": \"<string>\",\n    \"retention_time\": \"<integer>\",\n    \"dropped_on\": \"<dateTime>\",\n    \"kind\": \"<string>\",\n    \"budget\": \"<string>\",\n    \"owner_role_type\": \"<string>\",\n    \"data_retention_time_in_days\": \"<integer>\",\n    \"default_ddl_collation\": \"<string>\",\n    \"log_level\": \"<string>\",\n    \"max_data_extension_time_in_days\": \"<integer>\",\n    \"suspend_task_after_num_failures\": \"<integer>\",\n    \"trace_level\": \"<string>\",\n    \"user_task_managed_initial_warehouse_size\": \"<string>\",\n    \"user_task_timeout_ms\": \"<integer>\"\n  }\n]"
										},
										{
											"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/databases?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"databases"
													],
													"query": [
														{
															"key": "like",
															"value": "<string>"
														},
														{
															"key": "startsWith",
															"value": "<string>"
														},
														{
															"key": "showLimit",
															"value": "<integer>"
														},
														{
															"key": "fromName",
															"value": "<string>"
														},
														{
															"key": "history",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
										},
										{
											"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/databases?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"databases"
													],
													"query": [
														{
															"key": "like",
															"value": "<string>"
														},
														{
															"key": "startsWith",
															"value": "<string>"
														},
														{
															"key": "showLimit",
															"value": "<integer>"
														},
														{
															"key": "fromName",
															"value": "<string>"
														},
														{
															"key": "history",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
										},
										{
											"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/databases?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"databases"
													],
													"query": [
														{
															"key": "like",
															"value": "<string>"
														},
														{
															"key": "startsWith",
															"value": "<string>"
														},
														{
															"key": "showLimit",
															"value": "<integer>"
														},
														{
															"key": "fromName",
															"value": "<string>"
														},
														{
															"key": "history",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
										},
										{
											"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/databases?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"databases"
													],
													"query": [
														{
															"key": "like",
															"value": "<string>"
														},
														{
															"key": "startsWith",
															"value": "<string>"
														},
														{
															"key": "showLimit",
															"value": "<integer>"
														},
														{
															"key": "fromName",
															"value": "<string>"
														},
														{
															"key": "history",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
										},
										{
											"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/databases?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"databases"
													],
													"query": [
														{
															"key": "like",
															"value": "<string>"
														},
														{
															"key": "startsWith",
															"value": "<string>"
														},
														{
															"key": "showLimit",
															"value": "<integer>"
														},
														{
															"key": "fromName",
															"value": "<string>"
														},
														{
															"key": "history",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "Method Not Allowed",
											"code": 405,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
										},
										{
											"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/databases?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"databases"
													],
													"query": [
														{
															"key": "like",
															"value": "<string>"
														},
														{
															"key": "startsWith",
															"value": "<string>"
														},
														{
															"key": "showLimit",
															"value": "<integer>"
														},
														{
															"key": "fromName",
															"value": "<string>"
														},
														{
															"key": "history",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
										},
										{
											"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/databases?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"databases"
													],
													"query": [
														{
															"key": "like",
															"value": "<string>"
														},
														{
															"key": "startsWith",
															"value": "<string>"
														},
														{
															"key": "showLimit",
															"value": "<integer>"
														},
														{
															"key": "fromName",
															"value": "<string>"
														},
														{
															"key": "history",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
										},
										{
											"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/databases?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"databases"
													],
													"query": [
														{
															"key": "like",
															"value": "<string>"
														},
														{
															"key": "startsWith",
															"value": "<string>"
														},
														{
															"key": "showLimit",
															"value": "<integer>"
														},
														{
															"key": "fromName",
															"value": "<string>"
														},
														{
															"key": "history",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "Gateway Timeout",
											"code": 504,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "Create a database",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"db1\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/databases?createMode=errorIfExists",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"databases"
											],
											"query": [
												{
													"key": "createMode",
													"value": "errorIfExists"
												},
												{
													"key": "kind",
													"value": "<string>",
													"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported.",
													"disabled": true
												}
											]
										},
										"description": "Create a database, with modifiers as query parameters. See the database definition for what is required to be provided in the request body. (Cloning not currently supported)"
									},
									"response": [
										{
											"name": "Successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"o1\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/databases?createMode=errorIfExists&kind=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"databases"
													],
													"query": [
														{
															"key": "createMode",
															"value": "errorIfExists"
														},
														{
															"key": "kind",
															"value": "<string>",
															"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"<string>\"\n}"
										},
										{
											"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"o1\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/databases?createMode=errorIfExists&kind=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"databases"
													],
													"query": [
														{
															"key": "createMode",
															"value": "errorIfExists"
														},
														{
															"key": "kind",
															"value": "<string>",
															"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
										},
										{
											"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"o1\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/databases?createMode=errorIfExists&kind=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"databases"
													],
													"query": [
														{
															"key": "createMode",
															"value": "errorIfExists"
														},
														{
															"key": "kind",
															"value": "<string>",
															"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
										},
										{
											"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"o1\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/databases?createMode=errorIfExists&kind=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"databases"
													],
													"query": [
														{
															"key": "createMode",
															"value": "errorIfExists"
														},
														{
															"key": "kind",
															"value": "<string>",
															"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
										},
										{
											"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"o1\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/databases?createMode=errorIfExists&kind=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"databases"
													],
													"query": [
														{
															"key": "createMode",
															"value": "errorIfExists"
														},
														{
															"key": "kind",
															"value": "<string>",
															"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
										},
										{
											"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"o1\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/databases?createMode=errorIfExists&kind=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"databases"
													],
													"query": [
														{
															"key": "createMode",
															"value": "errorIfExists"
														},
														{
															"key": "kind",
															"value": "<string>",
															"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
														}
													]
												}
											},
											"status": "Method Not Allowed",
											"code": 405,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
										},
										{
											"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"o1\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/databases?createMode=errorIfExists&kind=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"databases"
													],
													"query": [
														{
															"key": "createMode",
															"value": "errorIfExists"
														},
														{
															"key": "kind",
															"value": "<string>",
															"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
										},
										{
											"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"o1\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/databases?createMode=errorIfExists&kind=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"databases"
													],
													"query": [
														{
															"key": "createMode",
															"value": "errorIfExists"
														},
														{
															"key": "kind",
															"value": "<string>",
															"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
										},
										{
											"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"o1\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/databases?createMode=errorIfExists&kind=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"databases"
													],
													"query": [
														{
															"key": "createMode",
															"value": "errorIfExists"
														},
														{
															"key": "kind",
															"value": "<string>",
															"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
										},
										{
											"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"o1\",\n  \"created_on\": \"<dateTime>\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"origin\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"kind\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/databases?createMode=errorIfExists&kind=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"databases"
													],
													"query": [
														{
															"key": "createMode",
															"value": "errorIfExists"
														},
														{
															"key": "kind",
															"value": "<string>",
															"description": "Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported."
														}
													]
												}
											},
											"status": "Gateway Timeout",
											"code": 504,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "Snowflake Token=\"{{sessionToken}}\"",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://org-account.snowflakecomputing.com"
		},
		{
			"key": "token",
			"value": "",
			"type": "default"
		}
	]
}