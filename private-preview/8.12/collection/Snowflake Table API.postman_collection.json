{
	"info": {
		"_postman_id": "36b8436f-7860-4f4c-a5dc-5cbdbd7c1989",
		"name": "Snowflake Table API",
		"description": "The Snowflake Table API is a REST API that you can use to access, update, and perform certain actions on Tables resource in a Snowflake database.\n\nContact Support:\n Name: Snowflake, Inc.\n Email: support@snowflake.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28868798",
		"_collection_link": "https://snowflake.postman.co/workspace/PrPr-Fast-Follow-up~221950c9-2cfb-4efc-9682-eac740a73ea5/collection/28868798-36b8436f-7860-4f4c-a5dc-5cbdbd7c1989?action=share&source=collection_link&creator=28868798"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "v2",
					"item": [
						{
							"name": "databases",
							"item": [
								{
									"name": "{database}",
									"item": [
										{
											"name": "schemas",
											"item": [
												{
													"name": "{schema}",
													"item": [
														{
															"name": "tables",
															"item": [
																{
																	"name": "{name}",
																	"item": [
																		{
																			"name": "parameters",
																			"item": [
																				{
																					"name": "effective",
																					"item": [
																						{
																							"name": "Fetch the effective parameters of a table.",
																							"request": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name/parameters/effective",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tables",
																										":name",
																										"parameters",
																										"effective"
																									],
																									"variable": [
																										{
																											"key": "database",
																											"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																											"description": "(Required) "
																										},
																										{
																											"key": "schema",
																											"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																											"description": "(Required) "
																										},
																										{
																											"key": "name",
																											"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																											"description": "(Required) "
																										}
																									]
																								},
																								"description": "Fetch the effective parameters of a table."
																							},
																							"response": [
																								{
																									"name": "successful",
																									"originalRequest": {
																										"method": "GET",
																										"header": [
																											{
																												"key": "Accept",
																												"value": "application/json"
																											}
																										],
																										"url": {
																											"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name/parameters/effective",
																											"host": [
																												"{{baseUrl}}"
																											],
																											"path": [
																												"api",
																												"v2",
																												"databases",
																												":database",
																												"schemas",
																												":schema",
																												"tables",
																												":name",
																												"parameters",
																												"effective"
																											],
																											"variable": [
																												{
																													"key": "database"
																												},
																												{
																													"key": "schema"
																												},
																												{
																													"key": "name"
																												}
																											]
																										}
																									},
																									"status": "OK",
																									"code": 200,
																									"_postman_previewlanguage": "json",
																									"header": [
																										{
																											"key": "Content-Type",
																											"value": "application/json"
																										}
																									],
																									"cookie": [],
																									"body": "{\n  \"deserunt31\": true,\n  \"ut__bb\": false\n}"
																								},
																								{
																									"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																									"originalRequest": {
																										"method": "GET",
																										"header": [
																											{
																												"key": "Accept",
																												"value": "application/json"
																											}
																										],
																										"url": {
																											"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name/parameters/effective",
																											"host": [
																												"{{baseUrl}}"
																											],
																											"path": [
																												"api",
																												"v2",
																												"databases",
																												":database",
																												"schemas",
																												":schema",
																												"tables",
																												":name",
																												"parameters",
																												"effective"
																											],
																											"variable": [
																												{
																													"key": "database"
																												},
																												{
																													"key": "schema"
																												},
																												{
																													"key": "name"
																												}
																											]
																										}
																									},
																									"status": "Bad Request",
																									"code": 400,
																									"_postman_previewlanguage": "json",
																									"header": [
																										{
																											"key": "Content-Type",
																											"value": "application/json"
																										}
																									],
																									"cookie": [],
																									"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																								},
																								{
																									"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																									"originalRequest": {
																										"method": "GET",
																										"header": [
																											{
																												"key": "Accept",
																												"value": "application/json"
																											}
																										],
																										"url": {
																											"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name/parameters/effective",
																											"host": [
																												"{{baseUrl}}"
																											],
																											"path": [
																												"api",
																												"v2",
																												"databases",
																												":database",
																												"schemas",
																												":schema",
																												"tables",
																												":name",
																												"parameters",
																												"effective"
																											],
																											"variable": [
																												{
																													"key": "database"
																												},
																												{
																													"key": "schema"
																												},
																												{
																													"key": "name"
																												}
																											]
																										}
																									},
																									"status": "Unauthorized",
																									"code": 401,
																									"_postman_previewlanguage": "json",
																									"header": [
																										{
																											"key": "Content-Type",
																											"value": "application/json"
																										}
																									],
																									"cookie": [],
																									"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																								},
																								{
																									"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																									"originalRequest": {
																										"method": "GET",
																										"header": [
																											{
																												"key": "Accept",
																												"value": "application/json"
																											}
																										],
																										"url": {
																											"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name/parameters/effective",
																											"host": [
																												"{{baseUrl}}"
																											],
																											"path": [
																												"api",
																												"v2",
																												"databases",
																												":database",
																												"schemas",
																												":schema",
																												"tables",
																												":name",
																												"parameters",
																												"effective"
																											],
																											"variable": [
																												{
																													"key": "database"
																												},
																												{
																													"key": "schema"
																												},
																												{
																													"key": "name"
																												}
																											]
																										}
																									},
																									"status": "Forbidden",
																									"code": 403,
																									"_postman_previewlanguage": "json",
																									"header": [
																										{
																											"key": "Content-Type",
																											"value": "application/json"
																										}
																									],
																									"cookie": [],
																									"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																								},
																								{
																									"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																									"originalRequest": {
																										"method": "GET",
																										"header": [
																											{
																												"key": "Accept",
																												"value": "application/json"
																											}
																										],
																										"url": {
																											"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name/parameters/effective",
																											"host": [
																												"{{baseUrl}}"
																											],
																											"path": [
																												"api",
																												"v2",
																												"databases",
																												":database",
																												"schemas",
																												":schema",
																												"tables",
																												":name",
																												"parameters",
																												"effective"
																											],
																											"variable": [
																												{
																													"key": "database"
																												},
																												{
																													"key": "schema"
																												},
																												{
																													"key": "name"
																												}
																											]
																										}
																									},
																									"status": "Not Found",
																									"code": 404,
																									"_postman_previewlanguage": "json",
																									"header": [
																										{
																											"key": "Content-Type",
																											"value": "application/json"
																										}
																									],
																									"cookie": [],
																									"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																								},
																								{
																									"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																									"originalRequest": {
																										"method": "GET",
																										"header": [
																											{
																												"key": "Accept",
																												"value": "application/json"
																											}
																										],
																										"url": {
																											"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name/parameters/effective",
																											"host": [
																												"{{baseUrl}}"
																											],
																											"path": [
																												"api",
																												"v2",
																												"databases",
																												":database",
																												"schemas",
																												":schema",
																												"tables",
																												":name",
																												"parameters",
																												"effective"
																											],
																											"variable": [
																												{
																													"key": "database"
																												},
																												{
																													"key": "schema"
																												},
																												{
																													"key": "name"
																												}
																											]
																										}
																									},
																									"status": "Method Not Allowed",
																									"code": 405,
																									"_postman_previewlanguage": "json",
																									"header": [
																										{
																											"key": "Content-Type",
																											"value": "application/json"
																										}
																									],
																									"cookie": [],
																									"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																								},
																								{
																									"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																									"originalRequest": {
																										"method": "GET",
																										"header": [
																											{
																												"key": "Accept",
																												"value": "application/json"
																											}
																										],
																										"url": {
																											"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name/parameters/effective",
																											"host": [
																												"{{baseUrl}}"
																											],
																											"path": [
																												"api",
																												"v2",
																												"databases",
																												":database",
																												"schemas",
																												":schema",
																												"tables",
																												":name",
																												"parameters",
																												"effective"
																											],
																											"variable": [
																												{
																													"key": "database"
																												},
																												{
																													"key": "schema"
																												},
																												{
																													"key": "name"
																												}
																											]
																										}
																									},
																									"status": "Internal Server Error",
																									"code": 500,
																									"_postman_previewlanguage": "json",
																									"header": [
																										{
																											"key": "Content-Type",
																											"value": "application/json"
																										}
																									],
																									"cookie": [],
																									"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																								},
																								{
																									"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																									"originalRequest": {
																										"method": "GET",
																										"header": [
																											{
																												"key": "Accept",
																												"value": "application/json"
																											}
																										],
																										"url": {
																											"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name/parameters/effective",
																											"host": [
																												"{{baseUrl}}"
																											],
																											"path": [
																												"api",
																												"v2",
																												"databases",
																												":database",
																												"schemas",
																												":schema",
																												"tables",
																												":name",
																												"parameters",
																												"effective"
																											],
																											"variable": [
																												{
																													"key": "database"
																												},
																												{
																													"key": "schema"
																												},
																												{
																													"key": "name"
																												}
																											]
																										}
																									},
																									"status": "Service Unavailable",
																									"code": 503,
																									"_postman_previewlanguage": "json",
																									"header": [
																										{
																											"key": "Content-Type",
																											"value": "application/json"
																										}
																									],
																									"cookie": [],
																									"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																								},
																								{
																									"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																									"originalRequest": {
																										"method": "GET",
																										"header": [
																											{
																												"key": "Accept",
																												"value": "application/json"
																											}
																										],
																										"url": {
																											"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name/parameters/effective",
																											"host": [
																												"{{baseUrl}}"
																											],
																											"path": [
																												"api",
																												"v2",
																												"databases",
																												":database",
																												"schemas",
																												":schema",
																												"tables",
																												":name",
																												"parameters",
																												"effective"
																											],
																											"variable": [
																												{
																													"key": "database"
																												},
																												{
																													"key": "schema"
																												},
																												{
																													"key": "name"
																												}
																											]
																										}
																									},
																									"status": "Gateway Timeout",
																									"code": 504,
																									"_postman_previewlanguage": "json",
																									"header": [
																										{
																											"key": "Content-Type",
																											"value": "application/json"
																										}
																									],
																									"cookie": [],
																									"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																								}
																							]
																						}
																					]
																				}
																			]
																		},
																		{
																			"name": "Fetch a table.",
																			"request": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						":name"
																					],
																					"query": [
																						{
																							"key": "deep",
																							"value": "<boolean>"
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																							"description": "(Required) "
																						},
																						{
																							"key": "schema",
																							"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																							"description": "(Required) "
																						},
																						{
																							"key": "name",
																							"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																							"description": "(Required) "
																						}
																					]
																				},
																				"description": "Fetch a Table using the describe command output."
																			},
																			"response": [
																				{
																					"name": "successful",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?deep=<boolean>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "deep",
																									"value": "<boolean>"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?deep=<boolean>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "deep",
																									"value": "<boolean>"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?deep=<boolean>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "deep",
																									"value": "<boolean>"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?deep=<boolean>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "deep",
																									"value": "<boolean>"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?deep=<boolean>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "deep",
																									"value": "<boolean>"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?deep=<boolean>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "deep",
																									"value": "<boolean>"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?deep=<boolean>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "deep",
																									"value": "<boolean>"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?deep=<boolean>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "deep",
																									"value": "<boolean>"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?deep=<boolean>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "deep",
																									"value": "<boolean>"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		},
																		{
																			"name": "Create a (or alter an existing) table.",
																			"request": {
																				"method": "PUT",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						":name"
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																							"description": "(Required) "
																						},
																						{
																							"key": "schema",
																							"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																							"description": "(Required) "
																						},
																						{
																							"key": "name",
																							"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																							"description": "(Required) "
																						}
																					]
																				},
																				"description": "Create a (or alter an existing) table. Even if the operation is just an alter, the full property set must be provided."
																			},
																			"response": [
																				{
																					"name": "Successful",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successful",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Created",
																					"code": 201,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		},
																		{
																			"name": "Delete a table",
																			"request": {
																				"method": "DELETE",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						":name"
																					],
																					"query": [
																						{
																							"key": "ifExists",
																							"value": "false"
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																							"description": "(Required) "
																						},
																						{
																							"key": "schema",
																							"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																							"description": "(Required) "
																						},
																						{
																							"key": "name",
																							"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																							"description": "(Required) "
																						}
																					]
																				},
																				"description": "Delete a table with the given name."
																			},
																			"response": [
																				{
																					"name": "Successful",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:clone",
																	"item": [
																		{
																			"name": "Clone table",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"reprehenderit cupidatat proident magna\",\n    \"reference\": \"ex Lorem\"\n  },\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						"{{name}}:clone"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																							"description": "(Required) "
																						},
																						{
																							"key": "schema",
																							"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																							"description": "(Required) "
																						}
																					]
																				},
																				"description": "Create a new table by cloning from the specified resource"
																			},
																			"response": [
																				{
																					"name": "Successful",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"reprehenderit cupidatat proident magna\",\n    \"reference\": \"ex Lorem\"\n  },\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:clone"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists"
																								},
																								{
																									"key": "copyGrants",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"reprehenderit cupidatat proident magna\",\n    \"reference\": \"ex Lorem\"\n  },\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:clone"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists"
																								},
																								{
																									"key": "copyGrants",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"reprehenderit cupidatat proident magna\",\n    \"reference\": \"ex Lorem\"\n  },\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:clone"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists"
																								},
																								{
																									"key": "copyGrants",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"reprehenderit cupidatat proident magna\",\n    \"reference\": \"ex Lorem\"\n  },\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:clone"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists"
																								},
																								{
																									"key": "copyGrants",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"reprehenderit cupidatat proident magna\",\n    \"reference\": \"ex Lorem\"\n  },\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:clone"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists"
																								},
																								{
																									"key": "copyGrants",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"reprehenderit cupidatat proident magna\",\n    \"reference\": \"ex Lorem\"\n  },\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:clone"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists"
																								},
																								{
																									"key": "copyGrants",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"reprehenderit cupidatat proident magna\",\n    \"reference\": \"ex Lorem\"\n  },\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:clone"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists"
																								},
																								{
																									"key": "copyGrants",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"reprehenderit cupidatat proident magna\",\n    \"reference\": \"ex Lorem\"\n  },\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:clone"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists"
																								},
																								{
																									"key": "copyGrants",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"reprehenderit cupidatat proident magna\",\n    \"reference\": \"ex Lorem\"\n  },\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:clone"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists"
																								},
																								{
																									"key": "copyGrants",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:create_like",
																	"item": [
																		{
																			"name": "Create a table like this existing one",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						"{{name}}:create_like"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						},
																						{
																							"key": "newTableName",
																							"value": "<string>",
																							"description": "(Required) "
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																							"description": "(Required) "
																						},
																						{
																							"key": "schema",
																							"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																							"description": "(Required) "
																						}
																					]
																				},
																				"description": "Create a new table like the specified resource, but empty"
																			},
																			"response": [
																				{
																					"name": "Successful",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create_like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists"
																								},
																								{
																									"key": "copyGrants",
																									"value": "false"
																								},
																								{
																									"key": "newTableName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create_like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists"
																								},
																								{
																									"key": "copyGrants",
																									"value": "false"
																								},
																								{
																									"key": "newTableName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create_like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists"
																								},
																								{
																									"key": "copyGrants",
																									"value": "false"
																								},
																								{
																									"key": "newTableName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create_like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists"
																								},
																								{
																									"key": "copyGrants",
																									"value": "false"
																								},
																								{
																									"key": "newTableName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create_like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists"
																								},
																								{
																									"key": "copyGrants",
																									"value": "false"
																								},
																								{
																									"key": "newTableName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create_like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists"
																								},
																								{
																									"key": "copyGrants",
																									"value": "false"
																								},
																								{
																									"key": "newTableName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create_like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists"
																								},
																								{
																									"key": "copyGrants",
																									"value": "false"
																								},
																								{
																									"key": "newTableName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create_like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists"
																								},
																								{
																									"key": "copyGrants",
																									"value": "false"
																								},
																								{
																									"key": "newTableName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create_like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists"
																								},
																								{
																									"key": "copyGrants",
																									"value": "false"
																								},
																								{
																									"key": "newTableName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:undrop",
																	"item": [
																		{
																			"name": "Undrop a table",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						"{{name}}:undrop"
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																							"description": "(Required) "
																						},
																						{
																							"key": "schema",
																							"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																							"description": "(Required) "
																						}
																					]
																				},
																				"description": "Undrop specified table"
																			},
																			"response": [
																				{
																					"name": "Successful",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:undrop"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:undrop"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:undrop"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:undrop"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:undrop"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:undrop"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:undrop"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:undrop"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:undrop"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:suspend_recluster",
																	"item": [
																		{
																			"name": "Suspend recluster of a table",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						"{{name}}:suspend_recluster"
																					],
																					"query": [
																						{
																							"key": "ifExists",
																							"value": "false"
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																							"description": "(Required) "
																						},
																						{
																							"key": "schema",
																							"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																							"description": "(Required) "
																						}
																					]
																				},
																				"description": "Suspend recluster of a table"
																			},
																			"response": [
																				{
																					"name": "Successful",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:resume_recluster",
																	"item": [
																		{
																			"name": "Resume recluster of a table",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						"{{name}}:resume_recluster"
																					],
																					"query": [
																						{
																							"key": "ifExists",
																							"value": "false"
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																							"description": "(Required) "
																						},
																						{
																							"key": "schema",
																							"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																							"description": "(Required) "
																						}
																					]
																				},
																				"description": "Resume recluster of a table"
																			},
																			"response": [
																				{
																					"name": "Successful",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:rename",
																	"item": [
																		{
																			"name": "Rename a table",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:rename?ifExists=false&newName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						"{{name}}:rename"
																					],
																					"query": [
																						{
																							"key": "ifExists",
																							"value": "false"
																						},
																						{
																							"key": "newName",
																							"value": "<string>",
																							"description": "(Required) "
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																							"description": "(Required) "
																						},
																						{
																							"key": "schema",
																							"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																							"description": "(Required) "
																						}
																					]
																				},
																				"description": "Rename a table"
																			},
																			"response": [
																				{
																					"name": "Successful",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:rename?ifExists=false&newName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:rename"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								},
																								{
																									"key": "newName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:rename?ifExists=false&newName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:rename"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								},
																								{
																									"key": "newName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:rename?ifExists=false&newName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:rename"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								},
																								{
																									"key": "newName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:rename?ifExists=false&newName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:rename"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								},
																								{
																									"key": "newName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:rename?ifExists=false&newName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:rename"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								},
																								{
																									"key": "newName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:rename?ifExists=false&newName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:rename"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								},
																								{
																									"key": "newName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:rename?ifExists=false&newName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:rename"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								},
																								{
																									"key": "newName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:rename?ifExists=false&newName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:rename"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								},
																								{
																									"key": "newName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:rename?ifExists=false&newName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:rename"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								},
																								{
																									"key": "newName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:swapwith",
																	"item": [
																		{
																			"name": "Swap with another table",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						"{{name}}:swapwith"
																					],
																					"query": [
																						{
																							"key": "ifExists",
																							"value": "false"
																						},
																						{
																							"key": "targetTableName",
																							"value": "<string>",
																							"description": "(Required) "
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																							"description": "(Required) "
																						},
																						{
																							"key": "schema",
																							"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																							"description": "(Required) "
																						}
																					]
																				},
																				"description": "Swap with another table"
																			},
																			"response": [
																				{
																					"name": "Successful",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swapwith"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								},
																								{
																									"key": "targetTableName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-destination-location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swapwith"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								},
																								{
																									"key": "targetTableName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swapwith"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								},
																								{
																									"key": "targetTableName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swapwith"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								},
																								{
																									"key": "targetTableName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swapwith"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								},
																								{
																									"key": "targetTableName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swapwith"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								},
																								{
																									"key": "targetTableName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swapwith"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								},
																								{
																									"key": "targetTableName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swapwith"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								},
																								{
																									"key": "targetTableName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swapwith"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								},
																								{
																									"key": "targetTableName",
																									"value": "<string>",
																									"description": "(Required) "
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "List tables",
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":schema",
																				"tables"
																			],
																			"query": [
																				{
																					"key": "like",
																					"value": "<string>",
																					"disabled": true
																				},
																				{
																					"key": "startsWith",
																					"value": "<string>",
																					"disabled": true
																				},
																				{
																					"key": "showLimit",
																					"value": "<integer>",
																					"disabled": true
																				},
																				{
																					"key": "fromName",
																					"value": "<string>",
																					"disabled": true
																				},
																				{
																					"key": "history",
																					"value": "<boolean>",
																					"disabled": true
																				},
																				{
																					"key": "deep",
																					"value": "<boolean>",
																					"disabled": true
																				}
																			],
																			"variable": [
																				{
																					"key": "database",
																					"value": "REST_DB",
																					"description": "(Required) "
																				},
																				{
																					"key": "schema",
																					"value": "TEST_SCHEMA",
																					"description": "(Required) "
																				}
																			]
																		},
																		"description": "Lists the tables under the database and schema."
																	},
																	"response": [
																		{
																			"name": "successful",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>"
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>"
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>"
																						},
																						{
																							"key": "fromName",
																							"value": "<string>"
																						},
																						{
																							"key": "history",
																							"value": "<boolean>"
																						},
																						{
																							"key": "deep",
																							"value": "<boolean>"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "[\n  {\n    \"name\": \"<string>\",\n    \"kind\": \"<string>\",\n    \"cluster_by\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"enable_schema_evolution\": \"<boolean>\",\n    \"change_tracking\": \"<boolean>\",\n    \"data_retention_time_in_days\": \"<integer>\",\n    \"max_data_extension_time_in_days\": \"<integer>\",\n    \"default_ddl_collation\": \"<string>\",\n    \"columns\": [\n      {\n        \"name\": \"<string>\",\n        \"datatype\": \"<string>\",\n        \"nullable\": true,\n        \"collate\": \"<string>\",\n        \"default\": \"<string>\",\n        \"autoincrement\": \"<boolean>\",\n        \"autoincrement_start\": \"<integer>\",\n        \"autoincrement_increment\": \"<integer>\",\n        \"constraints\": [\n          {\n            \"name\": \"<string>\",\n            \"column_names\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"constraint_type\": \"<string>\"\n          },\n          {\n            \"name\": \"<string>\",\n            \"column_names\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"constraint_type\": \"<string>\"\n          }\n        ],\n        \"comment\": \"<string>\"\n      },\n      {\n        \"name\": \"<string>\",\n        \"datatype\": \"<string>\",\n        \"nullable\": true,\n        \"collate\": \"<string>\",\n        \"default\": \"<string>\",\n        \"autoincrement\": \"<boolean>\",\n        \"autoincrement_start\": \"<integer>\",\n        \"autoincrement_increment\": \"<integer>\",\n        \"constraints\": [\n          {\n            \"name\": \"<string>\",\n            \"column_names\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"constraint_type\": \"<string>\"\n          },\n          {\n            \"name\": \"<string>\",\n            \"column_names\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"constraint_type\": \"<string>\"\n          }\n        ],\n        \"comment\": \"<string>\"\n      }\n    ],\n    \"constraints\": [\n      {\n        \"name\": \"<string>\",\n        \"column_names\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"constraint_type\": \"<string>\"\n      },\n      {\n        \"name\": \"<string>\",\n        \"column_names\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"constraint_type\": \"<string>\"\n      }\n    ],\n    \"comment\": \"<string>\",\n    \"created_on\": \"<dateTime>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\",\n    \"rows\": \"<long>\",\n    \"bytes\": \"<long>\",\n    \"owner\": \"<string>\",\n    \"dropped_on\": \"<dateTime>\",\n    \"automatic_clustering\": \"<boolean>\",\n    \"search_optimization\": \"<boolean>\",\n    \"search_optimization_progress\": \"<long>\",\n    \"search_optimization_bytes\": \"<long>\",\n    \"owner_role_type\": \"<string>\",\n    \"budget\": \"<string>\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"kind\": \"<string>\",\n    \"cluster_by\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"enable_schema_evolution\": \"<boolean>\",\n    \"change_tracking\": \"<boolean>\",\n    \"data_retention_time_in_days\": \"<integer>\",\n    \"max_data_extension_time_in_days\": \"<integer>\",\n    \"default_ddl_collation\": \"<string>\",\n    \"columns\": [\n      {\n        \"name\": \"<string>\",\n        \"datatype\": \"<string>\",\n        \"nullable\": true,\n        \"collate\": \"<string>\",\n        \"default\": \"<string>\",\n        \"autoincrement\": \"<boolean>\",\n        \"autoincrement_start\": \"<integer>\",\n        \"autoincrement_increment\": \"<integer>\",\n        \"constraints\": [\n          {\n            \"name\": \"<string>\",\n            \"column_names\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"constraint_type\": \"<string>\"\n          },\n          {\n            \"name\": \"<string>\",\n            \"column_names\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"constraint_type\": \"<string>\"\n          }\n        ],\n        \"comment\": \"<string>\"\n      },\n      {\n        \"name\": \"<string>\",\n        \"datatype\": \"<string>\",\n        \"nullable\": true,\n        \"collate\": \"<string>\",\n        \"default\": \"<string>\",\n        \"autoincrement\": \"<boolean>\",\n        \"autoincrement_start\": \"<integer>\",\n        \"autoincrement_increment\": \"<integer>\",\n        \"constraints\": [\n          {\n            \"name\": \"<string>\",\n            \"column_names\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"constraint_type\": \"<string>\"\n          },\n          {\n            \"name\": \"<string>\",\n            \"column_names\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"constraint_type\": \"<string>\"\n          }\n        ],\n        \"comment\": \"<string>\"\n      }\n    ],\n    \"constraints\": [\n      {\n        \"name\": \"<string>\",\n        \"column_names\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"constraint_type\": \"<string>\"\n      },\n      {\n        \"name\": \"<string>\",\n        \"column_names\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"constraint_type\": \"<string>\"\n      }\n    ],\n    \"comment\": \"<string>\",\n    \"created_on\": \"<dateTime>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\",\n    \"rows\": \"<long>\",\n    \"bytes\": \"<long>\",\n    \"owner\": \"<string>\",\n    \"dropped_on\": \"<dateTime>\",\n    \"automatic_clustering\": \"<boolean>\",\n    \"search_optimization\": \"<boolean>\",\n    \"search_optimization_progress\": \"<long>\",\n    \"search_optimization_bytes\": \"<long>\",\n    \"owner_role_type\": \"<string>\",\n    \"budget\": \"<string>\"\n  }\n]"
																		},
																		{
																			"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>"
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>"
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>"
																						},
																						{
																							"key": "fromName",
																							"value": "<string>"
																						},
																						{
																							"key": "history",
																							"value": "<boolean>"
																						},
																						{
																							"key": "deep",
																							"value": "<boolean>"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Bad Request",
																			"code": 400,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>"
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>"
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>"
																						},
																						{
																							"key": "fromName",
																							"value": "<string>"
																						},
																						{
																							"key": "history",
																							"value": "<boolean>"
																						},
																						{
																							"key": "deep",
																							"value": "<boolean>"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>"
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>"
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>"
																						},
																						{
																							"key": "fromName",
																							"value": "<string>"
																						},
																						{
																							"key": "history",
																							"value": "<boolean>"
																						},
																						{
																							"key": "deep",
																							"value": "<boolean>"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>"
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>"
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>"
																						},
																						{
																							"key": "fromName",
																							"value": "<string>"
																						},
																						{
																							"key": "history",
																							"value": "<boolean>"
																						},
																						{
																							"key": "deep",
																							"value": "<boolean>"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>"
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>"
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>"
																						},
																						{
																							"key": "fromName",
																							"value": "<string>"
																						},
																						{
																							"key": "history",
																							"value": "<boolean>"
																						},
																						{
																							"key": "deep",
																							"value": "<boolean>"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Method Not Allowed",
																			"code": 405,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>"
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>"
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>"
																						},
																						{
																							"key": "fromName",
																							"value": "<string>"
																						},
																						{
																							"key": "history",
																							"value": "<boolean>"
																						},
																						{
																							"key": "deep",
																							"value": "<boolean>"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Internal Server Error",
																			"code": 500,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>"
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>"
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>"
																						},
																						{
																							"key": "fromName",
																							"value": "<string>"
																						},
																						{
																							"key": "history",
																							"value": "<boolean>"
																						},
																						{
																							"key": "deep",
																							"value": "<boolean>"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Service Unavailable",
																			"code": 503,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>"
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>"
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>"
																						},
																						{
																							"key": "fromName",
																							"value": "<string>"
																						},
																						{
																							"key": "history",
																							"value": "<boolean>"
																						},
																						{
																							"key": "deep",
																							"value": "<boolean>"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Gateway Timeout",
																			"code": 504,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		}
																	]
																},
																{
																	"name": "Create a table (clone and undrop are separate subresources)",
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"name\": \"table_name\",\n    \"columns\": [\n        {\n            \"name\": \"id\",\n            \"datatype\": \"INT\",\n            \"nullable\": false\n        },\n        {\n                \"name\": \"name\",\n                \"datatype\": \"VARCHAR(255)\"\n        },\n        {\n                \"name\": \"email\",\n                \"datatype\": \"VARCHAR(255)\",\n                \"nullable\": false\n        },\n        {\n                \"name\": \"created_at\",\n                \"datatype\": \"DATETIME\"\n        }\n    ]\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":schema",
																				"tables"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists"
																				},
																				{
																					"key": "copyGrants",
																					"value": "false",
																					"disabled": true
																				}
																			],
																			"variable": [
																				{
																					"key": "database",
																					"value": "REST_DB",
																					"description": "(Required) "
																				},
																				{
																					"key": "schema",
																					"value": "TEST_SCHEMA",
																					"description": "(Required) "
																				}
																			]
																		},
																		"description": "Create a table."
																	},
																	"response": [
																		{
																			"name": "Successful",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Created",
																			"code": 201,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"status\": \"<string>\"\n}"
																		},
																		{
																			"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Bad Request",
																			"code": 400,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Method Not Allowed",
																			"code": 405,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Conflict",
																			"code": 409,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Internal Server Error",
																			"code": 500,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Service Unavailable",
																			"code": 503,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Gateway Timeout",
																			"code": 504,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		}
																	]
																}
															]
														},
														{
															"name": "tables:as_select",
															"item": [
																{
																	"name": "Create a table using the result of the specified select query",
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as_select?createMode=errorIfExists&copyGrants=false&select_query=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":schema",
																				"tables:as_select"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists"
																				},
																				{
																					"key": "copyGrants",
																					"value": "false"
																				},
																				{
																					"key": "select_query",
																					"value": "<string>",
																					"description": "(Required) "
																				}
																			],
																			"variable": [
																				{
																					"key": "database",
																					"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																					"description": "(Required) "
																				},
																				{
																					"key": "schema",
																					"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																					"description": "(Required) "
																				}
																			]
																		},
																		"description": "Create a table as select."
																	},
																	"response": [
																		{
																			"name": "Successful",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as_select?createMode=errorIfExists&copyGrants=false&select_query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as_select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						},
																						{
																							"key": "select_query",
																							"value": "<string>",
																							"description": "(Required) "
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Created",
																			"code": 201,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"status\": \"<string>\"\n}"
																		},
																		{
																			"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as_select?createMode=errorIfExists&copyGrants=false&select_query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as_select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						},
																						{
																							"key": "select_query",
																							"value": "<string>",
																							"description": "(Required) "
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Bad Request",
																			"code": 400,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as_select?createMode=errorIfExists&copyGrants=false&select_query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as_select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						},
																						{
																							"key": "select_query",
																							"value": "<string>",
																							"description": "(Required) "
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as_select?createMode=errorIfExists&copyGrants=false&select_query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as_select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						},
																						{
																							"key": "select_query",
																							"value": "<string>",
																							"description": "(Required) "
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as_select?createMode=errorIfExists&copyGrants=false&select_query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as_select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						},
																						{
																							"key": "select_query",
																							"value": "<string>",
																							"description": "(Required) "
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as_select?createMode=errorIfExists&copyGrants=false&select_query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as_select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						},
																						{
																							"key": "select_query",
																							"value": "<string>",
																							"description": "(Required) "
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Method Not Allowed",
																			"code": 405,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as_select?createMode=errorIfExists&copyGrants=false&select_query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as_select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						},
																						{
																							"key": "select_query",
																							"value": "<string>",
																							"description": "(Required) "
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Conflict",
																			"code": 409,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as_select?createMode=errorIfExists&copyGrants=false&select_query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as_select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						},
																						{
																							"key": "select_query",
																							"value": "<string>",
																							"description": "(Required) "
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Internal Server Error",
																			"code": 500,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as_select?createMode=errorIfExists&copyGrants=false&select_query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as_select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						},
																						{
																							"key": "select_query",
																							"value": "<string>",
																							"description": "(Required) "
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Service Unavailable",
																			"code": 503,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"<string>\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as_select?createMode=errorIfExists&copyGrants=false&select_query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as_select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						},
																						{
																							"key": "select_query",
																							"value": "<string>",
																							"description": "(Required) "
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Gateway Timeout",
																			"code": 504,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		}
																	]
																}
															]
														},
														{
															"name": "tables:using_template",
															"item": [
																{
																	"name": "Create a table using the templates specified in staged files",
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using_template?createMode=errorIfExists&copyGrants=false&newTableName=<string>&template=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":schema",
																				"tables:using_template"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists"
																				},
																				{
																					"key": "copyGrants",
																					"value": "false"
																				},
																				{
																					"key": "newTableName",
																					"value": "<string>",
																					"description": "(Required) "
																				},
																				{
																					"key": "template",
																					"value": "<string>",
																					"description": "(Required) "
																				}
																			],
																			"variable": [
																				{
																					"key": "database",
																					"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																					"description": "(Required) "
																				},
																				{
																					"key": "schema",
																					"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\"",
																					"description": "(Required) "
																				}
																			]
																		},
																		"description": "Create a table using template."
																	},
																	"response": [
																		{
																			"name": "Successful",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using_template?createMode=errorIfExists&copyGrants=false&newTableName=<string>&template=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using_template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						},
																						{
																							"key": "newTableName",
																							"value": "<string>",
																							"description": "(Required) "
																						},
																						{
																							"key": "template",
																							"value": "<string>",
																							"description": "(Required) "
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Created",
																			"code": 201,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"status\": \"<string>\"\n}"
																		},
																		{
																			"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using_template?createMode=errorIfExists&copyGrants=false&newTableName=<string>&template=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using_template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						},
																						{
																							"key": "newTableName",
																							"value": "<string>",
																							"description": "(Required) "
																						},
																						{
																							"key": "template",
																							"value": "<string>",
																							"description": "(Required) "
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Bad Request",
																			"code": 400,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using_template?createMode=errorIfExists&copyGrants=false&newTableName=<string>&template=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using_template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						},
																						{
																							"key": "newTableName",
																							"value": "<string>",
																							"description": "(Required) "
																						},
																						{
																							"key": "template",
																							"value": "<string>",
																							"description": "(Required) "
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using_template?createMode=errorIfExists&copyGrants=false&newTableName=<string>&template=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using_template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						},
																						{
																							"key": "newTableName",
																							"value": "<string>",
																							"description": "(Required) "
																						},
																						{
																							"key": "template",
																							"value": "<string>",
																							"description": "(Required) "
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using_template?createMode=errorIfExists&copyGrants=false&newTableName=<string>&template=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using_template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						},
																						{
																							"key": "newTableName",
																							"value": "<string>",
																							"description": "(Required) "
																						},
																						{
																							"key": "template",
																							"value": "<string>",
																							"description": "(Required) "
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using_template?createMode=errorIfExists&copyGrants=false&newTableName=<string>&template=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using_template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						},
																						{
																							"key": "newTableName",
																							"value": "<string>",
																							"description": "(Required) "
																						},
																						{
																							"key": "template",
																							"value": "<string>",
																							"description": "(Required) "
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Method Not Allowed",
																			"code": 405,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using_template?createMode=errorIfExists&copyGrants=false&newTableName=<string>&template=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using_template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						},
																						{
																							"key": "newTableName",
																							"value": "<string>",
																							"description": "(Required) "
																						},
																						{
																							"key": "template",
																							"value": "<string>",
																							"description": "(Required) "
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Conflict",
																			"code": 409,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using_template?createMode=errorIfExists&copyGrants=false&newTableName=<string>&template=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using_template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						},
																						{
																							"key": "newTableName",
																							"value": "<string>",
																							"description": "(Required) "
																						},
																						{
																							"key": "template",
																							"value": "<string>",
																							"description": "(Required) "
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Internal Server Error",
																			"code": 500,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using_template?createMode=errorIfExists&copyGrants=false&newTableName=<string>&template=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using_template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						},
																						{
																							"key": "newTableName",
																							"value": "<string>",
																							"description": "(Required) "
																						},
																						{
																							"key": "template",
																							"value": "<string>",
																							"description": "(Required) "
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Service Unavailable",
																			"code": 503,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using_template?createMode=errorIfExists&copyGrants=false&newTableName=<string>&template=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using_template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						},
																						{
																							"key": "copyGrants",
																							"value": "false"
																						},
																						{
																							"key": "newTableName",
																							"value": "<string>",
																							"description": "(Required) "
																						},
																						{
																							"key": "template",
																							"value": "<string>",
																							"description": "(Required) "
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Gateway Timeout",
																			"code": 504,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		}
																	]
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			},
			{
				"key": "value",
				"value": "Snowflake Token=\"{{sessionToken}}\"",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://org-account.snowflakecomputing.com"
		},
		{
			"key": "name",
			"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\""
		},
		{
			"key": "name",
			"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\""
		},
		{
			"key": "name",
			"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\""
		},
		{
			"key": "name",
			"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\""
		},
		{
			"key": "name",
			"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\""
		},
		{
			"key": "name",
			"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\""
		},
		{
			"key": "name",
			"value": "\"u\"\"\"\"~F2\"\"\"\"\"\"']\""
		}
	]
}