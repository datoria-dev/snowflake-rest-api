openapi: 3.0.0
servers:
  - description: Snowflake REST Server
    url: https://org-account.snowflakecomputing.com
info:
  version: 0.0.1
  title: Snowflake Table API
  description: >-
    The Snowflake Table API is a REST API that you can use to access, update, and perform certain actions on Tables resource in a Snowflake database.
  contact:
    name: Snowflake, Inc.
    url: https://snowflake.com
    email: support@snowflake.com
paths:
  /api/v2/databases/{database}/schemas/{schema}/tables:
    get:
      summary: List tables
      tags:
        - table
      description: Lists the tables under the database and schema.
      operationId: listTables
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/like'
        - $ref: 'common.yaml#/components/parameters/startsWith'
        - $ref: 'common.yaml#/components/parameters/showLimit'
        - $ref: 'common.yaml#/components/parameters/fromName'
        - name: "history"
          description: Optionally includes dropped tables that have not yet been purged.
          in: query
          required: false
          schema:
            type: boolean
        - name: deep
          description: Optionally includes dependency information of the table.
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Table'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
    post:
      summary: Create a table (clone and undrop are separate subresources)
      tags:
        - table
      description: Create a table.
      operationId: createTable
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/createMode'
        - $ref: 'common.yaml#/components/parameters/copyGrants'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Table'
      responses:
        '201':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '409':
          $ref: 'common.yaml#/components/responses/409Conflict'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database}/schemas/{schema}/tables:as_select:
    post:
      summary: Create a table using the result of the specified select query
      tags:
        - table
      # TODO: Properly interpret this and implement it in Handlebars
      description: Create a table as select.
      operationId: createTableAsSelect
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/createMode'
        - $ref: 'common.yaml#/components/parameters/copyGrants'
        - name: select_query
          description: The query string to create the table from.
          in: 'query'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Table'
      responses:
        '201':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '409':
          $ref: 'common.yaml#/components/responses/409Conflict'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database}/schemas/{schema}/tables:using_template:
    post:
      summary: Create a table using the templates specified in staged files
      tags:
        - table
      # TODO: Properly interpret this and implement it in Handlebars
      description: Create a table using template.
      operationId: createTableUsingTemplate
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/createMode'
        - $ref: 'common.yaml#/components/parameters/copyGrants'
        - name: newTableName
          description: The name of the table to be created.
          in: 'query'
          required: true
          schema:
            type: string
        - name: template
          description: The query string to create the table from.
          in: 'query'
          required: true
          schema:
            type: string
      responses:
        '201':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '409':
          $ref: 'common.yaml#/components/responses/409Conflict'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'  
  /api/v2/databases/{database}/schemas/{schema}/tables/{name}:
    get:
      summary: Fetch a table.
      tags:
        - table
      description: Fetch a Table using the describe command output.
      operationId: fetchTable
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/name'
        - name: deep
          description: Optionally includes dependency information of the table.
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
    delete:
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/name'
        - $ref: 'common.yaml#/components/parameters/ifExists'
      summary: Delete a table
      tags:
        - table
      description: Delete a table with the given name.
      operationId: deleteTable
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database}/schemas/{schema}/tables/{name}:clone:
    post:
      summary: Clone table
      tags:
        - table
      description: Create a new table by cloning from the specified resource
      operationId: cloneTable
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/name'
        - $ref: 'common.yaml#/components/parameters/createMode'
        - $ref: 'common.yaml#/components/parameters/copyGrants'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableClone'
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database}/schemas/{schema}/tables/{name}:create_like:
    post:
      summary: Create a table like this existing one
      tags:
        - table
      description: Create a new table like the specified resource, but empty
      operationId: createTableLike
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/name'
        - $ref: 'common.yaml#/components/parameters/createMode'
        - $ref: 'common.yaml#/components/parameters/copyGrants'
        - name: newTableName
          description: The name of the table to be created.
          in: 'query'
          required: true
          schema:
            type: string 
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database}/schemas/{schema}/tables/{name}:undrop:
    post:
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/name'
      summary: Undrop a table
      tags:
        - table
      description: Undrop specified table
      operationId: undropTable
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database}/schemas/{schema}/tables/{name}:suspend_recluster:
    post:
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/name'
        - $ref: 'common.yaml#/components/parameters/ifExists'
      summary: Suspend recluster of a table
      tags:
        - table
      description: Suspend recluster of a table
      operationId: suspendRecluster
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database}/schemas/{schema}/tables/{name}:resume_recluster:
    post:
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/name'
        - $ref: 'common.yaml#/components/parameters/ifExists'
      summary: Resume recluster of a table
      tags:
        - table
      description: Resume recluster of a table
      operationId: resumeRecluster
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database}/schemas/{schema}/tables/{name}:rename:
    post:
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/name'
        - $ref: 'common.yaml#/components/parameters/ifExists'
        - name: newName
          description: The new name for the table.
          in: 'query'
          required: true
          schema:
            type: string
      summary: Rename a table
      tags:
        - table
      description: Rename a table
      operationId: renameTable
      responses:
        '200':
          headers:
            Location:
              schema:
                type: string
          description: Successful
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database}/schemas/{schema}/tables/{name}:swapwith:
    post:
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/name'
        - $ref: 'common.yaml#/components/parameters/ifExists'
        - name: targetTableName
          description: The name of the target table to be swaped with.
          in: 'query'
          required: true
          schema:
            type: string
      summary: Swap with another table
      tags:
        - table
      description: Swap with another table
      operationId: swapWith
      responses:
        '200':
          headers:
            Location:
              schema:
                type: string
            X-destination-location: 
              schema:
                type: string
          description: Successful
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database}/schemas/{schema}/tables/{name}/parameters/effective:
    get:
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/name'
      summary: Fetch the effective parameters of a table.
      tags:
        - table
      # TODO: Support SHOW AS RESOURCE PARAMETERS FOR TABLE
      description: Fetch the effective parameters of a table.
      operationId: fetchEffectiveParameters
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'

components:
  schemas:
    Table:
      type: object
      description: A Snowflake table
      properties:
        name:
          type: string
          description: Specifies the name for the table,
            must be unique for the schema in which the table is created
        kind:
          type: string
          description: Table type. TABLE for permanent tables, TEMPORARY, or TRANSIENT
        cluster_by:
          type: array
          description: Specifies one or more columns or column expressions in the table as the clustering key
          items:
            type: string
        enable_schema_evolution:
          type: boolean
          description: Table has schema evolution enabled or disabled
        change_tracking:
          type: boolean
          description: Change tracking is enabled or disabled
        data_retention_time_in_days:
          type: integer
          description: Specifies the retention period for the table so that Time Travel 
            actions SELECT, CLONE, UNDROP can be performed on historical data in the table
        max_data_extension_time_in_days:
          type: integer
          description: Specifies the retention period for the table so that Time Travel actions 
            SELECT, CLONE, UNDROP can be performed on historical data in the table
        default_ddl_collation:
          type: string
          description: Specifies a default collation specification for the columns in the table, 
            including columns added to the table in the future
        columns:
          type: array
          items:
            $ref: '#/components/schemas/TableColumn'
        constraints:
          type: array
          items:
            $ref: '#/components/schemas/Constraint'
        comment:
          type: string
          description: Comment for the table
        
        # readonly
        created_on:
          type: string
          format: date-time
          description: Date and time when the table was created.
        database_name:
          type: string
          description: Database in which the table is stored
        schema_name:
          type: string
          description: Schema in which the table is stored
        rows:
          type: integer
          format: int64
          description: Number of rows in the table. Returns NULL for external tables.
        bytes:
          type: integer
          format: int64
          description: Number of bytes that will be scanned if the entire table is scanned in a query. 
            Note that this number may be different than the number of actual physical bytes stored on-disk for the table
        owner:
          type: string
          description: Role that owns the table
        dropped_on:
          type: string
          format: date-time
          description: Date and time when the table was dropped
        automatic_clustering:
          type: boolean
          description: If Automatic Clustering is enabled for your account, 
            specifies whether it is explicitly enabled or disabled for the table. 
        search_optimization:
          type: boolean
          description: If ON, the table has the search optimization service enabled
        search_optimization_progress:
          type: integer
          format: int64
          description: Percentage of the table that has been optimized for search.
        search_optimization_bytes:
          type: integer
          format: int64
          description: Number of additional bytes of storage that the search optimization service consumes for this table
        owner_role_type:
          type: string
          description: The type of role that owns the object.
        budget:
          type: string
          description: Name of the budget if the object is monitored by a budget
      required:
        - name

    TableColumn:
      type: object
      description: A column in the table
      properties:
        name:
          type: string
          description: Column name
        datatype:
          type: string
          description: The data type for the column
        nullable:
          type: boolean
          default: true
          description: Specifies that the column does allow NULL values or not.
        collate:
          type: string
          description: Specifies the collation to use for column operations such as string comparison
        default:
          type: string
          description: Specifies whether a default value is automatically inserted in the column if a value is not explicitly specified
           via an INSERT or CREATE TABLE AS SELECT statement
        autoincrement:
          type: boolean
        autoincrement_start:
          type: integer
          description: The default value for the column starts with the specified number
        autoincrement_increment:
          type: integer
          description: Each successive value for the column automatically increments by the specified amount
        constraints:
          type: array
          items:
            $ref: '#/components/schemas/Constraint'
        comment:
          type: string
          description: Specifies a comment for the column
      required:
        - name
        - datatype

    Constraint:
      type: object
      description: Constraints define integrity and consistency rules for data stored in tables.
      properties:
        name:
          type: string
          description: Name of the Constraint
        column_names:
          type: array
          items:
            type: string
            description: Column name for the constraint
        constraint_type:
          type: string
          description: Type of the constraint
      discriminator:
        propertyName: constraint_type
        mapping:
          PRIMARY KEY: PrimaryKey
          FOREIGN KEY: ForeignKey
          UNIQUE: UniqueKey

    PrimaryKey:
      allOf:
        - $ref: '#/components/schemas/Constraint'
      type: object
      description: A primary key is the column or columns that contain values that uniquely identify each row in a table.

    UniqueKey:
      allOf:
        - $ref: '#/components/schemas/Constraint'
      type: object
      description: Unique keys are columns in a table that uniquely identify items in the rows. 
        This sounds a lot like a primary key, but the main difference is that unique keys can have NULL values. 
            
    ForeignKey:
      allOf:
        - $ref: '#/components/schemas/Constraint'
      type: object
      description: Foreign keys link data in one table to the data in another table.
      properties:
        referenced_table_name:
          type: string
        referenced_column_names:
          type: array
          items:
            type: string
      required:
        - referenced_table_name
        - referenced_column_names

    TableClone:
      type: object
      description: Clone table
      allOf:
          - $ref: '#/components/schemas/Table'
      properties:
        point_of_time:
          $ref: 'common.yaml#/components/schemas/PointOfTime'

tags:
  - name: table
