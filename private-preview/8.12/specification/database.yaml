openapi: 3.0.0
servers:
  - description: Snowflake Database API
    url: https://org-account.snowflakecomputing.com
info:
  version: 0.0.1
  title: Snowflake Database API
  description: >-
    The Snowflake Database API is a REST API that you can use to access, update, and perform certain actions on Database resource in Snowflake.
  contact:
    name: Snowflake, Inc.
    url: https://snowflake.com
    email: support@snowflake.com
paths:
  # TODO: add rename, swap with
  /api/v2/databases:
    get:
      summary: List databases
      tags:
        - database
      description: Lists the accessible databases.
      operationId: listDatabases
      parameters:
        - $ref: 'common.yaml#/components/parameters/like'
        - $ref: 'common.yaml#/components/parameters/startsWith'
        - $ref: 'common.yaml#/components/parameters/showLimit'
        - $ref: 'common.yaml#/components/parameters/fromName'
        - name: 'history'
          in: 'query'
          description: Optionally includes dropped databases that have not yet been purged.
          schema:
            type: boolean

      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Database'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
    post:
      summary: Create a database
      tags:
        - database
      description: Create a database, with modifiers as query parameters.
        See the database definition for what is required to
        be provided in the request body. (Cloning not currently supported)
      operationId: createDatabase
      parameters:
        - $ref: 'common.yaml#/components/parameters/createMode'
        - name: kind
          in: query
          description: Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Database'
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '409':
          $ref: 'common.yaml#/components/responses/409Conflict'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/from_share:
    post:
      summary: Create a database from a share.
      tags:
        - database
      description: Create a database from a given share
      operationId: createDatabaseFromShare
      parameters:
        - $ref: 'common.yaml#/components/parameters/createMode'
        - name: name
          in: query
          description: Name of the database to be created
          schema:
            type: string
        - name: share
          in: query
          description: The share the database should be created from.
            Should be of the form "<provider_account>.<share_name>".
          schema:
            type: string
        - name: kind
          in: query
          description: Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported.
          schema:
            type: string
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '409':
          $ref: 'common.yaml#/components/responses/409Conflict'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{name}/clone:
    post:
      summary: Clone a database
      tags:
        - database
      description: Clone an existing database, with modifiers as query parameters.
        See the database definition for what is required to
        be provided in the request body. (Cloning not currently supported)
      operationId: cloneDatabase
      parameters:
        - $ref: 'common.yaml#/components/parameters/name'
        - $ref: 'common.yaml#/components/parameters/createMode'
        - name: kind
          in: query
          description: Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseClone'
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '409':
          $ref: 'common.yaml#/components/responses/409Conflict'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{name}:
    get:
      tags:
        - database
      description: Fetch a database.
      operationId: fetchDatabase
      parameters:
        - $ref: 'common.yaml#/components/parameters/name'
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
    delete:
      summary: Delete a database.
      tags:
        - database
      description: Delete a database with the given name. If ifExists is used, the operation will
        succeed even if the object does not exist. Otherwise, there will be a failure
        if the drop is unsuccessful.
      operationId: deleteDatabase
      parameters:
        - $ref: 'common.yaml#/components/parameters/name'
        - $ref: 'common.yaml#/components/parameters/ifExists'
        - name: restrict
          in: query
          description: Specifies whether the database should not be droppped if there are existing foreign key references.
            Returns a warning instead.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{name}/replication:enable:
    post:
      summary: Enable database replication.
      tags:
        - database
      description: Promotes a local database to serve as a primary database for replication.
        A primary database can be replicated in one or more accounts, allowing users
        in those accounts to query objects in each secondary (i.e. replica) database.
      operationId: enableDatabaseReplication
      parameters:
        - $ref: 'common.yaml#/components/parameters/name'
        - name: ignore_edition_check
          in: query
          description: Allows replicating data to accounts on lower editions. Please see
            https://docs.snowflake.com/en/sql-reference/sql/alter-database for full description.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountIdentifiers'
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '409':
          $ref: 'common.yaml#/components/responses/409Conflict'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{name}/replication:disable:
    post:
      summary: Disable database replication.
      tags:
        - database
      description: Disables replication for this primary database, meaning no replica
        of this database (i.e. secondary database) in another account can be refreshed.
        Any secondary databases remain linked to the primary database, but requests to
        refresh a secondary database are denied.
      operationId: disableDatabaseReplication
      parameters:
        - $ref: 'common.yaml#/components/parameters/name'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountIdentifiers'
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '409':
          $ref: 'common.yaml#/components/responses/409Conflict'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{name}/replication:refresh:
    post:
      summary: Refresh database replications.
      tags:
        - database
      description: Refreshes a secondary database from a snapshot of its
        primary database. A snapshot includes changes to the objects and data.
      operationId: refreshDatabaseReplication
      parameters:
        - $ref: 'common.yaml#/components/parameters/name'
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '409':
          $ref: 'common.yaml#/components/responses/409Conflict'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{name}/failover:enable:
    post:
      summary: Enable database failover.
      tags:
        - database
      description: Specifies a comma-separated list of accounts in your
        organization where a replica of this primary database can be
        promoted to serve as the primary database.
      operationId: enableDatabaseFailover
      parameters:
        - $ref: 'common.yaml#/components/parameters/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountIdentifiers'
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '409':
          $ref: 'common.yaml#/components/responses/409Conflict'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{name}/failover:disable:
    post:
      summary: Disable database failover.
      tags:
        - database
      description: Disables failover for this primary database, meaning
        no replica of this database (i.e. secondary database) can be
        promoted to serve as the primary database.
      operationId: disableDatabaseFailover
      parameters:
        - $ref: 'common.yaml#/components/parameters/name'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountIdentifiers'
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '409':
          $ref: 'common.yaml#/components/responses/409Conflict'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{name}/failover:primary:
    post:
      summary: Set database as primary.
      tags:
        - database
      description: Promotes the specified secondary (replica) database to
        serve as the primary database.
      operationId: primaryDatabaseFailover
      parameters:
        - $ref: 'common.yaml#/components/parameters/name'
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '409':
          $ref: 'common.yaml#/components/responses/409Conflict'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
components:
  schemas:
    AccountIdentifiers:
      type: object
      description: An array of unique account identifiers.
      properties:
        accounts:
          type: array
          items:
            type: string
            minLength: 1
      example:
        accounts: ['accountName1', 'accountName2']
      required:
        - accounts
    Database:
      type: object
      description: A Snowflake database.
      properties:
        # from show command
        created_on:
          type: string
          format: date-time
          readOnly: true
          description: Database creation date and time
        name:
          $ref: './common.yaml#/components/schemas/Identifier'
          description: Name of the database
        is_default:
          type: boolean
          readOnly: true
          description: Default database for a user
        is_current:
          type: boolean
          readOnly: true
          description: Current database for the session
        origin:
          type: string
          readOnly: true
        owner:
          type: string
          readOnly: true
          description: Name of the role that owns the database
        comment:
          type: string
          description: Specifies a comment for the database
        options:
          type: string
          readOnly: true
        retention_time:
          type: integer
          readOnly: true
          description: Number of days that historical data is retained for Time Travel.
        dropped_on:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: Database dropped date and time
        kind:
          type: string
          readOnly: true
          description: Type of database. At the time of writing this transient and permanent (represented by the empty string) are supported.
        budget:
          type: string
          readOnly: true
          description: A budget defines a monthly spending limit on the compute costs 
            for a Snowflake account or a custom group of Snowflake objects.
        owner_role_type:
          type: string
          readOnly: true
          description: The type of role that owns the object, either ROLE or DATABASE_ROLE
        # from parameters
        data_retention_time_in_days:  # technically also available from show command
          type: integer
          description: Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database, 
            as well as specifying the default Time Travel retention time for all schemas created in the database.
        default_ddl_collation:
          type: string
          description: Specifies a default collation specification for all schemas and tables added to the database. 
            The default can be overridden at the schema and individual table level.
        log_level:
          type: string
          description: Specifies the severity level of messages that should be ingested
            and made available in the active event table.
            At the time of writing the supported values are TRACE, DEBUG, INFO, WARN,
            ERROR, FATAL and OFF.
        max_data_extension_time_in_days:
          type: integer
          description: Object parameter that specifies the maximum number of days for which Snowflake can extend 
            the data retention period for tables in the database to prevent streams on the tables from becoming stale.
        suspend_task_after_num_failures:
          type: integer
          description: Specifies the number of consecutive failed task runs after which the current task is suspended automatically.
        trace_level:
          type: string
          description: Controls how trace events are ingested into the event table.
            At the time of writing the supported values are ALWAYS, ON_EVENT and OFF.
        user_task_managed_initial_warehouse_size:
          type: string
          description: Specifies the size of the compute resources to provision for the first run of the task, 
            before a task history is available for Snowflake to determine an ideal size.
        user_task_timeout_ms:
          type: integer
          description: Specifies the time limit on a single run of the task before it times out in milliseconds
      required:
        - name
    DatabaseClone:
      type: object
      description: Clone database
      allOf:
          - $ref: '#/components/schemas/Database'
      properties:
        point_of_time:
          $ref: 'common.yaml#/components/schemas/PointOfTime'
tags:
  - name: database
