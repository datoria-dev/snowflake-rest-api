{
	"info": {
		"_postman_id": "1af61c08-a610-4705-b19c-4760742b5dca",
		"name": "Snowflake Tasks API",
		"description": "The Snowflake Tasks API is a REST API that you can use to access, update, and perform certain actions on Task resources in a Snowflake database.\n\nContact Support:\n Name: Snowflake, Inc.\n Email: support@snowflake.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28868798",
		"_collection_link": "https://snowflake.postman.co/workspace/SnowApi-Demo~576e3337-09c5-4d42-a068-1fb91ebec0b9/collection/28868798-1af61c08-a610-4705-b19c-4760742b5dca?action=share&source=collection_link&creator=28868798"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "v2",
					"item": [
						{
							"name": "databases",
							"item": [
								{
									"name": "{database}",
									"item": [
										{
											"name": "schemas",
											"item": [
												{
													"name": "{schema}",
													"item": [
														{
															"name": "tasks",
															"item": [
																{
																	"name": "{name}",
																	"item": [
																		{
																			"name": "dependents",
																			"item": [
																				{
																					"name": "Fetch the dependent tasks of a task",
																					"request": {
																						"auth": {
																							"type": "apikey",
																							"apikey": [
																								{
																									"key": "value",
																									"value": "Snowflake Token=\"{{sessionToken}}\"",
																									"type": "string"
																								},
																								{
																									"key": "in",
																									"value": "header",
																									"type": "string"
																								},
																								{
																									"key": "key",
																									"value": "Authorization",
																									"type": "string"
																								}
																							]
																						},
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/dependents",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name",
																								"dependents"
																							],
																							"variable": [
																								{
																									"key": "database",
																									"value": "{{database}}",
																									"description": "(Required) "
																								},
																								{
																									"key": "schema",
																									"value": "{{schema}}",
																									"description": "(Required) "
																								},
																								{
																									"key": "name",
																									"value": "{{task_name}}",
																									"description": "(Required) "
																								}
																							]
																						},
																						"description": "This operation returns a list of the dependent tasks of the task with identifier {name}."
																					},
																					"response": [
																						{
																							"name": "successful",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/dependents",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"dependents"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "OK",
																							"code": 200,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "[\n  {\n    \"name\": \"Pw$SP9KZSr\",\n    \"definition\": \"<string>\",\n    \"warehouse\": \"WBzQP_2\",\n    \"schedule\": {\n      \"minutes\": \"<integer>\"\n    },\n    \"comment\": \"<string>\",\n    \"config\": {\n      \"Ut_293\": -93287673.26920931,\n      \"cupidatatf0d\": \"qui fugiat in \",\n      \"quis1\": \"aliqua enim eiusmod consequat cupidatat\",\n      \"Ut_0\": \"incididunt ullamco dolore in commodo\"\n    },\n    \"predecessors\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"user_task_managed_initial_warehouse_size\": \"<string>\",\n    \"user_task_timeout_ms\": \"<integer>\",\n    \"suspend_task_after_num_failures\": \"<integer>\",\n    \"condition\": \"<string>\",\n    \"allow_overlapping_execution\": \"<boolean>\",\n    \"error_integration\": \"<string>\",\n    \"created_on\": \"<dateTime>\",\n    \"id\": \"<string>\",\n    \"owner\": \"<string>\",\n    \"owner_role_type\": \"<string>\",\n    \"state\": \"started\",\n    \"last_committed_on\": \"<dateTime>\",\n    \"last_suspended_on\": \"<dateTime>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\"\n  },\n  {\n    \"name\": \"gTq9T\",\n    \"definition\": \"<string>\",\n    \"warehouse\": \"\\\"\\\"\\\":((\\\"\\\"4\\\"\",\n    \"schedule\": {\n      \"minutes\": \"<integer>\"\n    },\n    \"comment\": \"<string>\",\n    \"config\": {\n      \"culpa182\": -36841827.82457221,\n      \"consectetur_f2\": \"Ut anim\",\n      \"officia_aa\": -66193433.51332709\n    },\n    \"predecessors\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"user_task_managed_initial_warehouse_size\": \"<string>\",\n    \"user_task_timeout_ms\": \"<integer>\",\n    \"suspend_task_after_num_failures\": \"<integer>\",\n    \"condition\": \"<string>\",\n    \"allow_overlapping_execution\": \"<boolean>\",\n    \"error_integration\": \"<string>\",\n    \"created_on\": \"<dateTime>\",\n    \"id\": \"<string>\",\n    \"owner\": \"<string>\",\n    \"owner_role_type\": \"<string>\",\n    \"state\": \"suspended\",\n    \"last_committed_on\": \"<dateTime>\",\n    \"last_suspended_on\": \"<dateTime>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\"\n  }\n]"
																						},
																						{
																							"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/dependents",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"dependents"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Bad Request",
																							"code": 400,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/dependents",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"dependents"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Unauthorized",
																							"code": 401,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/dependents",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"dependents"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Forbidden",
																							"code": 403,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/dependents",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"dependents"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Not Found",
																							"code": 404,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/dependents",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"dependents"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Method Not Allowed",
																							"code": 405,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/dependents",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"dependents"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Too Many Requests",
																							"code": 429,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/dependents",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"dependents"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Internal Server Error",
																							"code": 500,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/dependents",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"dependents"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Service Unavailable",
																							"code": 503,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/dependents",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"dependents"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Gateway Timeout",
																							"code": 504,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						}
																					]
																				}
																			]
																		},
																		{
																			"name": "current_graphs",
																			"item": [
																				{
																					"name": "Get the graph runs that are executing or scheduled for the task for the next 8 days.",
																					"request": {
																						"auth": {
																							"type": "apikey",
																							"apikey": [
																								{
																									"key": "value",
																									"value": "Snowflake Token=\"{{sessionToken}}\"",
																									"type": "string"
																								},
																								{
																									"key": "in",
																									"value": "header",
																									"type": "string"
																								},
																								{
																									"key": "key",
																									"value": "Authorization",
																									"type": "string"
																								}
																							]
																						},
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current_graphs?resultLimit=<integer>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name",
																								"current_graphs"
																							],
																							"query": [
																								{
																									"key": "resultLimit",
																									"value": "<integer>"
																								}
																							],
																							"variable": [
																								{
																									"key": "database",
																									"value": "{{database}}",
																									"description": "(Required) "
																								},
																								{
																									"key": "schema",
																									"value": "{{schema}}",
																									"description": "(Required) "
																								},
																								{
																									"key": "name",
																									"value": "{{task_name}}",
																									"description": "(Required) "
																								}
																							]
																						},
																						"description": "This function returns details for graph runs that are currently executing or are next scheduled to run within the next 8 days."
																					},
																					"response": [
																						{
																							"name": "successful",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current_graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "OK",
																							"code": 200,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "[\n  {\n    \"root_task_name\": \"<string>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\",\n    \"state\": \"EXECUTING\",\n    \"scheduled_time\": \"<dateTime>\",\n    \"next_scheduled_time\": \"<dateTime>\",\n    \"root_task_id\": \"<string>\",\n    \"graph_version\": \"<integer>\",\n    \"run_id\": \"<integer>\",\n    \"first_error_task_name\": \"<string>\",\n    \"first_error_code\": \"<integer>\",\n    \"first_error_message\": \"<string>\",\n    \"query_start_time\": \"<dateTime>\",\n    \"completed_time\": \"<dateTime>\"\n  },\n  {\n    \"root_task_name\": \"<string>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\",\n    \"state\": \"EXECUTING\",\n    \"scheduled_time\": \"<dateTime>\",\n    \"next_scheduled_time\": \"<dateTime>\",\n    \"root_task_id\": \"<string>\",\n    \"graph_version\": \"<integer>\",\n    \"run_id\": \"<integer>\",\n    \"first_error_task_name\": \"<string>\",\n    \"first_error_code\": \"<integer>\",\n    \"first_error_message\": \"<string>\",\n    \"query_start_time\": \"<dateTime>\",\n    \"completed_time\": \"<dateTime>\"\n  }\n]"
																						},
																						{
																							"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current_graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Bad Request",
																							"code": 400,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current_graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Unauthorized",
																							"code": 401,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current_graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Forbidden",
																							"code": 403,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current_graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Not Found",
																							"code": 404,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current_graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Method Not Allowed",
																							"code": 405,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current_graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Too Many Requests",
																							"code": 429,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current_graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Internal Server Error",
																							"code": 500,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current_graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Service Unavailable",
																							"code": 503,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current_graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Gateway Timeout",
																							"code": 504,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						}
																					]
																				}
																			]
																		},
																		{
																			"name": "complete_graphs",
																			"item": [
																				{
																					"name": "Get the graph runs that are completed for the task.",
																					"request": {
																						"auth": {
																							"type": "apikey",
																							"apikey": [
																								{
																									"key": "value",
																									"value": "Snowflake Token=\"{{sessionToken}}\"",
																									"type": "string"
																								},
																								{
																									"key": "in",
																									"value": "header",
																									"type": "string"
																								},
																								{
																									"key": "key",
																									"value": "Authorization",
																									"type": "string"
																								}
																							]
																						},
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete_graphs?resultLimit=1000&errorOnly=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name",
																								"complete_graphs"
																							],
																							"query": [
																								{
																									"key": "resultLimit",
																									"value": "1000",
																									"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																								},
																								{
																									"key": "errorOnly",
																									"value": "false",
																									"description": "Whether to only return results for tasks runs that have failed. Default is false."
																								}
																							],
																							"variable": [
																								{
																									"key": "database",
																									"value": "{{database}}",
																									"description": "(Required) "
																								},
																								{
																									"key": "schema",
																									"value": "{{schema}}",
																									"description": "(Required) "
																								},
																								{
																									"key": "name",
																									"value": "{{task_name}}",
																									"description": "(Required) "
																								}
																							]
																						},
																						"description": "This function returns details for graph runs that are completed."
																					},
																					"response": [
																						{
																							"name": "successful",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete_graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "OK",
																							"code": 200,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "[\n  {\n    \"root_task_name\": \"<string>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\",\n    \"state\": \"EXECUTING\",\n    \"scheduled_time\": \"<dateTime>\",\n    \"next_scheduled_time\": \"<dateTime>\",\n    \"root_task_id\": \"<string>\",\n    \"graph_version\": \"<integer>\",\n    \"run_id\": \"<integer>\",\n    \"first_error_task_name\": \"<string>\",\n    \"first_error_code\": \"<integer>\",\n    \"first_error_message\": \"<string>\",\n    \"query_start_time\": \"<dateTime>\",\n    \"completed_time\": \"<dateTime>\"\n  },\n  {\n    \"root_task_name\": \"<string>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\",\n    \"state\": \"EXECUTING\",\n    \"scheduled_time\": \"<dateTime>\",\n    \"next_scheduled_time\": \"<dateTime>\",\n    \"root_task_id\": \"<string>\",\n    \"graph_version\": \"<integer>\",\n    \"run_id\": \"<integer>\",\n    \"first_error_task_name\": \"<string>\",\n    \"first_error_code\": \"<integer>\",\n    \"first_error_message\": \"<string>\",\n    \"query_start_time\": \"<dateTime>\",\n    \"completed_time\": \"<dateTime>\"\n  }\n]"
																						},
																						{
																							"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete_graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Bad Request",
																							"code": 400,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete_graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Unauthorized",
																							"code": 401,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete_graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Forbidden",
																							"code": 403,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete_graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Not Found",
																							"code": 404,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete_graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Method Not Allowed",
																							"code": 405,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete_graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Too Many Requests",
																							"code": 429,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete_graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Internal Server Error",
																							"code": 500,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete_graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Service Unavailable",
																							"code": 503,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete_graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Gateway Timeout",
																							"code": 504,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						}
																					]
																				}
																			]
																		},
																		{
																			"name": "Fetch a task",
																			"request": {
																				"auth": {
																					"type": "apikey",
																					"apikey": [
																						{
																							"key": "value",
																							"value": "Snowflake Token=\"{{sessionToken}}\"",
																							"type": "string"
																						},
																						{
																							"key": "in",
																							"value": "header",
																							"type": "string"
																						},
																						{
																							"key": "key",
																							"value": "Authorization",
																							"type": "string"
																						}
																					]
																				},
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks",
																						":name"
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "{{database}}",
																							"description": "(Required) "
																						},
																						{
																							"key": "schema",
																							"value": "{{schema}}",
																							"description": "(Required) "
																						},
																						{
																							"key": "name",
																							"value": "{{task_name}}",
																							"description": "(Required) "
																						}
																					]
																				},
																				"description": "Fetch a task using the describe command output."
																			},
																			"response": [
																				{
																					"name": "successful",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"name\": \"mga_vVk\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"sYG7\",\n  \"schedule\": {\n    \"minutes\": \"<integer>\"\n  },\n  \"comment\": \"<string>\",\n  \"config\": {\n    \"dolor_\": \"eiusmod dolor consequat sed\"\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"state\": \"suspended\",\n  \"last_committed_on\": \"<dateTime>\",\n  \"last_suspended_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		},
																		{
																			"name": "Create a (or alter an existing) task",
																			"request": {
																				"auth": {
																					"type": "apikey",
																					"apikey": [
																						{
																							"key": "value",
																							"value": "Snowflake Token=\"{{sessionToken}}\"",
																							"type": "string"
																						},
																						{
																							"key": "in",
																							"value": "header",
																							"type": "string"
																						},
																						{
																							"key": "key",
																							"value": "Authorization",
																							"type": "string"
																						}
																					]
																				},
																				"method": "PUT",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"{{task_name}}\",\n  \"warehouse\": \"{{warehouse}}\",\n  \"definition\": \"select 1\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?createMode=orReplace",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks",
																						":name"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "orReplace"
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "{{database}}",
																							"description": "(Required) "
																						},
																						{
																							"key": "schema",
																							"value": "{{schema}}",
																							"description": "(Required) "
																						},
																						{
																							"key": "name",
																							"value": "{{task_name}}",
																							"description": "(Required) "
																						}
																					]
																				},
																				"description": "Create a (or alter an existing) task. Even if the operation is just an alter, the full property set must be provided."
																			},
																			"response": [
																				{
																					"name": "Successful",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"mga_vVk\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"sYG7\",\n  \"schedule\": {\n    \"minutes\": \"<integer>\"\n  },\n  \"comment\": \"<string>\",\n  \"config\": {\n    \"dolor_\": \"eiusmod dolor consequat sed\"\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"state\": \"suspended\",\n  \"last_committed_on\": \"<dateTime>\",\n  \"last_suspended_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"mga_vVk\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"sYG7\",\n  \"schedule\": {\n    \"minutes\": \"<integer>\"\n  },\n  \"comment\": \"<string>\",\n  \"config\": {\n    \"dolor_\": \"eiusmod dolor consequat sed\"\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"state\": \"suspended\",\n  \"last_committed_on\": \"<dateTime>\",\n  \"last_suspended_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"mga_vVk\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"sYG7\",\n  \"schedule\": {\n    \"minutes\": \"<integer>\"\n  },\n  \"comment\": \"<string>\",\n  \"config\": {\n    \"dolor_\": \"eiusmod dolor consequat sed\"\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"state\": \"suspended\",\n  \"last_committed_on\": \"<dateTime>\",\n  \"last_suspended_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"mga_vVk\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"sYG7\",\n  \"schedule\": {\n    \"minutes\": \"<integer>\"\n  },\n  \"comment\": \"<string>\",\n  \"config\": {\n    \"dolor_\": \"eiusmod dolor consequat sed\"\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"state\": \"suspended\",\n  \"last_committed_on\": \"<dateTime>\",\n  \"last_suspended_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"mga_vVk\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"sYG7\",\n  \"schedule\": {\n    \"minutes\": \"<integer>\"\n  },\n  \"comment\": \"<string>\",\n  \"config\": {\n    \"dolor_\": \"eiusmod dolor consequat sed\"\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"state\": \"suspended\",\n  \"last_committed_on\": \"<dateTime>\",\n  \"last_suspended_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"mga_vVk\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"sYG7\",\n  \"schedule\": {\n    \"minutes\": \"<integer>\"\n  },\n  \"comment\": \"<string>\",\n  \"config\": {\n    \"dolor_\": \"eiusmod dolor consequat sed\"\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"state\": \"suspended\",\n  \"last_committed_on\": \"<dateTime>\",\n  \"last_suspended_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"mga_vVk\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"sYG7\",\n  \"schedule\": {\n    \"minutes\": \"<integer>\"\n  },\n  \"comment\": \"<string>\",\n  \"config\": {\n    \"dolor_\": \"eiusmod dolor consequat sed\"\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"state\": \"suspended\",\n  \"last_committed_on\": \"<dateTime>\",\n  \"last_suspended_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"mga_vVk\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"sYG7\",\n  \"schedule\": {\n    \"minutes\": \"<integer>\"\n  },\n  \"comment\": \"<string>\",\n  \"config\": {\n    \"dolor_\": \"eiusmod dolor consequat sed\"\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"state\": \"suspended\",\n  \"last_committed_on\": \"<dateTime>\",\n  \"last_suspended_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"mga_vVk\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"sYG7\",\n  \"schedule\": {\n    \"minutes\": \"<integer>\"\n  },\n  \"comment\": \"<string>\",\n  \"config\": {\n    \"dolor_\": \"eiusmod dolor consequat sed\"\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"state\": \"suspended\",\n  \"last_committed_on\": \"<dateTime>\",\n  \"last_suspended_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"mga_vVk\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"sYG7\",\n  \"schedule\": {\n    \"minutes\": \"<integer>\"\n  },\n  \"comment\": \"<string>\",\n  \"config\": {\n    \"dolor_\": \"eiusmod dolor consequat sed\"\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"state\": \"suspended\",\n  \"last_committed_on\": \"<dateTime>\",\n  \"last_suspended_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		},
																		{
																			"name": "Delete a task",
																			"request": {
																				"auth": {
																					"type": "apikey",
																					"apikey": [
																						{
																							"key": "value",
																							"value": "Snowflake Token=\"{{sessionToken}}\"",
																							"type": "string"
																						},
																						{
																							"key": "in",
																							"value": "header",
																							"type": "string"
																						},
																						{
																							"key": "key",
																							"value": "Authorization",
																							"type": "string"
																						}
																					]
																				},
																				"method": "DELETE",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?ifExists=true",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks",
																						":name"
																					],
																					"query": [
																						{
																							"key": "ifExists",
																							"value": "true"
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "{{database}}",
																							"description": "(Required) "
																						},
																						{
																							"key": "schema",
																							"value": "{{schema}}",
																							"description": "(Required) "
																						},
																						{
																							"key": "name",
																							"value": "{{task_name}}",
																							"description": "(Required) "
																						}
																					]
																				},
																				"description": "Delete a task with the task name. If ifExists is used, the operation will succeed even if the object does not exist. Otherwise, there will be a failure if the drop is unsuccessful."
																			},
																			"response": [
																				{
																					"name": "Successful",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false"
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:execute",
																	"item": [
																		{
																			"name": "Execute a task object.",
																			"request": {
																				"auth": {
																					"type": "apikey",
																					"apikey": [
																						{
																							"key": "value",
																							"value": "Snowflake Token=\"{{sessionToken}}\"",
																							"type": "string"
																						},
																						{
																							"key": "in",
																							"value": "header",
																							"type": "string"
																						},
																						{
																							"key": "key",
																							"value": "Authorization",
																							"type": "string"
																						}
																					]
																				},
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:execute?retryLast=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks",
																						"{{name}}:execute"
																					],
																					"query": [
																						{
																							"key": "retryLast",
																							"value": "false",
																							"description": "Retry the last failed run of the DAG."
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "{{database}}",
																							"description": "(Required) "
																						},
																						{
																							"key": "schema",
																							"value": "{{schema}}",
																							"description": "(Required) "
																						}
																					]
																				},
																				"description": "Execute a task -- this is equivalent to EXECUTE IMMEDIATE."
																			},
																			"response": [
																				{
																					"name": "Successful",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:execute?retryLast=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:execute"
																							],
																							"query": [
																								{
																									"key": "retryLast",
																									"value": "false",
																									"description": "Retry the last failed run of the DAG."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:execute?retryLast=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:execute"
																							],
																							"query": [
																								{
																									"key": "retryLast",
																									"value": "false",
																									"description": "Retry the last failed run of the DAG."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:execute?retryLast=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:execute"
																							],
																							"query": [
																								{
																									"key": "retryLast",
																									"value": "false",
																									"description": "Retry the last failed run of the DAG."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:execute?retryLast=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:execute"
																							],
																							"query": [
																								{
																									"key": "retryLast",
																									"value": "false",
																									"description": "Retry the last failed run of the DAG."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:execute?retryLast=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:execute"
																							],
																							"query": [
																								{
																									"key": "retryLast",
																									"value": "false",
																									"description": "Retry the last failed run of the DAG."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:execute?retryLast=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:execute"
																							],
																							"query": [
																								{
																									"key": "retryLast",
																									"value": "false",
																									"description": "Retry the last failed run of the DAG."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:execute?retryLast=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:execute"
																							],
																							"query": [
																								{
																									"key": "retryLast",
																									"value": "false",
																									"description": "Retry the last failed run of the DAG."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:execute?retryLast=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:execute"
																							],
																							"query": [
																								{
																									"key": "retryLast",
																									"value": "false",
																									"description": "Retry the last failed run of the DAG."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:execute?retryLast=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:execute"
																							],
																							"query": [
																								{
																									"key": "retryLast",
																									"value": "false",
																									"description": "Retry the last failed run of the DAG."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:execute?retryLast=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:execute"
																							],
																							"query": [
																								{
																									"key": "retryLast",
																									"value": "false",
																									"description": "Retry the last failed run of the DAG."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:resume",
																	"item": [
																		{
																			"name": "Resume a suspended task.",
																			"request": {
																				"auth": {
																					"type": "apikey",
																					"apikey": [
																						{
																							"key": "value",
																							"value": "Snowflake Token=\"{{sessionToken}}\"",
																							"type": "string"
																						},
																						{
																							"key": "in",
																							"value": "header",
																							"type": "string"
																						},
																						{
																							"key": "key",
																							"value": "Authorization",
																							"type": "string"
																						}
																					]
																				},
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:resume",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks",
																						"{{name}}:resume"
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "{{database}}",
																							"description": "(Required) "
																						},
																						{
																							"key": "schema",
																							"value": "{{schema}}",
																							"description": "(Required) "
																						}
																					]
																				},
																				"description": "Resumes a suspended task object. This is equivalento an ALTER TASK ... RESUME."
																			},
																			"response": [
																				{
																					"name": "Successful",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:resume",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:resume"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:resume",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:resume"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:resume",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:resume"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:resume",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:resume"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:resume",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:resume"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:resume",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:resume"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:resume",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:resume"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:resume",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:resume"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:resume",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:resume"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:resume",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:resume"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:suspend",
																	"item": [
																		{
																			"name": "Suspends a running task.",
																			"request": {
																				"auth": {
																					"type": "apikey",
																					"apikey": [
																						{
																							"key": "value",
																							"value": "Snowflake Token=\"{{sessionToken}}\"",
																							"type": "string"
																						},
																						{
																							"key": "in",
																							"value": "header",
																							"type": "string"
																						},
																						{
																							"key": "key",
																							"value": "Authorization",
																							"type": "string"
																						}
																					]
																				},
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:suspend",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks",
																						"{{name}}:suspend"
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "{{database}}",
																							"description": "(Required) "
																						},
																						{
																							"key": "schema",
																							"value": "{{schema}}",
																							"description": "(Required) "
																						}
																					]
																				},
																				"description": "Suspends a running task. This is equivalent to an ALTER TASK ... SUSPEND."
																			},
																			"response": [
																				{
																					"name": "Successful",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:suspend",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:suspend"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:suspend",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:suspend"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:suspend",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:suspend"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:suspend",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:suspend"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:suspend",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:suspend"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:suspend",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:suspend"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:suspend",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:suspend"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:suspend",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:suspend"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:suspend",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:suspend"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:suspend",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:suspend"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "List tasks",
																	"request": {
																		"auth": {
																			"type": "apikey",
																			"apikey": [
																				{
																					"key": "value",
																					"value": "Snowflake Token=\"{{sessionToken}}\"",
																					"type": "string"
																				},
																				{
																					"key": "in",
																					"value": "header",
																					"type": "string"
																				},
																				{
																					"key": "key",
																					"value": "Authorization",
																					"type": "string"
																				}
																			]
																		},
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":schema",
																				"tasks"
																			],
																			"query": [
																				{
																					"key": "rootOnly",
																					"value": "false",
																					"disabled": true
																				},
																				{
																					"key": "like",
																					"value": "%taskName%",
																					"disabled": true
																				},
																				{
																					"key": "startsWith",
																					"value": "task%",
																					"disabled": true
																				},
																				{
																					"key": "showLimit",
																					"value": "10",
																					"disabled": true
																				}
																			],
																			"variable": [
																				{
																					"key": "database",
																					"value": "{{database}}",
																					"description": "(Required) "
																				},
																				{
																					"key": "schema",
																					"value": "{{schema}}",
																					"description": "(Required) "
																				}
																			]
																		},
																		"description": "Lists tasks under the database and schema, with show options as query parameters."
																	},
																	"response": [
																		{
																			"name": "successful",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false"
																						},
																						{
																							"key": "like",
																							"value": "<string>"
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>"
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "[\n  {\n    \"name\": \"Pw$SP9KZSr\",\n    \"definition\": \"<string>\",\n    \"warehouse\": \"WBzQP_2\",\n    \"schedule\": {\n      \"minutes\": \"<integer>\"\n    },\n    \"comment\": \"<string>\",\n    \"config\": {\n      \"Ut_293\": -93287673.26920931,\n      \"cupidatatf0d\": \"qui fugiat in \",\n      \"quis1\": \"aliqua enim eiusmod consequat cupidatat\",\n      \"Ut_0\": \"incididunt ullamco dolore in commodo\"\n    },\n    \"predecessors\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"user_task_managed_initial_warehouse_size\": \"<string>\",\n    \"user_task_timeout_ms\": \"<integer>\",\n    \"suspend_task_after_num_failures\": \"<integer>\",\n    \"condition\": \"<string>\",\n    \"allow_overlapping_execution\": \"<boolean>\",\n    \"error_integration\": \"<string>\",\n    \"created_on\": \"<dateTime>\",\n    \"id\": \"<string>\",\n    \"owner\": \"<string>\",\n    \"owner_role_type\": \"<string>\",\n    \"state\": \"started\",\n    \"last_committed_on\": \"<dateTime>\",\n    \"last_suspended_on\": \"<dateTime>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\"\n  },\n  {\n    \"name\": \"gTq9T\",\n    \"definition\": \"<string>\",\n    \"warehouse\": \"\\\"\\\"\\\":((\\\"\\\"4\\\"\",\n    \"schedule\": {\n      \"minutes\": \"<integer>\"\n    },\n    \"comment\": \"<string>\",\n    \"config\": {\n      \"culpa182\": -36841827.82457221,\n      \"consectetur_f2\": \"Ut anim\",\n      \"officia_aa\": -66193433.51332709\n    },\n    \"predecessors\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"user_task_managed_initial_warehouse_size\": \"<string>\",\n    \"user_task_timeout_ms\": \"<integer>\",\n    \"suspend_task_after_num_failures\": \"<integer>\",\n    \"condition\": \"<string>\",\n    \"allow_overlapping_execution\": \"<boolean>\",\n    \"error_integration\": \"<string>\",\n    \"created_on\": \"<dateTime>\",\n    \"id\": \"<string>\",\n    \"owner\": \"<string>\",\n    \"owner_role_type\": \"<string>\",\n    \"state\": \"suspended\",\n    \"last_committed_on\": \"<dateTime>\",\n    \"last_suspended_on\": \"<dateTime>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\"\n  }\n]"
																		},
																		{
																			"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false"
																						},
																						{
																							"key": "like",
																							"value": "<string>"
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>"
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Bad Request",
																			"code": 400,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false"
																						},
																						{
																							"key": "like",
																							"value": "<string>"
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>"
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false"
																						},
																						{
																							"key": "like",
																							"value": "<string>"
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>"
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false"
																						},
																						{
																							"key": "like",
																							"value": "<string>"
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>"
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false"
																						},
																						{
																							"key": "like",
																							"value": "<string>"
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>"
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Method Not Allowed",
																			"code": 405,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false"
																						},
																						{
																							"key": "like",
																							"value": "<string>"
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>"
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Conflict",
																			"code": 409,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false"
																						},
																						{
																							"key": "like",
																							"value": "<string>"
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>"
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Too Many Requests",
																			"code": 429,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false"
																						},
																						{
																							"key": "like",
																							"value": "<string>"
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>"
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Internal Server Error",
																			"code": 500,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false"
																						},
																						{
																							"key": "like",
																							"value": "<string>"
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>"
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Service Unavailable",
																			"code": 503,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false"
																						},
																						{
																							"key": "like",
																							"value": "<string>"
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>"
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Gateway Timeout",
																			"code": 504,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		}
																	]
																},
																{
																	"name": "Create a task",
																	"request": {
																		"auth": {
																			"type": "apikey",
																			"apikey": [
																				{
																					"key": "value",
																					"value": "Snowflake Token=\"{{sessionToken}}\"",
																					"type": "string"
																				},
																				{
																					"key": "in",
																					"value": "header",
																					"type": "string"
																				},
																				{
																					"key": "key",
																					"value": "Authorization",
																					"type": "string"
																				}
																			]
																		},
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"{{task_name}}\",\n  \"definition\": \"select 1\",\n  \"warehouse\": \"{{warehouse}}\",\n  \"predecessors\": [\n    \"task1\",\n    \"task2\",\n    \"task3\"\n  ],\n  \"user_task_timeout_ms\": 10,\n  \"condition\": \"SYSTEM$GET_PREDECESSOR_RETURN_VALUE('test_task') != 'VALIDATION'\",\n  \"allow_overlapping_execution\": false,\n  \"database_name\": \"{{database}}\",\n  \"schema_name\": \"{{schema}}\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=orReplace",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":schema",
																				"tasks"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "orReplace"
																				}
																			],
																			"variable": [
																				{
																					"key": "database",
																					"value": "{{database}}",
																					"description": "(Required) "
																				},
																				{
																					"key": "schema",
																					"value": "{{schema}}",
																					"description": "(Required) "
																				}
																			]
																		},
																		"description": "Create a task, with standard create modifiers as query parameters. See the Task component definition for what is required to be provided in the request body."
																	},
																	"response": [
																		{
																			"name": "Successful",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"mga_vVk\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"sYG7\",\n  \"schedule\": {\n    \"minutes\": \"<integer>\"\n  },\n  \"comment\": \"<string>\",\n  \"config\": {\n    \"dolor_\": \"eiusmod dolor consequat sed\"\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"state\": \"suspended\",\n  \"last_committed_on\": \"<dateTime>\",\n  \"last_suspended_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"status\": \"<string>\"\n}"
																		},
																		{
																			"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"mga_vVk\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"sYG7\",\n  \"schedule\": {\n    \"minutes\": \"<integer>\"\n  },\n  \"comment\": \"<string>\",\n  \"config\": {\n    \"dolor_\": \"eiusmod dolor consequat sed\"\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"state\": \"suspended\",\n  \"last_committed_on\": \"<dateTime>\",\n  \"last_suspended_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Bad Request",
																			"code": 400,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"mga_vVk\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"sYG7\",\n  \"schedule\": {\n    \"minutes\": \"<integer>\"\n  },\n  \"comment\": \"<string>\",\n  \"config\": {\n    \"dolor_\": \"eiusmod dolor consequat sed\"\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"state\": \"suspended\",\n  \"last_committed_on\": \"<dateTime>\",\n  \"last_suspended_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"mga_vVk\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"sYG7\",\n  \"schedule\": {\n    \"minutes\": \"<integer>\"\n  },\n  \"comment\": \"<string>\",\n  \"config\": {\n    \"dolor_\": \"eiusmod dolor consequat sed\"\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"state\": \"suspended\",\n  \"last_committed_on\": \"<dateTime>\",\n  \"last_suspended_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"mga_vVk\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"sYG7\",\n  \"schedule\": {\n    \"minutes\": \"<integer>\"\n  },\n  \"comment\": \"<string>\",\n  \"config\": {\n    \"dolor_\": \"eiusmod dolor consequat sed\"\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"state\": \"suspended\",\n  \"last_committed_on\": \"<dateTime>\",\n  \"last_suspended_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"mga_vVk\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"sYG7\",\n  \"schedule\": {\n    \"minutes\": \"<integer>\"\n  },\n  \"comment\": \"<string>\",\n  \"config\": {\n    \"dolor_\": \"eiusmod dolor consequat sed\"\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"state\": \"suspended\",\n  \"last_committed_on\": \"<dateTime>\",\n  \"last_suspended_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Method Not Allowed",
																			"code": 405,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"mga_vVk\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"sYG7\",\n  \"schedule\": {\n    \"minutes\": \"<integer>\"\n  },\n  \"comment\": \"<string>\",\n  \"config\": {\n    \"dolor_\": \"eiusmod dolor consequat sed\"\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"state\": \"suspended\",\n  \"last_committed_on\": \"<dateTime>\",\n  \"last_suspended_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Conflict",
																			"code": 409,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"mga_vVk\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"sYG7\",\n  \"schedule\": {\n    \"minutes\": \"<integer>\"\n  },\n  \"comment\": \"<string>\",\n  \"config\": {\n    \"dolor_\": \"eiusmod dolor consequat sed\"\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"state\": \"suspended\",\n  \"last_committed_on\": \"<dateTime>\",\n  \"last_suspended_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Too Many Requests",
																			"code": 429,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"mga_vVk\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"sYG7\",\n  \"schedule\": {\n    \"minutes\": \"<integer>\"\n  },\n  \"comment\": \"<string>\",\n  \"config\": {\n    \"dolor_\": \"eiusmod dolor consequat sed\"\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"state\": \"suspended\",\n  \"last_committed_on\": \"<dateTime>\",\n  \"last_suspended_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Internal Server Error",
																			"code": 500,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"mga_vVk\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"sYG7\",\n  \"schedule\": {\n    \"minutes\": \"<integer>\"\n  },\n  \"comment\": \"<string>\",\n  \"config\": {\n    \"dolor_\": \"eiusmod dolor consequat sed\"\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"state\": \"suspended\",\n  \"last_committed_on\": \"<dateTime>\",\n  \"last_suspended_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Service Unavailable",
																			"code": 503,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"mga_vVk\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"sYG7\",\n  \"schedule\": {\n    \"minutes\": \"<integer>\"\n  },\n  \"comment\": \"<string>\",\n  \"config\": {\n    \"dolor_\": \"eiusmod dolor consequat sed\"\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"state\": \"suspended\",\n  \"last_committed_on\": \"<dateTime>\",\n  \"last_suspended_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists"
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Gateway Timeout",
																			"code": 504,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		}
																	]
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://org-account.snowflakecomputing.com"
		},
		{
			"key": "name",
			"value": "c"
		},
		{
			"key": "name",
			"value": "c"
		},
		{
			"key": "name",
			"value": "c"
		}
	]
}