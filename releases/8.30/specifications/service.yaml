openapi: 3.0.0
servers:
- description: Snowflake Services API
  url: https://org-account.snowflakecomputing.com
info:
  version: 0.0.1
  title: Snowflake Services API
  description: The Snowflake Services API is a REST API that you can use to access,
    update, and perform certain actions on Services resource in a Snowflake database.
  contact:
    name: Snowflake, Inc.
    url: https://snowflake.com
    email: support@snowflake.com
paths:
  /api/v2/databases/{database}/schemas/{schema}/services:
    get:
      summary: List services
      tags:
      - service
      description: Lists the services under the database and schema.
      operationId: listServices
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/like
      - $ref: common.yaml#/components/parameters/startsWith
      - $ref: common.yaml#/components/parameters/showLimit
      - $ref: common.yaml#/components/parameters/fromName
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
    post:
      summary: Create a service
      tags:
      - service
      description: Create a service, with standard create modifiers as query parameters.
        See the Service component definition for what is required to be provided in
        the request body.
      operationId: createService
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - name: createMode
        description: 'Query parameter allowing support for different modes of resource
          creation. Possible values include: - `errorIfExists`: Throws an error if
          you try to create a resource that already exists. - `ifNotExists`: Creates
          a new resource when an alter is requested for a non-existent resource.'
        in: query
        schema:
          type: string
          enum:
          - errorIfExists
          - ifNotExists
          example: errorIfExists
          default: errorIfExists
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/services/{name}:
    get:
      description: Fetch a service.
      tags:
      - service
      operationId: fetchService
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
    delete:
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      summary: Delete a service
      tags:
      - service
      description: Delete a service with the given name. If ifExists is used, the
        operation will succeed even if the object does not exist. Otherwise, there
        will be a failure if the drop is unsuccessful.
      operationId: deleteService
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/services/{name}/logs:
    get:
      description: Fetch the logs for a given service.
      tags:
      - service
      operationId: fetchServiceLogs
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - in: query
        name: instanceId
        description: ID of the service instance, starting with 0.
        required: true
        schema:
          type: integer
      - in: query
        name: containerName
        description: Container name as specified in the service specification file.
        required: true
        schema:
          type: string
      - in: query
        name: numLines
        schema:
          type: integer
        description: Number of trailing log lines to retrieve.
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  system$get_service_logs:
                    type: string
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/services/{name}/status:
    get:
      description: Fetch the status for a given service.
      tags:
      - service
      operationId: fetchServiceStatus
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - in: query
        name: timeout
        schema:
          type: integer
        description: Number of seconds to wait for the service to reach a steady state
          (for example, READY) before returning the status. If the service does not
          reach a steady state within the specified time, Snowflake returns the current
          state.
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  system$get_service_status:
                    type: string
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/services/{name}:resume:
    post:
      description: Resume a service.
      tags:
      - service
      operationId: resumeService
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/services/{name}:suspend:
    post:
      description: Suspend a service.
      tags:
      - service
      operationId: suspendService
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/services/{name}/endpoints:
    get:
      summary: List the endpoints in a service.
      description: Lists the endpoints in a Snowpark Container Services service (or
        a job service).
      tags:
      - service
      operationId: showServiceEndpoints
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceEndpoint'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
components:
  schemas:
    ServiceSpecInlineText:
      description: Specifies service specification with inline text.
      allOf:
      - $ref: '#/components/schemas/ServiceSpec'
      properties:
        spec_text:
          type: string
          description: Specifies service specification. You can use a pair of dollar
            signs ($$) to delimit the beginning and ending of the specification string.
      required:
      - spec_text
    ServiceSpecStageFile:
      description: Specifies service specification with a stage file.
      allOf:
      - $ref: '#/components/schemas/ServiceSpec'
      properties:
        stage:
          type: string
          description: Specifies the Snowflake internal stage where the specification
            file is stored; for example, @tutorial_stage.
        spec_file:
          type: string
          description: Specifies the path to the service specification file on the
            stage; for example, 'some-dir/echo_spec.yaml'.
      required:
      - stage
      - spec_file
    ServiceSpec:
      type: object
      description: Specifies service specification.
      properties:
        spec_type:
          type: string
          description: Type of the service specification, can be `from_file` or `from_inline`.
      discriminator:
        propertyName: spec_type
        mapping:
          from_file: ServiceSpecStageFile
          from_inline: ServiceSpecInlineText
      writeOnly: true
    Service:
      type: object
      description: A Snowflake service object.
      properties:
        name:
          $ref: ./common.yaml#/components/schemas/Identifier
          description: String that specifies the identifier (that is, the name) for
            the service.
        compute_pool:
          type: string
          description: Specifies the name of the compute pool in your account on which
            to run the service.
        spec:
          $ref: '#/components/schemas/ServiceSpec'
          description: Specifies service specification.
        external_access_integrations:
          type: array
          description: Specifies the names of the external access integrations that
            allow your service to access external sites.
          items:
            type: string
        auto_resume:
          type: boolean
          description: Specifies whether to automatically resume a service when a
            service function or ingress is called.
        min_instances:
          type: integer
          description: Specifies the minimum number of service instances to run.
        max_instances:
          type: integer
          description: Specifies the maximum number of service instances to run.
        query_warehouse:
          $ref: ./common.yaml#/components/schemas/Identifier
          description: Warehouse to use if a service container connects to Snowflake
            to execute a query but does not explicitly specify a warehouse to use.
        comment:
          type: string
          description: Specifies a comment for the service.
        database_name:
          $ref: ./common.yaml#/components/schemas/Identifier
          description: The name of the parent database for the service.
          readOnly: true
        schema_name:
          $ref: ./common.yaml#/components/schemas/Identifier
          description: The name of the parent schema for the service.
          readOnly: true
        owner:
          type: string
          description: Role that owns the service.
          readOnly: true
        dns_name:
          type: string
          description: Snowflake-assiged DNS name of the service. The DNS name enables
            service-to-service communications.
          readOnly: true
        created_on:
          type: string
          description: Timestamp when the service was created.
          format: date-time
          readOnly: true
        updated_on:
          type: string
          description: Timestamp when the service was last updated.
          format: date-time
          readOnly: true
        resumed_on:
          type: string
          description: Timestamp when the service was last resumed.
          format: date-time
          readOnly: true
        owner_role_type:
          type: string
          description: The role type of the service owner.
          readOnly: true
      required:
      - name
      - compute_pool
      - spec
      example:
        name: service_name
        compute_pool: compute_pool_name
        spec:
          spec_type: from_file
          stage: '@stage_name'
          spec_file: spec_file.yaml
    ServiceEndpoint:
      type: object
      properties:
        name:
          type: string
        port:
          type: integer
        protocol:
          type: string
        is_public:
          type: boolean
        ingress_url:
          type: string
tags:
- name: service
