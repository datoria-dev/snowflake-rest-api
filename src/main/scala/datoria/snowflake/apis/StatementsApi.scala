/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.apis

import cats.effect.Concurrent
import io.circe.Encoder
import org.http4s.Uri
import org.http4s.client.Client as Http4sClient
import datoria.snowflake.models.CancelStatus
import datoria.snowflake.models.ErrorResponse
import datoria.snowflake.models.QueryFailureStatus
import datoria.snowflake.models.QueryStatus
import datoria.snowflake.models.ResultSet
import datoria.snowflake.models.SubmitStatementRequest
import java.util.UUID
import datoria.snowflake.models.*

trait StatementsApiEndpoints[F[*]] {

  def cancelStatement(statementHandle: UUID, userAgent: String, requestId: Option[UUID] = None, accept: Option[String] = None, xSnowflakeAuthorizationTokenType: Option[String] = None): F[CancelStatus]
  def getStatementStatus(statementHandle: UUID, userAgent: String, requestId: Option[UUID] = None, partition: Option[Long] = None, accept: Option[String] = None, xSnowflakeAuthorizationTokenType: Option[String] = None): F[ResultSet]
  def submitStatement(userAgent: String, submitStatementRequest: SubmitStatementRequest, requestId: Option[UUID] = None, async: Option[Boolean] = None, nullable: Option[Boolean] = None, accept: Option[String] = None, xSnowflakeAuthorizationTokenType: Option[String] = None): F[ResultSet]

}

class StatementsApiEndpointsImpl[F[*]: Concurrent](
  override val baseUrl: Uri,
  defaultHeaders: Seq[(String, String)] = Nil,
  httpClient: Http4sClient[F]
) extends BaseClient[F](baseUrl, defaultHeaders, httpClient) with StatementsApiEndpoints[F] {
  
  import JsonSupports.*
  import io.circe.syntax.EncoderOps
  import cats.implicits.toFlatMapOps

  override def cancelStatement(statementHandle: UUID, userAgent: String, requestId: Option[UUID] = None, accept: Option[String] = None, xSnowflakeAuthorizationTokenType: Option[String] = None): F[CancelStatus] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), Some("User-Agent" -> userAgent), xSnowflakeAuthorizationTokenType.map(x => "X-Snowflake-Authorization-Token-Type" -> x)
    ).flatten
    val queryParameters = (
      requestId.map("requestId" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, CancelStatus](
      method = "POST",
      path = s"/api/v2/statements/${statementHandle}/cancel",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => parseJson[F, CancelStatus]("CancelStatus", r)
        case r if r.status.code == 400 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 401 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 403 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 404 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 405 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 422 => parseJson[F, CancelStatus]("CancelStatus", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 500 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 503 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 504 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
    }
  }

  override def getStatementStatus(statementHandle: UUID, userAgent: String, requestId: Option[UUID] = None, partition: Option[Long] = None, accept: Option[String] = None, xSnowflakeAuthorizationTokenType: Option[String] = None): F[ResultSet] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), Some("User-Agent" -> userAgent), xSnowflakeAuthorizationTokenType.map(x => "X-Snowflake-Authorization-Token-Type" -> x)
    ).flatten
    val queryParameters = (
      requestId.map("requestId" -> _).map(Seq(_)) ++ 
      partition.map("partition" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[Unit, ResultSet](
      method = "GET",
      path = s"/api/v2/statements/${statementHandle}",
      body = None,
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => parseJson[F, ResultSet]("ResultSet", r)
        case r if r.status.code == 202 => parseJson[F, ResultSet]("ResultSet", r)
        case r if r.status.code == 400 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 401 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 403 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 404 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 405 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 415 => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason))
        case r if r.status.code == 422 => parseJson[F, QueryFailureStatus]("QueryFailureStatus", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 429 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 500 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 503 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 504 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
    }
  }

  override def submitStatement(userAgent: String, submitStatementRequest: SubmitStatementRequest, requestId: Option[UUID] = None, async: Option[Boolean] = None, nullable: Option[Boolean] = None, accept: Option[String] = None, xSnowflakeAuthorizationTokenType: Option[String] = None): F[ResultSet] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json"),
      accept.map(x => "Accept" -> x), Some("User-Agent" -> userAgent), xSnowflakeAuthorizationTokenType.map(x => "X-Snowflake-Authorization-Token-Type" -> x)
    ).flatten
    val queryParameters = (
      requestId.map("requestId" -> _).map(Seq(_)) ++ 
      async.map("async" -> _).map(Seq(_)) ++ 
      nullable.map("nullable" -> _).map(Seq(_))
    ).toSeq.flatten

    _executeRequest[SubmitStatementRequest, ResultSet](
      method = "POST",
      path = s"/api/v2/statements",
      body = Some(submitStatementRequest),
      formParameters = None,
      queryParameters = queryParameters,
      requestHeaders = requestHeaders,
      auth = None) {
        
        case r if r.status.code == 200 => parseJson[F, ResultSet]("ResultSet", r)
        case r if r.status.code == 202 => parseJson[F, ResultSet]("ResultSet", r)
        case r if r.status.code == 400 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 401 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 403 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 404 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 405 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 408 => parseJson[F, QueryStatus]("QueryStatus", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 415 => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason))
        case r if r.status.code == 422 => parseJson[F, QueryFailureStatus]("QueryFailureStatus", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 429 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 500 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 503 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
        case r if r.status.code == 504 => parseJson[F, ErrorResponse]("ErrorResponse", r).flatMap(res => Concurrent[F].raiseError(_FailedRequest(r.status.code, r.status.reason, Some(res.asJson))))
    }
  }

}


