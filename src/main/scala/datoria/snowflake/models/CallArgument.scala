/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param name Name of the call argument
  * @param datatype 
  * @param value Value of the call argument
  */
case class CallArgument(
    name: String,
    datatype: CallArgumentDatatype,
    value: AnyType
)
  
object CallArgument {
  given encoderCallArgument: Encoder[CallArgument] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("name" -> t.name.asJson),
        Some("datatype" -> t.datatype.asJson),
        Some("value" -> t.value.asJson)
      ).flatten
    }
  }
  given decoderCallArgument: Decoder[CallArgument] = Decoder.instance { c =>
    for {
      name <- c.downField("name").as[String]
      datatype <- c.downField("datatype").as[CallArgumentDatatype]
      value <- c.downField("value").as[AnyType]
    } yield CallArgument(
      name = name,
      datatype = datatype,
      value = value
    )
  }
}

