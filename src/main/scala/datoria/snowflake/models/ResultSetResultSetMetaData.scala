/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** 
  * @param format 
  * @param numRows The total number of rows of results.
  * @param rowType 
  * @param partitionInfo Partition information
  * @param nullable false if null is replaced with a string 'null' otherwise false
  * @param parameters 
  */
case class ResultSetResultSetMetaData(
    format: Option[ResultSetResultSetMetaDataFormat] = None,
    numRows: Option[Long] = None,
    rowType: Option[Seq[ResultSetResultSetMetaDataRowTypeInner]] = None,
    partitionInfo: Option[Seq[ResultSetResultSetMetaDataPartitionInfoInner]] = None,
    nullable: Option[Boolean] = None,
    parameters: Option[ResultSetResultSetMetaDataParameters] = None
)
  
object ResultSetResultSetMetaData {
  given encoderResultSetResultSetMetaData: Encoder[ResultSetResultSetMetaData] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.format.map(v => "format" -> v.asJson),
        t.numRows.map(v => "numRows" -> v.asJson),
        t.rowType.map(v => "rowType" -> v.asJson),
        t.partitionInfo.map(v => "partitionInfo" -> v.asJson),
        t.nullable.map(v => "nullable" -> v.asJson),
        t.parameters.map(v => "parameters" -> v.asJson)
      ).flatten
    }
  }
  given decoderResultSetResultSetMetaData: Decoder[ResultSetResultSetMetaData] = Decoder.instance { c =>
    for {
      format <- c.downField("format").as[Option[ResultSetResultSetMetaDataFormat]]
      numRows <- c.downField("numRows").as[Option[Long]]
      rowType <- c.downField("rowType").as[Option[Seq[ResultSetResultSetMetaDataRowTypeInner]]]
      partitionInfo <- c.downField("partitionInfo").as[Option[Seq[ResultSetResultSetMetaDataPartitionInfoInner]]]
      nullable <- c.downField("nullable").as[Option[Boolean]]
      parameters <- c.downField("parameters").as[Option[ResultSetResultSetMetaDataParameters]]
    } yield ResultSetResultSetMetaData(
      format = format,
      numRows = numRows,
      rowType = rowType,
      partitionInfo = partitionInfo,
      nullable = nullable,
      parameters = parameters
    )
  }
}

