/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** An argument of function
  * @param name Argument's name
  * @param datatype 
  * @param value Argument's value
  */
case class FunctionArgument(
    name: Option[String] = None,
    datatype: Option[FunctionArgumentDatatype] = None,
    value: Option[AnyType] = None
)
  
object FunctionArgument {
  given encoderFunctionArgument: Encoder[FunctionArgument] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.name.map(v => "name" -> v.asJson),
        t.datatype.map(v => "datatype" -> v.asJson),
        t.value.map(v => "value" -> v.asJson)
      ).flatten
    }
  }
  given decoderFunctionArgument: Decoder[FunctionArgument] = Decoder.instance { c =>
    for {
      name <- c.downField("name").as[Option[String]]
      datatype <- c.downField("datatype").as[Option[FunctionArgumentDatatype]]
      value <- c.downField("value").as[Option[AnyType]]
    } yield FunctionArgument(
      name = name,
      datatype = datatype,
      value = value
    )
  }
}

