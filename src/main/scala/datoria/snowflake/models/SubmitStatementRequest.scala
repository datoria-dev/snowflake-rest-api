/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import io.circe.Json

/** 
  * @param statement SQL statement or batch of SQL statements to execute. You can specify query, DML and DDL statements. The following statements are not supported: PUT, GET, USE, ALTER SESSION, BEGIN, COMMIT, ROLLBACK, statements that set session variables, and statements that create temporary tables and stages.
  * @param timeout Timeout in seconds for statement execution. If the execution of a statement takes longer than the specified timeout, the execution is automatically canceled. To set the timeout to the maximum value (604800 seconds), set timeout to 0.
  * @param database Database in which the statement should be executed. The value in this field is case-sensitive.
  * @param schema Schema in which the statement should be executed. The value in this field is case-sensitive.
  * @param warehouse Warehouse to use when executing the statement. The value in this field is case-sensitive.
  * @param role Role to use when executing the statement. The value in this field is case-sensitive.
  * @param bindings Values of bind variables in the SQL statement. When executing the statement, Snowflake replaces placeholders ('?' and ':name') in the statement with these specified values.
  * @param parameters 
  */
case class SubmitStatementRequest(
    statement: Option[String] = None,
    timeout: Option[Long] = None,
    database: Option[String] = None,
    schema: Option[String] = None,
    warehouse: Option[String] = None,
    role: Option[String] = None,
    bindings: Option[Json] = None,
    parameters: Option[SubmitStatementRequestParameters] = None
)
  
object SubmitStatementRequest {
  given encoderSubmitStatementRequest: Encoder[SubmitStatementRequest] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.statement.map(v => "statement" -> v.asJson),
        t.timeout.map(v => "timeout" -> v.asJson),
        t.database.map(v => "database" -> v.asJson),
        t.schema.map(v => "schema" -> v.asJson),
        t.warehouse.map(v => "warehouse" -> v.asJson),
        t.role.map(v => "role" -> v.asJson),
        t.bindings.map(v => "bindings" -> v.asJson),
        t.parameters.map(v => "parameters" -> v.asJson)
      ).flatten
    }
  }
  given decoderSubmitStatementRequest: Decoder[SubmitStatementRequest] = Decoder.instance { c =>
    for {
      statement <- c.downField("statement").as[Option[String]]
      timeout <- c.downField("timeout").as[Option[Long]]
      database <- c.downField("database").as[Option[String]]
      schema <- c.downField("schema").as[Option[String]]
      warehouse <- c.downField("warehouse").as[Option[String]]
      role <- c.downField("role").as[Option[String]]
      bindings <- c.downField("bindings").as[Option[Json]]
      parameters <- c.downField("parameters").as[Option[SubmitStatementRequestParameters]]
    } yield SubmitStatementRequest(
      statement = statement,
      timeout = timeout,
      database = database,
      schema = schema,
      warehouse = warehouse,
      role = role,
      bindings = bindings,
      parameters = parameters
    )
  }
}

