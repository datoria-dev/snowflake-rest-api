/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import java.time.Instant

/** A Snowflake image repository.
  * @param name A Snowflake object identifier.
  * @param databaseName A Snowflake object identifier.
  * @param schemaName A Snowflake object identifier.
  * @param createdOn Time the image repository was created.
  * @param repositoryUrl Current URL of the image repository.
  * @param owner Identifier for the current owner of the image repository.
  * @param ownerRoleType Role type of the image repository owner.
  */
case class ImageRepository(
    name: String,
    databaseName: Option[String] = None,
    schemaName: Option[String] = None,
    createdOn: Option[Instant] = None,
    repositoryUrl: Option[String] = None,
    owner: Option[String] = None,
    ownerRoleType: Option[String] = None
)
  
object ImageRepository {
  given encoderImageRepository: Encoder[ImageRepository] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("name" -> t.name.asJson),
        t.databaseName.map(v => "database_name" -> v.asJson),
        t.schemaName.map(v => "schema_name" -> v.asJson),
        t.createdOn.map(v => "created_on" -> v.asJson),
        t.repositoryUrl.map(v => "repository_url" -> v.asJson),
        t.owner.map(v => "owner" -> v.asJson),
        t.ownerRoleType.map(v => "owner_role_type" -> v.asJson)
      ).flatten
    }
  }
  given decoderImageRepository: Decoder[ImageRepository] = Decoder.instance { c =>
    for {
      name <- c.downField("name").as[String]
      databaseName <- c.downField("database_name").as[Option[String]]
      schemaName <- c.downField("schema_name").as[Option[String]]
      createdOn <- c.downField("created_on").as[Option[Instant]]
      repositoryUrl <- c.downField("repository_url").as[Option[String]]
      owner <- c.downField("owner").as[Option[String]]
      ownerRoleType <- c.downField("owner_role_type").as[Option[String]]
    } yield ImageRepository(
      name = name,
      databaseName = databaseName,
      schemaName = schemaName,
      createdOn = createdOn,
      repositoryUrl = repositoryUrl,
      owner = owner,
      ownerRoleType = ownerRoleType
    )
  }
}

