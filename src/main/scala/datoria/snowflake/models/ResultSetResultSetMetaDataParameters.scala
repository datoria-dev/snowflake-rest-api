/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param binaryOutputFormat 
  * @param dateOutputFormat 
  * @param timeOutputFormat 
  * @param timestampOutputFormat 
  * @param timestampLtzOutputFormat 
  * @param timestampNtzOutputFormat 
  * @param timestampTzOutputFormat 
  * @param multiStatementCount 
  */
case class ResultSetResultSetMetaDataParameters(
    binaryOutputFormat: Option[String] = None,
    dateOutputFormat: Option[String] = None,
    timeOutputFormat: Option[String] = None,
    timestampOutputFormat: Option[String] = None,
    timestampLtzOutputFormat: Option[String] = None,
    timestampNtzOutputFormat: Option[String] = None,
    timestampTzOutputFormat: Option[String] = None,
    multiStatementCount: Option[Int] = None
)
  
object ResultSetResultSetMetaDataParameters {
  given encoderResultSetResultSetMetaDataParameters: Encoder[ResultSetResultSetMetaDataParameters] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.binaryOutputFormat.map(v => "binary_output_format" -> v.asJson),
        t.dateOutputFormat.map(v => "date_output_format" -> v.asJson),
        t.timeOutputFormat.map(v => "time_output_format" -> v.asJson),
        t.timestampOutputFormat.map(v => "timestamp_output_format" -> v.asJson),
        t.timestampLtzOutputFormat.map(v => "timestamp_ltz_output_format" -> v.asJson),
        t.timestampNtzOutputFormat.map(v => "timestamp_ntz_output_format" -> v.asJson),
        t.timestampTzOutputFormat.map(v => "timestamp_tz_output_format" -> v.asJson),
        t.multiStatementCount.map(v => "multi_statement_count" -> v.asJson)
      ).flatten
    }
  }
  given decoderResultSetResultSetMetaDataParameters: Decoder[ResultSetResultSetMetaDataParameters] = Decoder.instance { c =>
    for {
      binaryOutputFormat <- c.downField("binary_output_format").as[Option[String]]
      dateOutputFormat <- c.downField("date_output_format").as[Option[String]]
      timeOutputFormat <- c.downField("time_output_format").as[Option[String]]
      timestampOutputFormat <- c.downField("timestamp_output_format").as[Option[String]]
      timestampLtzOutputFormat <- c.downField("timestamp_ltz_output_format").as[Option[String]]
      timestampNtzOutputFormat <- c.downField("timestamp_ntz_output_format").as[Option[String]]
      timestampTzOutputFormat <- c.downField("timestamp_tz_output_format").as[Option[String]]
      multiStatementCount <- c.downField("multi_statement_count").as[Option[Int]]
    } yield ResultSetResultSetMetaDataParameters(
      binaryOutputFormat = binaryOutputFormat,
      dateOutputFormat = dateOutputFormat,
      timeOutputFormat = timeOutputFormat,
      timestampOutputFormat = timestampOutputFormat,
      timestampLtzOutputFormat = timestampLtzOutputFormat,
      timestampNtzOutputFormat = timestampNtzOutputFormat,
      timestampTzOutputFormat = timestampTzOutputFormat,
      multiStatementCount = multiStatementCount
    )
  }
}

