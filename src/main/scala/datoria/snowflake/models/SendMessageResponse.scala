/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** The non-streaming response object for the sendMessage
  * @param message 
  * @param requestId Unique request ID
  */
case class SendMessageResponse(
    message: MessageObject,
    requestId: Option[String] = None
)
  
object SendMessageResponse {
  given encoderSendMessageResponse: Encoder[SendMessageResponse] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("message" -> t.message.asJson),
        t.requestId.map(v => "request_id" -> v.asJson)
      ).flatten
    }
  }
  given decoderSendMessageResponse: Decoder[SendMessageResponse] = Decoder.instance { c =>
    for {
      message <- c.downField("message").as[MessageObject]
      requestId <- c.downField("request_id").as[Option[String]]
    } yield SendMessageResponse(
      message = message,
      requestId = requestId
    )
  }
}

