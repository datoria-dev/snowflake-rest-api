/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** The request object for sendMessage requests
  * @param semanticModelFile The path to a file stored in a Snowflake Stage holding the semantic model yaml. Must be in the database and schema provided in the url parameters.
  * @param semanticModel A string containing the entire semantic model yaml
  * @param stream Whether to stream the response or not
  * @param messages 
  */
case class SendMessageRequest(
    semanticModelFile: Option[String] = None,
    semanticModel: Option[String] = None,
    stream: Option[Boolean] = None,
    messages: Seq[MessageObject]
)
  
object SendMessageRequest {
  given encoderSendMessageRequest: Encoder[SendMessageRequest] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.semanticModelFile.map(v => "semantic_model_file" -> v.asJson),
        t.semanticModel.map(v => "semantic_model" -> v.asJson),
        t.stream.map(v => "stream" -> v.asJson),
        Some("messages" -> t.messages.asJson)
      ).flatten
    }
  }
  given decoderSendMessageRequest: Decoder[SendMessageRequest] = Decoder.instance { c =>
    for {
      semanticModelFile <- c.downField("semantic_model_file").as[Option[String]]
      semanticModel <- c.downField("semantic_model").as[Option[String]]
      stream <- c.downField("stream").as[Option[Boolean]]
      messages <- c.downField("messages").as[Seq[MessageObject]]
    } yield SendMessageRequest(
      semanticModelFile = semanticModelFile,
      semanticModel = semanticModel,
      stream = stream,
      messages = messages
    )
  }
}

