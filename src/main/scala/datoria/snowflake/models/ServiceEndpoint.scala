/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param name User-friendly endpoint name that represents the corresponding port.
  * @param port The network port the service is listening on. NULL, when portRange is specified.
  * @param portRange The network port range the service is listening on. NULL, when port is specified.
  * @param protocol Supported network protocol (TCP, HTTP, or HTTPS).
  * @param isPublic True, if the endpoint is public, accessible from internet.
  * @param ingressUrl Endpoint URL accessible from the internet.
  */
case class ServiceEndpoint(
    name: Option[String] = None,
    port: Option[Int] = None,
    portRange: Option[String] = None,
    protocol: Option[String] = None,
    isPublic: Option[Boolean] = None,
    ingressUrl: Option[String] = None
)
  
object ServiceEndpoint {
  given encoderServiceEndpoint: Encoder[ServiceEndpoint] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.name.map(v => "name" -> v.asJson),
        t.port.map(v => "port" -> v.asJson),
        t.portRange.map(v => "portRange" -> v.asJson),
        t.protocol.map(v => "protocol" -> v.asJson),
        t.isPublic.map(v => "is_public" -> v.asJson),
        t.ingressUrl.map(v => "ingress_url" -> v.asJson)
      ).flatten
    }
  }
  given decoderServiceEndpoint: Decoder[ServiceEndpoint] = Decoder.instance { c =>
    for {
      name <- c.downField("name").as[Option[String]]
      port <- c.downField("port").as[Option[Int]]
      portRange <- c.downField("portRange").as[Option[String]]
      protocol <- c.downField("protocol").as[Option[String]]
      isPublic <- c.downField("is_public").as[Option[Boolean]]
      ingressUrl <- c.downField("ingress_url").as[Option[String]]
    } yield ServiceEndpoint(
      name = name,
      port = port,
      portRange = portRange,
      protocol = protocol,
      isPublic = isPublic,
      ingressUrl = ingressUrl
    )
  }
}

