/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import java.time.Instant
import scala.collection.immutable.Seq

/** A snowflake UDF
  * @param name The name of the UDF
  * @param isTemporary Specifies whether the UDF is temporary or not
  * @param isAggregate Specifies whether the UDF is an aggregate function. Applicable only for Python language type
  * @param isMemoizable Indicates whether the function is memoizable. Applicable only for Python language type.
  * @param isTableFunction True if the UDF is a table function; false otherwise.
  * @param validForClustering True if the UDF is valid for clustering; false otherwise.
  * @param isSecure Specifies whether the function/procedure is secure or not
  * @param arguments List of arguments for the function/procedure
  * @param returnType 
  * @param languageConfig 
  * @param comment Specifies a comment for the function/procedure
  * @param body Function/procedure definition
  * @param createdOn The date and time when the function/procedure was created
  * @param schemaName The name of the schema in which the function/procedure exists.
  * @param databaseName The name of the database in which the function/procedure exists.
  * @param minNumArguments The minimum number of arguments
  * @param maxNumArguments The maximum number of arguments
  * @param owner Role that owns the function/procedure
  * @param ownerRoleType The type of role that owns the function/procedure
  * @param isBuiltin If the function/procedure is built-in or not (user-defined)
  */
case class UserDefinedFunction(
    name: String,
    isTemporary: Option[Boolean] = None,
    isAggregate: Option[Boolean] = None,
    isMemoizable: Option[Boolean] = None,
    isTableFunction: Option[Boolean] = None,
    validForClustering: Option[Boolean] = None,
    isSecure: Option[Boolean] = None,
    arguments: Seq[Argument],
    returnType: ReturnType1,
    languageConfig: FunctionLanguage1,
    comment: Option[String] = None,
    body: Option[String] = None,
    createdOn: Option[Instant] = None,
    schemaName: Option[String] = None,
    databaseName: Option[String] = None,
    minNumArguments: Option[Int] = None,
    maxNumArguments: Option[Int] = None,
    owner: Option[String] = None,
    ownerRoleType: Option[String] = None,
    isBuiltin: Option[Boolean] = None
)
  
object UserDefinedFunction {
  given encoderUserDefinedFunction: Encoder[UserDefinedFunction] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("name" -> t.name.asJson),
        t.isTemporary.map(v => "is_temporary" -> v.asJson),
        t.isAggregate.map(v => "is_aggregate" -> v.asJson),
        t.isMemoizable.map(v => "is_memoizable" -> v.asJson),
        t.isTableFunction.map(v => "is_table_function" -> v.asJson),
        t.validForClustering.map(v => "valid_for_clustering" -> v.asJson),
        t.isSecure.map(v => "is_secure" -> v.asJson),
        Some("arguments" -> t.arguments.asJson),
        Some("return_type" -> t.returnType.asJson),
        Some("language_config" -> t.languageConfig.asJson),
        t.comment.map(v => "comment" -> v.asJson),
        t.body.map(v => "body" -> v.asJson),
        t.createdOn.map(v => "created_on" -> v.asJson),
        t.schemaName.map(v => "schema_name" -> v.asJson),
        t.databaseName.map(v => "database_name" -> v.asJson),
        t.minNumArguments.map(v => "min_num_arguments" -> v.asJson),
        t.maxNumArguments.map(v => "max_num_arguments" -> v.asJson),
        t.owner.map(v => "owner" -> v.asJson),
        t.ownerRoleType.map(v => "owner_role_type" -> v.asJson),
        t.isBuiltin.map(v => "is_builtin" -> v.asJson)
      ).flatten
    }
  }
  given decoderUserDefinedFunction: Decoder[UserDefinedFunction] = Decoder.instance { c =>
    for {
      name <- c.downField("name").as[String]
      isTemporary <- c.downField("is_temporary").as[Option[Boolean]]
      isAggregate <- c.downField("is_aggregate").as[Option[Boolean]]
      isMemoizable <- c.downField("is_memoizable").as[Option[Boolean]]
      isTableFunction <- c.downField("is_table_function").as[Option[Boolean]]
      validForClustering <- c.downField("valid_for_clustering").as[Option[Boolean]]
      isSecure <- c.downField("is_secure").as[Option[Boolean]]
      arguments <- c.downField("arguments").as[Seq[Argument]]
      returnType <- c.downField("return_type").as[ReturnType1]
      languageConfig <- c.downField("language_config").as[FunctionLanguage1]
      comment <- c.downField("comment").as[Option[String]]
      body <- c.downField("body").as[Option[String]]
      createdOn <- c.downField("created_on").as[Option[Instant]]
      schemaName <- c.downField("schema_name").as[Option[String]]
      databaseName <- c.downField("database_name").as[Option[String]]
      minNumArguments <- c.downField("min_num_arguments").as[Option[Int]]
      maxNumArguments <- c.downField("max_num_arguments").as[Option[Int]]
      owner <- c.downField("owner").as[Option[String]]
      ownerRoleType <- c.downField("owner_role_type").as[Option[String]]
      isBuiltin <- c.downField("is_builtin").as[Option[Boolean]]
    } yield UserDefinedFunction(
      name = name,
      isTemporary = isTemporary,
      isAggregate = isAggregate,
      isMemoizable = isMemoizable,
      isTableFunction = isTableFunction,
      validForClustering = validForClustering,
      isSecure = isSecure,
      arguments = arguments,
      returnType = returnType,
      languageConfig = languageConfig,
      comment = comment,
      body = body,
      createdOn = createdOn,
      schemaName = schemaName,
      databaseName = databaseName,
      minNumArguments = minNumArguments,
      maxNumArguments = maxNumArguments,
      owner = owner,
      ownerRoleType = ownerRoleType,
      isBuiltin = isBuiltin
    )
  }
}

