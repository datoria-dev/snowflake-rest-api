/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** Specifies the cloud storage provider that stores your data files.
  */
enum StorageLocationStorageProvider(val value: String) {
  case S3 extends StorageLocationStorageProvider("S3")
  case S3GOV extends StorageLocationStorageProvider("S3GOV")
  case GCS extends StorageLocationStorageProvider("GCS")
  case AZURE extends StorageLocationStorageProvider("AZURE")
}

object StorageLocationStorageProvider {

  def withValueOpt(value: String): Option[StorageLocationStorageProvider] = StorageLocationStorageProvider.values.find(_.value == value)
  def withValue(value: String): StorageLocationStorageProvider =
    withValueOpt(value).getOrElse(throw java.lang.IllegalArgumentException(s"StorageLocationStorageProvider enum case not found: $value"))

  given decoderStorageLocationStorageProvider: Decoder[StorageLocationStorageProvider] = Decoder.decodeString.map(withValue)
  given encoderStorageLocationStorageProvider: Encoder[StorageLocationStorageProvider] = Encoder.encodeString.contramap[StorageLocationStorageProvider](_.value)

}

