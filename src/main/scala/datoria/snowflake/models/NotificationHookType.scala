/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** Type of NotificationHook, can be QUEUE, EMAIL or WEBHOOK
  */
enum NotificationHookType(val value: String) {
  case EMAIL extends NotificationHookType("EMAIL")
  case WEBHOOK extends NotificationHookType("WEBHOOK")
  case QUEUEAWSSNSOUTBOUND extends NotificationHookType("QUEUE_AWS_SNS_OUTBOUND")
  case QUEUEAZUREEVENTGRIDOUTBOUND extends NotificationHookType("QUEUE_AZURE_EVENT_GRID_OUTBOUND")
  case QUEUEGCPPUBSUBOUTBOUND extends NotificationHookType("QUEUE_GCP_PUBSUB_OUTBOUND")
  case QUEUEAZUREEVENTGRIDINBOUND extends NotificationHookType("QUEUE_AZURE_EVENT_GRID_INBOUND")
  case QUEUEGCPPUBSUBINBOUND extends NotificationHookType("QUEUE_GCP_PUBSUB_INBOUND")
}

object NotificationHookType {

  def withValueOpt(value: String): Option[NotificationHookType] = NotificationHookType.values.find(_.value == value)
  def withValue(value: String): NotificationHookType =
    withValueOpt(value).getOrElse(throw java.lang.IllegalArgumentException(s"NotificationHookType enum case not found: $value"))

  given decoderNotificationHookType: Decoder[NotificationHookType] = Decoder.decodeString.map(withValue)
  given encoderNotificationHookType: Encoder[NotificationHookType] = Encoder.encodeString.contramap[NotificationHookType](_.value)

}

