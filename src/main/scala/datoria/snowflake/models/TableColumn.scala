/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** A column in the table
  * @param name Column name
  * @param datatype The data type for the column
  * @param nullable Specifies that the column does allow NULL values or not.
  * @param collate Specifies the collation to use for column operations such as string comparison
  * @param `default` Specifies whether a default value is automatically inserted in the column if a value is not explicitly specified via an INSERT or CREATE TABLE AS SELECT statement
  * @param autoincrement 
  * @param autoincrementStart The default value for the column starts with the specified number
  * @param autoincrementIncrement Each successive value for the column automatically increments by the specified amount
  * @param constraints 
  * @param comment Specifies a comment for the column
  */
case class TableColumn(
    name: String,
    datatype: String,
    nullable: Option[Boolean] = None,
    collate: Option[String] = None,
    `default`: Option[String] = None,
    autoincrement: Option[Boolean] = None,
    autoincrementStart: Option[Int] = None,
    autoincrementIncrement: Option[Int] = None,
    constraints: Option[Seq[Constraint]] = None,
    comment: Option[String] = None
)
  
object TableColumn {
  given encoderTableColumn: Encoder[TableColumn] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("name" -> t.name.asJson),
        Some("datatype" -> t.datatype.asJson),
        t.nullable.map(v => "nullable" -> v.asJson),
        t.collate.map(v => "collate" -> v.asJson),
        t.`default`.map(v => "default" -> v.asJson),
        t.autoincrement.map(v => "autoincrement" -> v.asJson),
        t.autoincrementStart.map(v => "autoincrement_start" -> v.asJson),
        t.autoincrementIncrement.map(v => "autoincrement_increment" -> v.asJson),
        t.constraints.map(v => "constraints" -> v.asJson),
        t.comment.map(v => "comment" -> v.asJson)
      ).flatten
    }
  }
  given decoderTableColumn: Decoder[TableColumn] = Decoder.instance { c =>
    for {
      name <- c.downField("name").as[String]
      datatype <- c.downField("datatype").as[String]
      nullable <- c.downField("nullable").as[Option[Boolean]]
      collate <- c.downField("collate").as[Option[String]]
      `default` <- c.downField("default").as[Option[String]]
      autoincrement <- c.downField("autoincrement").as[Option[Boolean]]
      autoincrementStart <- c.downField("autoincrement_start").as[Option[Int]]
      autoincrementIncrement <- c.downField("autoincrement_increment").as[Option[Int]]
      constraints <- c.downField("constraints").as[Option[Seq[Constraint]]]
      comment <- c.downField("comment").as[Option[String]]
    } yield TableColumn(
      name = name,
      datatype = datatype,
      nullable = nullable,
      collate = collate,
      `default` = `default`,
      autoincrement = autoincrement,
      autoincrementStart = autoincrementStart,
      autoincrementIncrement = autoincrementIncrement,
      constraints = constraints,
      comment = comment
    )
  }
}

