/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import java.time.Instant
import scala.collection.immutable.Seq

/** A Snowflake task, used to execute SQL code.
  * @param name A Snowflake object identifier.
  * @param warehouse A Snowflake object identifier.
  * @param schedule 
  * @param comment Specifies a comment for the task.
  * @param finalize Specifies the name of the root task that the finalizer task is associated with.
  * @param taskAutoRetryAttempts Root task settable only. Specifies the number of automatic task graph retry attempts. Valid range is 0 to 30. When not specified, no retry would happen.
  * @param config Task Config
  * @param sessionParameters Session Parameters for the task at runtime.
  * @param definition The SQL definition for the task. Any one of single SQL statement, call to stored procedure, or procedural logic using Snowflake scripting.
  * @param predecessors Specifies one or more predecessor tasks for the current task
  * @param taskRelations Displays the relationship between the root task and its corresponding finalizer tasks.
  * @param userTaskManagedInitialWarehouseSize Specifies the size of the compute resources to provision for the first run of the task
  * @param userTaskTimeoutMs Specifies the time limit on a single run of the task before it times out (in milliseconds).
  * @param suspendTaskAfterNumFailures Specifies the number of consecutive failed task runs after which the current task is suspended automatically.
  * @param condition Specifies a Boolean SQL expression condition; multiple conditions joined with AND/OR are supported
  * @param allowOverlappingExecution Specifies whether to allow multiple instances of the DAG to run concurrently.
  * @param errorIntegration Specifies the name of the notification integration used to communicate with Amazon SNS, MS Azure Event Grid, or Google Pub/Sub.
  * @param createdOn The time the task was created on.
  * @param id An ID for the current task.
  * @param owner The role that owns the task.
  * @param ownerRoleType The role type of the task owner.
  * @param state 
  * @param lastCommittedOn The time the task was last committed on.
  * @param lastSuspendedOn The time the task was last suspended on.
  * @param databaseName The name of the parent database for the task.
  * @param schemaName The name of the parent schema for the task.
  */
case class Task(
    name: String,
    warehouse: Option[String] = None,
    schedule: Option[TaskSchedule] = None,
    comment: Option[String] = None,
    finalize_ : Option[String] = None,
    taskAutoRetryAttempts: Option[Int] = None,
    config: Option[Map[String, AnyType]] = None,
    sessionParameters: Option[Map[String, AnyType]] = None,
    definition: String,
    predecessors: Option[Seq[String]] = None,
    taskRelations: Option[String] = None,
    userTaskManagedInitialWarehouseSize: Option[String] = None,
    userTaskTimeoutMs: Option[Int] = None,
    suspendTaskAfterNumFailures: Option[Int] = None,
    condition: Option[String] = None,
    allowOverlappingExecution: Option[Boolean] = None,
    errorIntegration: Option[String] = None,
    createdOn: Option[Instant] = None,
    id: Option[String] = None,
    owner: Option[String] = None,
    ownerRoleType: Option[String] = None,
    state: Option[TaskState] = None,
    lastCommittedOn: Option[Instant] = None,
    lastSuspendedOn: Option[Instant] = None,
    databaseName: Option[String] = None,
    schemaName: Option[String] = None
)
  
object Task {
  given encoderTask: Encoder[Task] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("name" -> t.name.asJson),
        t.warehouse.map(v => "warehouse" -> v.asJson),
        t.schedule.map(v => "schedule" -> v.asJson),
        t.comment.map(v => "comment" -> v.asJson),
        t.finalize_.map(v => "finalize" -> v.asJson),
        t.taskAutoRetryAttempts.map(v => "task_auto_retry_attempts" -> v.asJson),
        t.config.map(v => "config" -> v.asJson),
        t.sessionParameters.map(v => "session_parameters" -> v.asJson),
        Some("definition" -> t.definition.asJson),
        t.predecessors.map(v => "predecessors" -> v.asJson),
        t.taskRelations.map(v => "task_relations" -> v.asJson),
        t.userTaskManagedInitialWarehouseSize.map(v => "user_task_managed_initial_warehouse_size" -> v.asJson),
        t.userTaskTimeoutMs.map(v => "user_task_timeout_ms" -> v.asJson),
        t.suspendTaskAfterNumFailures.map(v => "suspend_task_after_num_failures" -> v.asJson),
        t.condition.map(v => "condition" -> v.asJson),
        t.allowOverlappingExecution.map(v => "allow_overlapping_execution" -> v.asJson),
        t.errorIntegration.map(v => "error_integration" -> v.asJson),
        t.createdOn.map(v => "created_on" -> v.asJson),
        t.id.map(v => "id" -> v.asJson),
        t.owner.map(v => "owner" -> v.asJson),
        t.ownerRoleType.map(v => "owner_role_type" -> v.asJson),
        t.state.map(v => "state" -> v.asJson),
        t.lastCommittedOn.map(v => "last_committed_on" -> v.asJson),
        t.lastSuspendedOn.map(v => "last_suspended_on" -> v.asJson),
        t.databaseName.map(v => "database_name" -> v.asJson),
        t.schemaName.map(v => "schema_name" -> v.asJson)
      ).flatten
    }
  }
  given decoderTask: Decoder[Task] = Decoder.instance { c =>
    for {
      name <- c.downField("name").as[String]
      warehouse <- c.downField("warehouse").as[Option[String]]
      schedule <- c.downField("schedule").as[Option[TaskSchedule]]
      comment <- c.downField("comment").as[Option[String]]
      finalize <- c.downField("finalize").as[Option[String]]
      taskAutoRetryAttempts <- c.downField("task_auto_retry_attempts").as[Option[Int]]
      config <- c.downField("config").as[Option[Map[String, AnyType]]]
      sessionParameters <- c.downField("session_parameters").as[Option[Map[String, AnyType]]]
      definition <- c.downField("definition").as[String]
      predecessors <- c.downField("predecessors").as[Option[Seq[String]]]
      taskRelations <- c.downField("task_relations").as[Option[String]]
      userTaskManagedInitialWarehouseSize <- c.downField("user_task_managed_initial_warehouse_size").as[Option[String]]
      userTaskTimeoutMs <- c.downField("user_task_timeout_ms").as[Option[Int]]
      suspendTaskAfterNumFailures <- c.downField("suspend_task_after_num_failures").as[Option[Int]]
      condition <- c.downField("condition").as[Option[String]]
      allowOverlappingExecution <- c.downField("allow_overlapping_execution").as[Option[Boolean]]
      errorIntegration <- c.downField("error_integration").as[Option[String]]
      createdOn <- c.downField("created_on").as[Option[Instant]]
      id <- c.downField("id").as[Option[String]]
      owner <- c.downField("owner").as[Option[String]]
      ownerRoleType <- c.downField("owner_role_type").as[Option[String]]
      state <- c.downField("state").as[Option[TaskState]]
      lastCommittedOn <- c.downField("last_committed_on").as[Option[Instant]]
      lastSuspendedOn <- c.downField("last_suspended_on").as[Option[Instant]]
      databaseName <- c.downField("database_name").as[Option[String]]
      schemaName <- c.downField("schema_name").as[Option[String]]
    } yield Task(
      name = name,
      warehouse = warehouse,
      schedule = schedule,
      comment = comment,
      finalize_ = finalize,
      taskAutoRetryAttempts = taskAutoRetryAttempts,
      config = config,
      sessionParameters = sessionParameters,
      definition = definition,
      predecessors = predecessors,
      taskRelations = taskRelations,
      userTaskManagedInitialWarehouseSize = userTaskManagedInitialWarehouseSize,
      userTaskTimeoutMs = userTaskTimeoutMs,
      suspendTaskAfterNumFailures = suspendTaskAfterNumFailures,
      condition = condition,
      allowOverlappingExecution = allowOverlappingExecution,
      errorIntegration = errorIntegration,
      createdOn = createdOn,
      id = id,
      owner = owner,
      ownerRoleType = ownerRoleType,
      state = state,
      lastCommittedOn = lastCommittedOn,
      lastSuspendedOn = lastSuspendedOn,
      databaseName = databaseName,
      schemaName = schemaName
    )
  }
}

