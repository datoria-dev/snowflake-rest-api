/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import java.time.Instant

/** A Snowflake alert
  * @param name Name of the alert
  * @param comment user comment associated to an object in the dictionary
  * @param schedule 
  * @param warehouse The warehouse the alert runs in
  * @param condition The SQL statement that must be evaluated to determine whether to trigger the alert
  * @param action The SQL statement to execute when the alert is triggered
  * @param createdOn Date and time when the alert was created.
  * @param databaseName Database in which the alert is stored
  * @param schemaName Schema in which the alert is stored
  * @param owner Role that owns the alert
  * @param ownerRoleType The type of role that owns the alert
  * @param state The current state of the alert
  */
case class Alert(
    name: String,
    comment: Option[String] = None,
    schedule: Schedule,
    warehouse: Option[String] = None,
    condition: String,
    action: String,
    createdOn: Option[Instant] = None,
    databaseName: Option[String] = None,
    schemaName: Option[String] = None,
    owner: Option[String] = None,
    ownerRoleType: Option[String] = None,
    state: Option[String] = None
)
  
object Alert {
  given encoderAlert: Encoder[Alert] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("name" -> t.name.asJson),
        t.comment.map(v => "comment" -> v.asJson),
        Some("schedule" -> t.schedule.asJson),
        t.warehouse.map(v => "warehouse" -> v.asJson),
        Some("condition" -> t.condition.asJson),
        Some("action" -> t.action.asJson),
        t.createdOn.map(v => "created_on" -> v.asJson),
        t.databaseName.map(v => "database_name" -> v.asJson),
        t.schemaName.map(v => "schema_name" -> v.asJson),
        t.owner.map(v => "owner" -> v.asJson),
        t.ownerRoleType.map(v => "owner_role_type" -> v.asJson),
        t.state.map(v => "state" -> v.asJson)
      ).flatten
    }
  }
  given decoderAlert: Decoder[Alert] = Decoder.instance { c =>
    for {
      name <- c.downField("name").as[String]
      comment <- c.downField("comment").as[Option[String]]
      schedule <- c.downField("schedule").as[Schedule]
      warehouse <- c.downField("warehouse").as[Option[String]]
      condition <- c.downField("condition").as[String]
      action <- c.downField("action").as[String]
      createdOn <- c.downField("created_on").as[Option[Instant]]
      databaseName <- c.downField("database_name").as[Option[String]]
      schemaName <- c.downField("schema_name").as[Option[String]]
      owner <- c.downField("owner").as[Option[String]]
      ownerRoleType <- c.downField("owner_role_type").as[Option[String]]
      state <- c.downField("state").as[Option[String]]
    } yield Alert(
      name = name,
      comment = comment,
      schedule = schedule,
      warehouse = warehouse,
      condition = condition,
      action = action,
      createdOn = createdOn,
      databaseName = databaseName,
      schemaName = schemaName,
      owner = owner,
      ownerRoleType = ownerRoleType,
      state = state
    )
  }
}

