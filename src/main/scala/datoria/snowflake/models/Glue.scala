/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param glueAwsRoleArn ARN for AWS role to assume
  * @param glueCatalogId Glue catalog id
  * @param glueRegion AWS region of the Glue catalog. Must be specified if the Snowflake account is not hosted on AWS.
  * @param catalogNamespace default AWS Glue catalog namespace for all Iceberg table that use this catalog integration
  */
case class Glue(
    glueAwsRoleArn: String,
    glueCatalogId: String,
    glueRegion: Option[String] = None,
    catalogNamespace: String
)
  
object Glue {
  given encoderGlue: Encoder[Glue] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("glue_aws_role_arn" -> t.glueAwsRoleArn.asJson),
        Some("glue_catalog_id" -> t.glueCatalogId.asJson),
        t.glueRegion.map(v => "glue_region" -> v.asJson),
        Some("catalog_namespace" -> t.catalogNamespace.asJson)
      ).flatten
    }
  }
  given decoderGlue: Decoder[Glue] = Decoder.instance { c =>
    for {
      glueAwsRoleArn <- c.downField("glue_aws_role_arn").as[String]
      glueCatalogId <- c.downField("glue_catalog_id").as[String]
      glueRegion <- c.downField("glue_region").as[Option[String]]
      catalogNamespace <- c.downField("catalog_namespace").as[String]
    } yield Glue(
      glueAwsRoleArn = glueAwsRoleArn,
      glueCatalogId = glueCatalogId,
      glueRegion = glueRegion,
      catalogNamespace = catalogNamespace
    )
  }
}

