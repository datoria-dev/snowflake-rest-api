/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** these stats might not be available for each request.
  * @param numRowsInserted Number of rows that were inserted.
  * @param numRowsUpdated Number of rows that were updated.
  * @param numRowsDeleted Number of rows that were deleted.
  * @param numDuplicateRowsUpdated Number of duplicate rows that were updated.
  */
case class ResultSetStats(
    numRowsInserted: Option[Long] = None,
    numRowsUpdated: Option[Long] = None,
    numRowsDeleted: Option[Long] = None,
    numDuplicateRowsUpdated: Option[Long] = None
)
  
object ResultSetStats {
  given encoderResultSetStats: Encoder[ResultSetStats] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.numRowsInserted.map(v => "numRowsInserted" -> v.asJson),
        t.numRowsUpdated.map(v => "numRowsUpdated" -> v.asJson),
        t.numRowsDeleted.map(v => "numRowsDeleted" -> v.asJson),
        t.numDuplicateRowsUpdated.map(v => "numDuplicateRowsUpdated" -> v.asJson)
      ).flatten
    }
  }
  given decoderResultSetStats: Decoder[ResultSetStats] = Decoder.instance { c =>
    for {
      numRowsInserted <- c.downField("numRowsInserted").as[Option[Long]]
      numRowsUpdated <- c.downField("numRowsUpdated").as[Option[Long]]
      numRowsDeleted <- c.downField("numRowsDeleted").as[Option[Long]]
      numDuplicateRowsUpdated <- c.downField("numDuplicateRowsUpdated").as[Option[Long]]
    } yield ResultSetStats(
      numRowsInserted = numRowsInserted,
      numRowsUpdated = numRowsUpdated,
      numRowsDeleted = numRowsDeleted,
      numDuplicateRowsUpdated = numDuplicateRowsUpdated
    )
  }
}

