/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import java.time.Instant

/** A Snowflake stream
  * @param createdOn Date and time when the stream was created.
  * @param name Name of the stream
  * @param streamSource 
  * @param comment user comment associated to an object in the dictionary
  * @param databaseName Database in which the stream is stored
  * @param schemaName Schema in which the stream is stored
  * @param owner Role that owns the stream
  * @param tableName Table name whose changes are tracked by the stream
  * @param stale Specifies whether the stream is stale or not
  * @param mode Mode of the stream. Possible values include: APPEND_ONLY, INSERT_ONLY. For streams on tables, the column displays DEFAULT.
  * @param staleAfter Timestamp when the stream became stale or may become stale if not consumed. 
  * @param invalidReason Reason why the stream cannot be queried successfully. This column supports future functionality. Currently, the only value returned is N/A.
  * @param ownerRoleType The type of role that owns the stream
  * @param `type` Type of the stream; currently DELTA only.
  */
case class Stream(
    createdOn: Option[Instant] = None,
    name: String,
    streamSource: StreamSource,
    comment: Option[String] = None,
    databaseName: Option[String] = None,
    schemaName: Option[String] = None,
    owner: Option[String] = None,
    tableName: Option[String] = None,
    stale: Option[Boolean] = None,
    mode: Option[String] = None,
    staleAfter: Option[Instant] = None,
    invalidReason: Option[String] = None,
    ownerRoleType: Option[String] = None,
    `type`: Option[String] = None
)
  
object Stream {
  given encoderStream: Encoder[Stream] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.createdOn.map(v => "created_on" -> v.asJson),
        Some("name" -> t.name.asJson),
        Some("stream_source" -> t.streamSource.asJson),
        t.comment.map(v => "comment" -> v.asJson),
        t.databaseName.map(v => "database_name" -> v.asJson),
        t.schemaName.map(v => "schema_name" -> v.asJson),
        t.owner.map(v => "owner" -> v.asJson),
        t.tableName.map(v => "table_name" -> v.asJson),
        t.stale.map(v => "stale" -> v.asJson),
        t.mode.map(v => "mode" -> v.asJson),
        t.staleAfter.map(v => "stale_after" -> v.asJson),
        t.invalidReason.map(v => "invalid_reason" -> v.asJson),
        t.ownerRoleType.map(v => "owner_role_type" -> v.asJson),
        t.`type`.map(v => "type" -> v.asJson)
      ).flatten
    }
  }
  given decoderStream: Decoder[Stream] = Decoder.instance { c =>
    for {
      createdOn <- c.downField("created_on").as[Option[Instant]]
      name <- c.downField("name").as[String]
      streamSource <- c.downField("stream_source").as[StreamSource]
      comment <- c.downField("comment").as[Option[String]]
      databaseName <- c.downField("database_name").as[Option[String]]
      schemaName <- c.downField("schema_name").as[Option[String]]
      owner <- c.downField("owner").as[Option[String]]
      tableName <- c.downField("table_name").as[Option[String]]
      stale <- c.downField("stale").as[Option[Boolean]]
      mode <- c.downField("mode").as[Option[String]]
      staleAfter <- c.downField("stale_after").as[Option[Instant]]
      invalidReason <- c.downField("invalid_reason").as[Option[String]]
      ownerRoleType <- c.downField("owner_role_type").as[Option[String]]
      `type` <- c.downField("type").as[Option[String]]
    } yield Stream(
      createdOn = createdOn,
      name = name,
      streamSource = streamSource,
      comment = comment,
      databaseName = databaseName,
      schemaName = schemaName,
      owner = owner,
      tableName = tableName,
      stale = stale,
      mode = mode,
      staleAfter = staleAfter,
      invalidReason = invalidReason,
      ownerRoleType = ownerRoleType,
      `type` = `type`
    )
  }
}

