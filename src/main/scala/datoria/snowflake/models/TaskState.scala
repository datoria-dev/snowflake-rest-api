/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** The state of the task. Must be one of started or suspended.
  */
enum TaskState(val value: String) {
  case Started extends TaskState("started")
  case Suspended extends TaskState("suspended")
}

object TaskState {

  def withValueOpt(value: String): Option[TaskState] = TaskState.values.find(_.value == value)
  def withValue(value: String): TaskState =
    withValueOpt(value).getOrElse(throw java.lang.IllegalArgumentException(s"TaskState enum case not found: $value"))

  given decoderTaskState: Decoder[TaskState] = Decoder.decodeString.map(withValue)
  given encoderTaskState: Encoder[TaskState] = Encoder.encodeString.contramap[TaskState](_.value)

}

