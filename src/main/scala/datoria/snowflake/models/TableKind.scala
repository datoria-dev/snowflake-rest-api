/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** Table type - permanent, transient, or temporary
  */
enum TableKind(val value: String) {
  case PERMANENT extends TableKind("PERMANENT")
  case `TRANSIENT` extends TableKind("TRANSIENT")
  case TEMPORARY extends TableKind("TEMPORARY")
  case empty extends TableKind("")
  case `Transient` extends TableKind("transient")
  case Temporary extends TableKind("temporary")
}

object TableKind {

  def withValueOpt(value: String): Option[TableKind] = TableKind.values.find(_.value == value)
  def withValue(value: String): TableKind =
    withValueOpt(value).getOrElse(throw java.lang.IllegalArgumentException(s"TableKind enum case not found: $value"))

  given decoderTableKind: Decoder[TableKind] = Decoder.decodeString.map(withValue)
  given encoderTableKind: Encoder[TableKind] = Encoder.encodeString.contramap[TableKind](_.value)

}

