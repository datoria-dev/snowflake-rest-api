/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import java.time.Instant

/** A Snowflake stage.
  * @param name A Snowflake object identifier.
  * @param kind 
  * @param url URL for the external stage; blank for an internal stage.
  * @param endpoint The S3-compatible API endpoint associated with the stage; always NULL for stages that are not S3-compatible.
  * @param storageIntegration A Snowflake object identifier.
  * @param comment Specifies a comment for the stage.
  * @param credentials 
  * @param encryption 
  * @param directoryTable 
  * @param createdOn Date and time when the stage was created.
  * @param hasCredentials Indicates that the external stage has access credentials; always false for an internal stage.
  * @param hasEncryptionKey Indicates that the external stage contains encrypted files; always false for an internal stage.
  * @param owner Role that owns the stage.
  * @param ownerRoleType The type of role that owns the object, either ROLE or DATABASE_ROLE. If a Snowflake Native App owns the object, the value is APPLICATION. Snowflake returns NULL if you delete the object because a deleted object does not have an owner role.
  * @param region Region where the stage is located.
  * @param cloud Cloud provider; always NULL for an internal stage.
  */
case class Stage(
    name: String,
    kind: Option[StageKind] = None,
    url: Option[String] = None,
    endpoint: Option[String] = None,
    storageIntegration: Option[String] = None,
    comment: Option[String] = None,
    credentials: Option[Credentials] = None,
    encryption: Option[StageEncryption] = None,
    directoryTable: Option[StageDirectoryTable] = None,
    createdOn: Option[Instant] = None,
    hasCredentials: Option[Boolean] = None,
    hasEncryptionKey: Option[Boolean] = None,
    owner: Option[String] = None,
    ownerRoleType: Option[String] = None,
    region: Option[String] = None,
    cloud: Option[String] = None
)
  
object Stage {
  given encoderStage: Encoder[Stage] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("name" -> t.name.asJson),
        t.kind.map(v => "kind" -> v.asJson),
        t.url.map(v => "url" -> v.asJson),
        t.endpoint.map(v => "endpoint" -> v.asJson),
        t.storageIntegration.map(v => "storage_integration" -> v.asJson),
        t.comment.map(v => "comment" -> v.asJson),
        t.credentials.map(v => "credentials" -> v.asJson),
        t.encryption.map(v => "encryption" -> v.asJson),
        t.directoryTable.map(v => "directory_table" -> v.asJson),
        t.createdOn.map(v => "created_on" -> v.asJson),
        t.hasCredentials.map(v => "has_credentials" -> v.asJson),
        t.hasEncryptionKey.map(v => "has_encryption_key" -> v.asJson),
        t.owner.map(v => "owner" -> v.asJson),
        t.ownerRoleType.map(v => "owner_role_type" -> v.asJson),
        t.region.map(v => "region" -> v.asJson),
        t.cloud.map(v => "cloud" -> v.asJson)
      ).flatten
    }
  }
  given decoderStage: Decoder[Stage] = Decoder.instance { c =>
    for {
      name <- c.downField("name").as[String]
      kind <- c.downField("kind").as[Option[StageKind]]
      url <- c.downField("url").as[Option[String]]
      endpoint <- c.downField("endpoint").as[Option[String]]
      storageIntegration <- c.downField("storage_integration").as[Option[String]]
      comment <- c.downField("comment").as[Option[String]]
      credentials <- c.downField("credentials").as[Option[Credentials]]
      encryption <- c.downField("encryption").as[Option[StageEncryption]]
      directoryTable <- c.downField("directory_table").as[Option[StageDirectoryTable]]
      createdOn <- c.downField("created_on").as[Option[Instant]]
      hasCredentials <- c.downField("has_credentials").as[Option[Boolean]]
      hasEncryptionKey <- c.downField("has_encryption_key").as[Option[Boolean]]
      owner <- c.downField("owner").as[Option[String]]
      ownerRoleType <- c.downField("owner_role_type").as[Option[String]]
      region <- c.downField("region").as[Option[String]]
      cloud <- c.downField("cloud").as[Option[String]]
    } yield Stage(
      name = name,
      kind = kind,
      url = url,
      endpoint = endpoint,
      storageIntegration = storageIntegration,
      comment = comment,
      credentials = credentials,
      encryption = encryption,
      directoryTable = directoryTable,
      createdOn = createdOn,
      hasCredentials = hasCredentials,
      hasEncryptionKey = hasEncryptionKey,
      owner = owner,
      ownerRoleType = ownerRoleType,
      region = region,
      cloud = cloud
    )
  }
}

