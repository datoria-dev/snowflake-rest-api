/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param databaseName A Snowflake object identifier.
  * @param schemaName A Snowflake object identifier.
  * @param serviceName A Snowflake object identifier.
  * @param instanceId ID of the service instance (this is the index of the service instance starting from 0).
  * @param status The current status of the service instance.
  * @param specDigest The unique and immutable identifier that represents the service specification content.
  * @param creationTime The time when Snowflake started creating the service instance.
  * @param startTime The time when Snowflake acknowledged the service instance is running on a node.
  */
case class ServiceInstance(
    databaseName: Option[String] = None,
    schemaName: Option[String] = None,
    serviceName: Option[String] = None,
    instanceId: Option[String] = None,
    status: Option[String] = None,
    specDigest: Option[String] = None,
    creationTime: Option[String] = None,
    startTime: Option[String] = None
)
  
object ServiceInstance {
  given encoderServiceInstance: Encoder[ServiceInstance] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.databaseName.map(v => "database_name" -> v.asJson),
        t.schemaName.map(v => "schema_name" -> v.asJson),
        t.serviceName.map(v => "service_name" -> v.asJson),
        t.instanceId.map(v => "instance_id" -> v.asJson),
        t.status.map(v => "status" -> v.asJson),
        t.specDigest.map(v => "spec_digest" -> v.asJson),
        t.creationTime.map(v => "creation_time" -> v.asJson),
        t.startTime.map(v => "start_time" -> v.asJson)
      ).flatten
    }
  }
  given decoderServiceInstance: Decoder[ServiceInstance] = Decoder.instance { c =>
    for {
      databaseName <- c.downField("database_name").as[Option[String]]
      schemaName <- c.downField("schema_name").as[Option[String]]
      serviceName <- c.downField("service_name").as[Option[String]]
      instanceId <- c.downField("instance_id").as[Option[String]]
      status <- c.downField("status").as[Option[String]]
      specDigest <- c.downField("spec_digest").as[Option[String]]
      creationTime <- c.downField("creation_time").as[Option[String]]
      startTime <- c.downField("start_time").as[Option[String]]
    } yield ServiceInstance(
      databaseName = databaseName,
      schemaName = schemaName,
      serviceName = serviceName,
      instanceId = instanceId,
      status = status,
      specDigest = specDigest,
      creationTime = creationTime,
      startTime = startTime
    )
  }
}

