/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** Schema type, permanent (default) or transient.
  */
enum SchemaKind(val value: String) {
  case PERMANENT extends SchemaKind("PERMANENT")
  case `TRANSIENT` extends SchemaKind("TRANSIENT")
}

object SchemaKind {

  def withValueOpt(value: String): Option[SchemaKind] = SchemaKind.values.find(_.value == value)
  def withValue(value: String): SchemaKind =
    withValueOpt(value).getOrElse(throw java.lang.IllegalArgumentException(s"SchemaKind enum case not found: $value"))

  given decoderSchemaKind: Decoder[SchemaKind] = Decoder.decodeString.map(withValue)
  given encoderSchemaKind: Encoder[SchemaKind] = Encoder.encodeString.contramap[SchemaKind](_.value)

}

