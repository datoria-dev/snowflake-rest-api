/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** Scheduling state (RUNNING or SUSPENDED)
  */
enum DynamicTableSchedulingState(val value: String) {
  case RUNNING extends DynamicTableSchedulingState("RUNNING")
  case SUSPENDED extends DynamicTableSchedulingState("SUSPENDED")
}

object DynamicTableSchedulingState {

  def withValueOpt(value: String): Option[DynamicTableSchedulingState] = DynamicTableSchedulingState.values.find(_.value == value)
  def withValue(value: String): DynamicTableSchedulingState =
    withValueOpt(value).getOrElse(throw java.lang.IllegalArgumentException(s"DynamicTableSchedulingState enum case not found: $value"))

  given decoderDynamicTableSchedulingState: Decoder[DynamicTableSchedulingState] = Decoder.decodeString.map(withValue)
  given encoderDynamicTableSchedulingState: Encoder[DynamicTableSchedulingState] = Encoder.encodeString.contramap[DynamicTableSchedulingState](_.value)

}

