/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import java.time.Instant
import scala.collection.immutable.Seq

/** A Snowflake external volume
  * @param name String that specifies the identifier (the name) for the external volume; must be unique in your account.
  * @param storageLocations Set of named cloud storage locations in different regions and, optionally, cloud platforms.
  * @param allowWrites Specifies whether write operations are allowed for the external volume; must be set to TRUE for Iceberg tables that use Snowflake as the catalog.
  * @param comment String (literal) that specifies a comment for the external volume.
  * @param createdOn Date and time when the external volume was created.
  * @param owner Role that owns the external volume
  * @param ownerRoleType The type of role that owns the external volume
  */
case class ExternalVolume(
    name: String,
    storageLocations: Seq[StorageLocation],
    allowWrites: Option[Boolean] = None,
    comment: Option[String] = None,
    createdOn: Option[Instant] = None,
    owner: Option[String] = None,
    ownerRoleType: Option[String] = None
)
  
object ExternalVolume {
  given encoderExternalVolume: Encoder[ExternalVolume] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("name" -> t.name.asJson),
        Some("storage_locations" -> t.storageLocations.asJson),
        t.allowWrites.map(v => "allow_writes" -> v.asJson),
        t.comment.map(v => "comment" -> v.asJson),
        t.createdOn.map(v => "created_on" -> v.asJson),
        t.owner.map(v => "owner" -> v.asJson),
        t.ownerRoleType.map(v => "owner_role_type" -> v.asJson)
      ).flatten
    }
  }
  given decoderExternalVolume: Decoder[ExternalVolume] = Decoder.instance { c =>
    for {
      name <- c.downField("name").as[String]
      storageLocations <- c.downField("storage_locations").as[Seq[StorageLocation]]
      allowWrites <- c.downField("allow_writes").as[Option[Boolean]]
      comment <- c.downField("comment").as[Option[String]]
      createdOn <- c.downField("created_on").as[Option[Instant]]
      owner <- c.downField("owner").as[Option[String]]
      ownerRoleType <- c.downField("owner_role_type").as[Option[String]]
    } yield ExternalVolume(
      name = name,
      storageLocations = storageLocations,
      allowWrites = allowWrites,
      comment = comment,
      createdOn = createdOn,
      owner = owner,
      ownerRoleType = ownerRoleType
    )
  }
}

