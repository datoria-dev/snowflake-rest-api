/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** Schema for a request in progress response returned by the server.
  * @param code Message code returned by the server.
  * @param message Message returned by the server
  * @param resultHandler Opaque result ID used for checking for request completion through one or more subsequent completion check operations.
  */
case class SuccessAcceptedResponse(
    code: Option[String] = None,
    message: Option[String] = None,
    resultHandler: Option[String] = None
)
  
object SuccessAcceptedResponse {
  given encoderSuccessAcceptedResponse: Encoder[SuccessAcceptedResponse] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.code.map(v => "code" -> v.asJson),
        t.message.map(v => "message" -> v.asJson),
        t.resultHandler.map(v => "resultHandler" -> v.asJson)
      ).flatten
    }
  }
  given decoderSuccessAcceptedResponse: Decoder[SuccessAcceptedResponse] = Decoder.instance { c =>
    for {
      code <- c.downField("code").as[Option[String]]
      message <- c.downField("message").as[Option[String]]
      resultHandler <- c.downField("resultHandler").as[Option[String]]
    } yield SuccessAcceptedResponse(
      code = code,
      message = message,
      resultHandler = resultHandler
    )
  }
}

