/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** 
  * @param runtimeVersion Runtime version of the function's/procedure's specified language
  * @param packages Packages to include with the function/procedure
  * @param imports List of imports
  * @param handler Fully qualified method name including the package and the class
  */
case class BaseLanguage(
    runtimeVersion: String,
    packages: Seq[String],
    imports: Option[Seq[String]] = None,
    handler: String
)
  
object BaseLanguage {
  given encoderBaseLanguage: Encoder[BaseLanguage] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("runtime_version" -> t.runtimeVersion.asJson),
        Some("packages" -> t.packages.asJson),
        t.imports.map(v => "imports" -> v.asJson),
        Some("handler" -> t.handler.asJson)
      ).flatten
    }
  }
  given decoderBaseLanguage: Decoder[BaseLanguage] = Decoder.instance { c =>
    for {
      runtimeVersion <- c.downField("runtime_version").as[String]
      packages <- c.downField("packages").as[Seq[String]]
      imports <- c.downField("imports").as[Option[Seq[String]]]
      handler <- c.downField("handler").as[String]
    } yield BaseLanguage(
      runtimeVersion = runtimeVersion,
      packages = packages,
      imports = imports,
      handler = handler
    )
  }
}

