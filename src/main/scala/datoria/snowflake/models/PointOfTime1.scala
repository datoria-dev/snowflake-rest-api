/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param pointOfTimeType Type of the point of time. Possible values include: timestamp, offset, statement
  * @param reference 
  */
case class PointOfTime1(
    pointOfTimeType: String,
    reference: PointOfTimeReference
)
  
object PointOfTime1 {
  given encoderPointOfTime1: Encoder[PointOfTime1] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("point_of_time_type" -> t.pointOfTimeType.asJson),
        Some("reference" -> t.reference.asJson)
      ).flatten
    }
  }
  given decoderPointOfTime1: Decoder[PointOfTime1] = Decoder.instance { c =>
    for {
      pointOfTimeType <- c.downField("point_of_time_type").as[String]
      reference <- c.downField("reference").as[PointOfTimeReference]
    } yield PointOfTime1(
      pointOfTimeType = pointOfTimeType,
      reference = reference
    )
  }
}

