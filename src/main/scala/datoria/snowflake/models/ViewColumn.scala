/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** A column specifier in the view
  * @param name Column name
  * @param comment Specifies a comment for the column
  * @param datatype The data type for the column
  */
case class ViewColumn(
    name: String,
    comment: Option[String] = None,
    datatype: Option[String] = None
)
  
object ViewColumn {
  given encoderViewColumn: Encoder[ViewColumn] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("name" -> t.name.asJson),
        t.comment.map(v => "comment" -> v.asJson),
        t.datatype.map(v => "datatype" -> v.asJson)
      ).flatten
    }
  }
  given decoderViewColumn: Decoder[ViewColumn] = Decoder.instance { c =>
    for {
      name <- c.downField("name").as[String]
      comment <- c.downField("comment").as[Option[String]]
      datatype <- c.downField("datatype").as[Option[String]]
    } yield ViewColumn(
      name = name,
      comment = comment,
      datatype = datatype
    )
  }
}

