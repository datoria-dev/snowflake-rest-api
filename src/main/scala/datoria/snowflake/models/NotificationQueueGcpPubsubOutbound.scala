/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param gcpPubsubTopicName Identification of the Pub/Sub topic to which Snowpipe pushes notifications.
  * @param gcpPubsubServiceAccount Google Cloud Platform (GCP) service account created for your account.
  */
case class NotificationQueueGcpPubsubOutbound(
    gcpPubsubTopicName: Option[String] = None,
    gcpPubsubServiceAccount: Option[String] = None
)
  
object NotificationQueueGcpPubsubOutbound {
  given encoderNotificationQueueGcpPubsubOutbound: Encoder[NotificationQueueGcpPubsubOutbound] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.gcpPubsubTopicName.map(v => "gcp_pubsub_topic_name" -> v.asJson),
        t.gcpPubsubServiceAccount.map(v => "gcp_pubsub_service_account" -> v.asJson)
      ).flatten
    }
  }
  given decoderNotificationQueueGcpPubsubOutbound: Decoder[NotificationQueueGcpPubsubOutbound] = Decoder.instance { c =>
    for {
      gcpPubsubTopicName <- c.downField("gcp_pubsub_topic_name").as[Option[String]]
      gcpPubsubServiceAccount <- c.downField("gcp_pubsub_service_account").as[Option[String]]
    } yield NotificationQueueGcpPubsubOutbound(
      gcpPubsubTopicName = gcpPubsubTopicName,
      gcpPubsubServiceAccount = gcpPubsubServiceAccount
    )
  }
}

