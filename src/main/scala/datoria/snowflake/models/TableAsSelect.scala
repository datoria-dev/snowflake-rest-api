/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** Create table as select
  * @param name Specifies the name for the table, must be unique for the schema in which the table is created
  * @param columns 
  * @param clusterBy Specifies one or more columns or column expressions in the table as the clustering key
  */
case class TableAsSelect(
    name: Option[String] = None,
    columns: Option[Seq[TableColumn]] = None,
    clusterBy: Option[Seq[String]] = None
)
  
object TableAsSelect {
  given encoderTableAsSelect: Encoder[TableAsSelect] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.name.map(v => "name" -> v.asJson),
        t.columns.map(v => "columns" -> v.asJson),
        t.clusterBy.map(v => "cluster_by" -> v.asJson)
      ).flatten
    }
  }
  given decoderTableAsSelect: Decoder[TableAsSelect] = Decoder.instance { c =>
    for {
      name <- c.downField("name").as[Option[String]]
      columns <- c.downField("columns").as[Option[Seq[TableColumn]]]
      clusterBy <- c.downField("cluster_by").as[Option[Seq[String]]]
    } yield TableAsSelect(
      name = name,
      columns = columns,
      clusterBy = clusterBy
    )
  }
}

