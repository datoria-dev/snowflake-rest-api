/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param azureEventGridTopicEndpoint Event Grid topic endpoint to which Snowpipe pushes notifications.
  * @param azureTenantId ID of the Azure Active Directory tenant used for identity management.
  * @param azureConsentUrl URL to the Microsoft permissions request page.
  * @param azureMultiTenantAppName Name of the Snowflake client application created for your account.
  */
case class NotificationQueueAzureEventGridOutbound(
    azureEventGridTopicEndpoint: Option[String] = None,
    azureTenantId: Option[String] = None,
    azureConsentUrl: Option[String] = None,
    azureMultiTenantAppName: Option[String] = None
)
  
object NotificationQueueAzureEventGridOutbound {
  given encoderNotificationQueueAzureEventGridOutbound: Encoder[NotificationQueueAzureEventGridOutbound] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.azureEventGridTopicEndpoint.map(v => "azure_event_grid_topic_endpoint" -> v.asJson),
        t.azureTenantId.map(v => "azure_tenant_id" -> v.asJson),
        t.azureConsentUrl.map(v => "azure_consent_url" -> v.asJson),
        t.azureMultiTenantAppName.map(v => "azure_multi_tenant_app_name" -> v.asJson)
      ).flatten
    }
  }
  given decoderNotificationQueueAzureEventGridOutbound: Decoder[NotificationQueueAzureEventGridOutbound] = Decoder.instance { c =>
    for {
      azureEventGridTopicEndpoint <- c.downField("azure_event_grid_topic_endpoint").as[Option[String]]
      azureTenantId <- c.downField("azure_tenant_id").as[Option[String]]
      azureConsentUrl <- c.downField("azure_consent_url").as[Option[String]]
      azureMultiTenantAppName <- c.downField("azure_multi_tenant_app_name").as[Option[String]]
    } yield NotificationQueueAzureEventGridOutbound(
      azureEventGridTopicEndpoint = azureEventGridTopicEndpoint,
      azureTenantId = azureTenantId,
      azureConsentUrl = azureConsentUrl,
      azureMultiTenantAppName = azureMultiTenantAppName
    )
  }
}

