/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param database Database name of the securable if applicable.
  * @param schema Schema name of the securable if applicable.
  * @param name Name of the securable if applicable.
  */
case class Securable1(
    database: Option[String] = None,
    schema: Option[String] = None,
    name: String
)
  
object Securable1 {
  given encoderSecurable1: Encoder[Securable1] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.database.map(v => "database" -> v.asJson),
        t.schema.map(v => "schema" -> v.asJson),
        Some("name" -> t.name.asJson)
      ).flatten
    }
  }
  given decoderSecurable1: Decoder[Securable1] = Decoder.instance { c =>
    for {
      database <- c.downField("database").as[Option[String]]
      schema <- c.downField("schema").as[Option[String]]
      name <- c.downField("name").as[String]
    } yield Securable1(
      database = database,
      schema = schema,
      name = name
    )
  }
}

