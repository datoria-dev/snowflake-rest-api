/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** Specifies the AWS credentials of the stage.
  * @param awsKeyId Scoped credentials generated by AWS Security Token Service (STS).
  * @param awsSecretKey Scoped credentials generated by AWS Security Token Service (STS).
  * @param awsToken Scoped credentials generated by AWS Security Token Service (STS).
  * @param awsRole Omit the security credentials and access keys and, instead, identify the role using AWS_ROLE and specify the AWS role ARN (Amazon Resource Name).
  */
case class AwsCredentials(
    awsKeyId: Option[String] = None,
    awsSecretKey: Option[String] = None,
    awsToken: Option[String] = None,
    awsRole: Option[String] = None
)
  
object AwsCredentials {
  given encoderAwsCredentials: Encoder[AwsCredentials] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.awsKeyId.map(v => "aws_key_id" -> v.asJson),
        t.awsSecretKey.map(v => "aws_secret_key" -> v.asJson),
        t.awsToken.map(v => "aws_token" -> v.asJson),
        t.awsRole.map(v => "aws_role" -> v.asJson)
      ).flatten
    }
  }
  given decoderAwsCredentials: Decoder[AwsCredentials] = Decoder.instance { c =>
    for {
      awsKeyId <- c.downField("aws_key_id").as[Option[String]]
      awsSecretKey <- c.downField("aws_secret_key").as[Option[String]]
      awsToken <- c.downField("aws_token").as[Option[String]]
      awsRole <- c.downField("aws_role").as[Option[String]]
    } yield AwsCredentials(
      awsKeyId = awsKeyId,
      awsSecretKey = awsSecretKey,
      awsToken = awsToken,
      awsRole = awsRole
    )
  }
}

