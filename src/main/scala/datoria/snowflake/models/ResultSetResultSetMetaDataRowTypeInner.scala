/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param name 
  * @param `type` 
  * @param length 
  * @param precision 
  * @param scale 
  * @param nullable 
  */
case class ResultSetResultSetMetaDataRowTypeInner(
    name: Option[String] = None,
    `type`: Option[String] = None,
    length: Option[Long] = None,
    precision: Option[Long] = None,
    scale: Option[Long] = None,
    nullable: Option[Boolean] = None
)
  
object ResultSetResultSetMetaDataRowTypeInner {
  given encoderResultSetResultSetMetaDataRowTypeInner: Encoder[ResultSetResultSetMetaDataRowTypeInner] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.name.map(v => "name" -> v.asJson),
        t.`type`.map(v => "type" -> v.asJson),
        t.length.map(v => "length" -> v.asJson),
        t.precision.map(v => "precision" -> v.asJson),
        t.scale.map(v => "scale" -> v.asJson),
        t.nullable.map(v => "nullable" -> v.asJson)
      ).flatten
    }
  }
  given decoderResultSetResultSetMetaDataRowTypeInner: Decoder[ResultSetResultSetMetaDataRowTypeInner] = Decoder.instance { c =>
    for {
      name <- c.downField("name").as[Option[String]]
      `type` <- c.downField("type").as[Option[String]]
      length <- c.downField("length").as[Option[Long]]
      precision <- c.downField("precision").as[Option[Long]]
      scale <- c.downField("scale").as[Option[Long]]
      nullable <- c.downField("nullable").as[Option[Boolean]]
    } yield ResultSetResultSetMetaDataRowTypeInner(
      name = name,
      `type` = `type`,
      length = length,
      precision = precision,
      scale = scale,
      nullable = nullable
    )
  }
}

