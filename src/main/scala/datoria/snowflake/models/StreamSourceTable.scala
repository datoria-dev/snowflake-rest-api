/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param appendOnly Whether this stream is an append only stream or not
  * @param showInitialRows Whether this stream show initial rows on first consumption
  * @param pointOfTime 
  */
case class StreamSourceTable(
    appendOnly: Option[Boolean] = None,
    showInitialRows: Option[Boolean] = None,
    pointOfTime: Option[PointOfTime1] = None
)
  
object StreamSourceTable {
  given encoderStreamSourceTable: Encoder[StreamSourceTable] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.appendOnly.map(v => "append_only" -> v.asJson),
        t.showInitialRows.map(v => "show_initial_rows" -> v.asJson),
        t.pointOfTime.map(v => "point_of_time" -> v.asJson)
      ).flatten
    }
  }
  given decoderStreamSourceTable: Decoder[StreamSourceTable] = Decoder.instance { c =>
    for {
      appendOnly <- c.downField("append_only").as[Option[Boolean]]
      showInitialRows <- c.downField("show_initial_rows").as[Option[Boolean]]
      pointOfTime <- c.downField("point_of_time").as[Option[PointOfTime1]]
    } yield StreamSourceTable(
      appendOnly = appendOnly,
      showInitialRows = showInitialRows,
      pointOfTime = pointOfTime
    )
  }
}

