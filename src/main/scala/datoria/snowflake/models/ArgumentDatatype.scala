/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** Argument data type
  */
enum ArgumentDatatype(val value: String) {
  case ARRAY extends ArgumentDatatype("ARRAY")
  case BIGINT extends ArgumentDatatype("BIGINT")
  case BINARY extends ArgumentDatatype("BINARY")
  case BOOLEAN extends ArgumentDatatype("BOOLEAN")
  case BYTEINT extends ArgumentDatatype("BYTEINT")
  case `CHAR` extends ArgumentDatatype("CHAR")
  case CHARACTER extends ArgumentDatatype("CHARACTER")
  case DATE extends ArgumentDatatype("DATE")
  case DATETIME extends ArgumentDatatype("DATETIME")
  case DECIMAL extends ArgumentDatatype("DECIMAL")
  case `DOUBLE` extends ArgumentDatatype("DOUBLE")
  case DOUBLEPRECISION extends ArgumentDatatype("DOUBLE PRECISION")
  case `FLOAT` extends ArgumentDatatype("FLOAT")
  case FLOAT4 extends ArgumentDatatype("FLOAT4")
  case FLOAT8 extends ArgumentDatatype("FLOAT8")
  case GEOGRAPHY extends ArgumentDatatype("GEOGRAPHY")
  case GEOMETRY extends ArgumentDatatype("GEOMETRY")
  case `INT` extends ArgumentDatatype("INT")
  case INTEGER extends ArgumentDatatype("INTEGER")
  case NUMBER extends ArgumentDatatype("NUMBER")
  case NUMERIC extends ArgumentDatatype("NUMERIC")
  case `OBJECT` extends ArgumentDatatype("OBJECT")
  case REAL extends ArgumentDatatype("REAL")
  case STRING extends ArgumentDatatype("STRING")
  case SMALLINT extends ArgumentDatatype("SMALLINT")
  case TEXT extends ArgumentDatatype("TEXT")
  case TIME extends ArgumentDatatype("TIME")
  case TIMESTAMPLTZ extends ArgumentDatatype("TIMESTAMP_LTZ")
  case TIMESTAMPNTZ extends ArgumentDatatype("TIMESTAMP_NTZ")
  case TIMESTAMPTZ extends ArgumentDatatype("TIMESTAMP_TZ")
  case TINYINT extends ArgumentDatatype("TINYINT")
  case VARBINARY extends ArgumentDatatype("VARBINARY")
  case VARCHAR extends ArgumentDatatype("VARCHAR")
  case VARIANT extends ArgumentDatatype("VARIANT")
  case VECTOR extends ArgumentDatatype("VECTOR")
}

object ArgumentDatatype {

  def withValueOpt(value: String): Option[ArgumentDatatype] = ArgumentDatatype.values.find(_.value == value)
  def withValue(value: String): ArgumentDatatype =
    withValueOpt(value).getOrElse(throw java.lang.IllegalArgumentException(s"ArgumentDatatype enum case not found: $value"))

  given decoderArgumentDatatype: Decoder[ArgumentDatatype] = Decoder.decodeString.map(withValue)
  given encoderArgumentDatatype: Encoder[ArgumentDatatype] = Encoder.encodeString.contramap[ArgumentDatatype](_.value)

}

