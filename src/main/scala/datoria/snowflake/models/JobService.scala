/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** A Snowflake job service object.
  * @param name A Snowflake object identifier.
  * @param status The current status of the service.
  * @param computePool Specifies the name of the compute pool in your account on which to run the service.
  * @param spec 
  * @param externalAccessIntegrations Specifies the names of the external access integrations that allow your service to access external sites.
  * @param queryWarehouse A Snowflake object identifier.
  * @param comment Specifies a comment for the service.
  */
case class JobService(
    name: String,
    status: Option[String] = None,
    computePool: String,
    spec: ServiceSpec,
    externalAccessIntegrations: Option[Seq[String]] = None,
    queryWarehouse: Option[String] = None,
    comment: Option[String] = None
)
  
object JobService {
  given encoderJobService: Encoder[JobService] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("name" -> t.name.asJson),
        t.status.map(v => "status" -> v.asJson),
        Some("compute_pool" -> t.computePool.asJson),
        Some("spec" -> t.spec.asJson),
        t.externalAccessIntegrations.map(v => "external_access_integrations" -> v.asJson),
        t.queryWarehouse.map(v => "query_warehouse" -> v.asJson),
        t.comment.map(v => "comment" -> v.asJson)
      ).flatten
    }
  }
  given decoderJobService: Decoder[JobService] = Decoder.instance { c =>
    for {
      name <- c.downField("name").as[String]
      status <- c.downField("status").as[Option[String]]
      computePool <- c.downField("compute_pool").as[String]
      spec <- c.downField("spec").as[ServiceSpec]
      externalAccessIntegrations <- c.downField("external_access_integrations").as[Option[Seq[String]]]
      queryWarehouse <- c.downField("query_warehouse").as[Option[String]]
      comment <- c.downField("comment").as[Option[String]]
    } yield JobService(
      name = name,
      status = status,
      computePool = computePool,
      spec = spec,
      externalAccessIntegrations = externalAccessIntegrations,
      queryWarehouse = queryWarehouse,
      comment = comment
    )
  }
}

