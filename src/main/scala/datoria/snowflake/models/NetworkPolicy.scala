/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import java.time.Instant
import scala.collection.immutable.Seq

/** A Snowflake network policy
  * @param name Name of the network policy
  * @param allowedNetworkRuleList List of names of allowed network rules in a network policy
  * @param blockedNetworkRuleList List of names of blocked network rules in a network policy
  * @param allowedIpList List of allowed IPs in a network policy
  * @param blockedIpList List of blocked IPs in a network policy
  * @param comment user comment associated to an object in the dictionary
  * @param createdOn Date and time when the network policy was created.
  * @param owner Role that owns the network policy
  * @param ownerRoleType The type of role that owns the network policy
  */
case class NetworkPolicy(
    name: String,
    allowedNetworkRuleList: Option[Seq[String]] = None,
    blockedNetworkRuleList: Option[Seq[String]] = None,
    allowedIpList: Option[Seq[String]] = None,
    blockedIpList: Option[Seq[String]] = None,
    comment: Option[String] = None,
    createdOn: Option[Instant] = None,
    owner: Option[String] = None,
    ownerRoleType: Option[String] = None
)
  
object NetworkPolicy {
  given encoderNetworkPolicy: Encoder[NetworkPolicy] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("name" -> t.name.asJson),
        t.allowedNetworkRuleList.map(v => "allowed_network_rule_list" -> v.asJson),
        t.blockedNetworkRuleList.map(v => "blocked_network_rule_list" -> v.asJson),
        t.allowedIpList.map(v => "allowed_ip_list" -> v.asJson),
        t.blockedIpList.map(v => "blocked_ip_list" -> v.asJson),
        t.comment.map(v => "comment" -> v.asJson),
        t.createdOn.map(v => "created_on" -> v.asJson),
        t.owner.map(v => "owner" -> v.asJson),
        t.ownerRoleType.map(v => "owner_role_type" -> v.asJson)
      ).flatten
    }
  }
  given decoderNetworkPolicy: Decoder[NetworkPolicy] = Decoder.instance { c =>
    for {
      name <- c.downField("name").as[String]
      allowedNetworkRuleList <- c.downField("allowed_network_rule_list").as[Option[Seq[String]]]
      blockedNetworkRuleList <- c.downField("blocked_network_rule_list").as[Option[Seq[String]]]
      allowedIpList <- c.downField("allowed_ip_list").as[Option[Seq[String]]]
      blockedIpList <- c.downField("blocked_ip_list").as[Option[Seq[String]]]
      comment <- c.downField("comment").as[Option[String]]
      createdOn <- c.downField("created_on").as[Option[Instant]]
      owner <- c.downField("owner").as[Option[String]]
      ownerRoleType <- c.downField("owner_role_type").as[Option[String]]
    } yield NetworkPolicy(
      name = name,
      allowedNetworkRuleList = allowedNetworkRuleList,
      blockedNetworkRuleList = blockedNetworkRuleList,
      allowedIpList = allowedIpList,
      blockedIpList = blockedIpList,
      comment = comment,
      createdOn = createdOn,
      owner = owner,
      ownerRoleType = ownerRoleType
    )
  }
}

