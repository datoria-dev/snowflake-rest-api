/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param srcType Type of the source. Possible values include: stream, table, view
  * @param name Name of the source whose changes are tracked by the stream
  * @param databaseName Database name to which stream source type belongs. If not provided, database  name provided in the path param will be used.
  * @param schemaName Schema name to which stream source type belongs. If not provided, schema name provided in the path param will be used.
  */
case class StreamSource(
    srcType: String,
    name: String,
    databaseName: Option[String] = None,
    schemaName: Option[String] = None
)
  
object StreamSource {
  given encoderStreamSource: Encoder[StreamSource] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("src_type" -> t.srcType.asJson),
        Some("name" -> t.name.asJson),
        t.databaseName.map(v => "database_name" -> v.asJson),
        t.schemaName.map(v => "schema_name" -> v.asJson)
      ).flatten
    }
  }
  given decoderStreamSource: Decoder[StreamSource] = Decoder.instance { c =>
    for {
      srcType <- c.downField("src_type").as[String]
      name <- c.downField("name").as[String]
      databaseName <- c.downField("database_name").as[Option[String]]
      schemaName <- c.downField("schema_name").as[Option[String]]
    } yield StreamSource(
      srcType = srcType,
      name = name,
      databaseName = databaseName,
      schemaName = schemaName
    )
  }
}

