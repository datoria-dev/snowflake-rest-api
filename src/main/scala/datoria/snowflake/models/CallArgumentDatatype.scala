/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** Call argument data type
  */
enum CallArgumentDatatype(val value: String) {
  case ARRAY extends CallArgumentDatatype("ARRAY")
  case BIGINT extends CallArgumentDatatype("BIGINT")
  case BINARY extends CallArgumentDatatype("BINARY")
  case BOOLEAN extends CallArgumentDatatype("BOOLEAN")
  case BYTEINT extends CallArgumentDatatype("BYTEINT")
  case `CHAR` extends CallArgumentDatatype("CHAR")
  case CHARACTER extends CallArgumentDatatype("CHARACTER")
  case DATE extends CallArgumentDatatype("DATE")
  case DATETIME extends CallArgumentDatatype("DATETIME")
  case DECIMAL extends CallArgumentDatatype("DECIMAL")
  case `DOUBLE` extends CallArgumentDatatype("DOUBLE")
  case DOUBLEPRECISION extends CallArgumentDatatype("DOUBLE PRECISION")
  case `FLOAT` extends CallArgumentDatatype("FLOAT")
  case FLOAT4 extends CallArgumentDatatype("FLOAT4")
  case FLOAT8 extends CallArgumentDatatype("FLOAT8")
  case GEOGRAPHY extends CallArgumentDatatype("GEOGRAPHY")
  case GEOMETRY extends CallArgumentDatatype("GEOMETRY")
  case `INT` extends CallArgumentDatatype("INT")
  case INTEGER extends CallArgumentDatatype("INTEGER")
  case NUMBER extends CallArgumentDatatype("NUMBER")
  case NUMERIC extends CallArgumentDatatype("NUMERIC")
  case `OBJECT` extends CallArgumentDatatype("OBJECT")
  case REAL extends CallArgumentDatatype("REAL")
  case STRING extends CallArgumentDatatype("STRING")
  case SMALLINT extends CallArgumentDatatype("SMALLINT")
  case TEXT extends CallArgumentDatatype("TEXT")
  case TIME extends CallArgumentDatatype("TIME")
  case TIMESTAMPLTZ extends CallArgumentDatatype("TIMESTAMP_LTZ")
  case TIMESTAMPNTZ extends CallArgumentDatatype("TIMESTAMP_NTZ")
  case TIMESTAMPTZ extends CallArgumentDatatype("TIMESTAMP_TZ")
  case TINYINT extends CallArgumentDatatype("TINYINT")
  case VARBINARY extends CallArgumentDatatype("VARBINARY")
  case VARCHAR extends CallArgumentDatatype("VARCHAR")
  case VARIANT extends CallArgumentDatatype("VARIANT")
  case VECTOR extends CallArgumentDatatype("VECTOR")
}

object CallArgumentDatatype {

  def withValueOpt(value: String): Option[CallArgumentDatatype] = CallArgumentDatatype.values.find(_.value == value)
  def withValue(value: String): CallArgumentDatatype =
    withValueOpt(value).getOrElse(throw java.lang.IllegalArgumentException(s"CallArgumentDatatype enum case not found: $value"))

  given decoderCallArgumentDatatype: Decoder[CallArgumentDatatype] = Decoder.decodeString.map(withValue)
  given encoderCallArgumentDatatype: Encoder[CallArgumentDatatype] = Encoder.encodeString.contramap[CallArgumentDatatype](_.value)

}

