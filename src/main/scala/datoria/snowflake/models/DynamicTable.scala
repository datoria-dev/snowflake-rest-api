/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import java.time.Instant
import scala.collection.immutable.Seq

/** A Snowflake dynamic table object.
  * @param name Specifies the name for the dynamic table, must be unique for the schema in which the dynamic table is created
  * @param kind 
  * @param columns 
  * @param targetLag 
  * @param refreshMode 
  * @param initialize 
  * @param warehouse Specifies the name of the warehouse that provides the compute resources for refreshing the dynamic table
  * @param clusterBy Specifies one or more columns or column expressions in the dynamic table as the clustering key
  * @param query Specifies the query whose results the dynamic table should contain
  * @param dataRetentionTimeInDays Specifies the retention period for the dynamic table so that Time Travel actions (SELECT, CLONE) can be performed on historical data in the dynamic table
  * @param maxDataExtensionTimeInDays Specifies the retention period for the dynamic table so that Time Travel actions (SELECT, CLONE) can be performed on historical data in the dynamic table
  * @param comment Specifies a comment for the dynamic table.
  * @param createdOn Date and time when the dynamic table was created.
  * @param databaseName Database in which the dynamic table is stored
  * @param schemaName Schema in which the dynamic table is stored
  * @param rows Number of rows in the dynamic table.
  * @param bytes Number of bytes that will be scanned if the entire table is scanned in a query. Note that this number may be different than the number of actual physical bytes stored on-disk for the table
  * @param schedulingState 
  * @param automaticClustering If Automatic Clustering is enabled for your account, specifies whether it is explicitly enabled or disabled for the dynamic table.
  * @param owner Role that owns the table
  * @param ownerRoleType The type of role that owns the object.
  * @param budget Name of the budget if the object is monitored by a budget
  */
case class DynamicTable(
    name: String,
    kind: Option[DynamicTableKind] = None,
    columns: Option[Seq[DynamicTableColumn]] = None,
    targetLag: TargetLag,
    refreshMode: Option[DynamicTableRefreshMode] = None,
    initialize: Option[DynamicTableInitialize] = None,
    warehouse: String,
    clusterBy: Option[Seq[String]] = None,
    query: String,
    dataRetentionTimeInDays: Option[Int] = None,
    maxDataExtensionTimeInDays: Option[Int] = None,
    comment: Option[String] = None,
    createdOn: Option[Instant] = None,
    databaseName: Option[String] = None,
    schemaName: Option[String] = None,
    rows: Option[Long] = None,
    bytes: Option[Long] = None,
    schedulingState: Option[DynamicTableSchedulingState] = None,
    automaticClustering: Option[Boolean] = None,
    owner: Option[String] = None,
    ownerRoleType: Option[String] = None,
    budget: Option[String] = None
)
  
object DynamicTable {
  given encoderDynamicTable: Encoder[DynamicTable] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("name" -> t.name.asJson),
        t.kind.map(v => "kind" -> v.asJson),
        t.columns.map(v => "columns" -> v.asJson),
        Some("target_lag" -> t.targetLag.asJson),
        t.refreshMode.map(v => "refresh_mode" -> v.asJson),
        t.initialize.map(v => "initialize" -> v.asJson),
        Some("warehouse" -> t.warehouse.asJson),
        t.clusterBy.map(v => "cluster_by" -> v.asJson),
        Some("query" -> t.query.asJson),
        t.dataRetentionTimeInDays.map(v => "data_retention_time_in_days" -> v.asJson),
        t.maxDataExtensionTimeInDays.map(v => "max_data_extension_time_in_days" -> v.asJson),
        t.comment.map(v => "comment" -> v.asJson),
        t.createdOn.map(v => "created_on" -> v.asJson),
        t.databaseName.map(v => "database_name" -> v.asJson),
        t.schemaName.map(v => "schema_name" -> v.asJson),
        t.rows.map(v => "rows" -> v.asJson),
        t.bytes.map(v => "bytes" -> v.asJson),
        t.schedulingState.map(v => "scheduling_state" -> v.asJson),
        t.automaticClustering.map(v => "automatic_clustering" -> v.asJson),
        t.owner.map(v => "owner" -> v.asJson),
        t.ownerRoleType.map(v => "owner_role_type" -> v.asJson),
        t.budget.map(v => "budget" -> v.asJson)
      ).flatten
    }
  }
  given decoderDynamicTable: Decoder[DynamicTable] = Decoder.instance { c =>
    for {
      name <- c.downField("name").as[String]
      kind <- c.downField("kind").as[Option[DynamicTableKind]]
      columns <- c.downField("columns").as[Option[Seq[DynamicTableColumn]]]
      targetLag <- c.downField("target_lag").as[TargetLag]
      refreshMode <- c.downField("refresh_mode").as[Option[DynamicTableRefreshMode]]
      initialize <- c.downField("initialize").as[Option[DynamicTableInitialize]]
      warehouse <- c.downField("warehouse").as[String]
      clusterBy <- c.downField("cluster_by").as[Option[Seq[String]]]
      query <- c.downField("query").as[String]
      dataRetentionTimeInDays <- c.downField("data_retention_time_in_days").as[Option[Int]]
      maxDataExtensionTimeInDays <- c.downField("max_data_extension_time_in_days").as[Option[Int]]
      comment <- c.downField("comment").as[Option[String]]
      createdOn <- c.downField("created_on").as[Option[Instant]]
      databaseName <- c.downField("database_name").as[Option[String]]
      schemaName <- c.downField("schema_name").as[Option[String]]
      rows <- c.downField("rows").as[Option[Long]]
      bytes <- c.downField("bytes").as[Option[Long]]
      schedulingState <- c.downField("scheduling_state").as[Option[DynamicTableSchedulingState]]
      automaticClustering <- c.downField("automatic_clustering").as[Option[Boolean]]
      owner <- c.downField("owner").as[Option[String]]
      ownerRoleType <- c.downField("owner_role_type").as[Option[String]]
      budget <- c.downField("budget").as[Option[String]]
    } yield DynamicTable(
      name = name,
      kind = kind,
      columns = columns,
      targetLag = targetLag,
      refreshMode = refreshMode,
      initialize = initialize,
      warehouse = warehouse,
      clusterBy = clusterBy,
      query = query,
      dataRetentionTimeInDays = dataRetentionTimeInDays,
      maxDataExtensionTimeInDays = maxDataExtensionTimeInDays,
      comment = comment,
      createdOn = createdOn,
      databaseName = databaseName,
      schemaName = schemaName,
      rows = rows,
      bytes = bytes,
      schedulingState = schedulingState,
      automaticClustering = automaticClustering,
      owner = owner,
      ownerRoleType = ownerRoleType,
      budget = budget
    )
  }
}

