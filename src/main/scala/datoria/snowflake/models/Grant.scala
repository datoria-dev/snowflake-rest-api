/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import java.time.Instant
import scala.collection.immutable.Seq

/** Properties of a grant that can be granted to a role or user.
  * @param privileges Privilege type
  * @param grantOption Can grantee pass this privilege down?
  * @param createdOn 
  * @param granteeType Entity type being granted to
  * @param granteeName Specific name of object being granted to
  * @param securableType Type of object granted on
  * @param securableName Name of specific object granted on (not name of privilege!)
  * @param grantedByRoleType Type of role that granted this privilege to this grantee
  * @param grantedByName The role that granted this privilege to this grantee
  */
case class Grant(
    privileges: Option[Seq[String]] = None,
    grantOption: Option[Boolean] = None,
    createdOn: Option[Instant] = None,
    granteeType: Option[String] = None,
    granteeName: Option[String] = None,
    securableType: Option[String] = None,
    securableName: Option[String] = None,
    grantedByRoleType: Option[String] = None,
    grantedByName: Option[String] = None
)
  
object Grant {
  given encoderGrant: Encoder[Grant] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.privileges.map(v => "privileges" -> v.asJson),
        t.grantOption.map(v => "grant_option" -> v.asJson),
        t.createdOn.map(v => "created_on" -> v.asJson),
        t.granteeType.map(v => "grantee_type" -> v.asJson),
        t.granteeName.map(v => "grantee_name" -> v.asJson),
        t.securableType.map(v => "securable_type" -> v.asJson),
        t.securableName.map(v => "securable_name" -> v.asJson),
        t.grantedByRoleType.map(v => "granted_by_role_type" -> v.asJson),
        t.grantedByName.map(v => "granted_by_name" -> v.asJson)
      ).flatten
    }
  }
  given decoderGrant: Decoder[Grant] = Decoder.instance { c =>
    for {
      privileges <- c.downField("privileges").as[Option[Seq[String]]]
      grantOption <- c.downField("grant_option").as[Option[Boolean]]
      createdOn <- c.downField("created_on").as[Option[Instant]]
      granteeType <- c.downField("grantee_type").as[Option[String]]
      granteeName <- c.downField("grantee_name").as[Option[String]]
      securableType <- c.downField("securable_type").as[Option[String]]
      securableName <- c.downField("securable_name").as[Option[String]]
      grantedByRoleType <- c.downField("granted_by_role_type").as[Option[String]]
      grantedByName <- c.downField("granted_by_name").as[Option[String]]
    } yield Grant(
      privileges = privileges,
      grantOption = grantOption,
      createdOn = createdOn,
      granteeType = granteeType,
      granteeName = granteeName,
      securableType = securableType,
      securableName = securableName,
      grantedByRoleType = grantedByRoleType,
      grantedByName = grantedByName
    )
  }
}

