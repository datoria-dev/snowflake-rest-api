/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** Type of external catalog
  */
enum CatalogCatalogSource(val value: String) {
  case GLUE extends CatalogCatalogSource("GLUE")
  case OBJECTSTORE extends CatalogCatalogSource("OBJECT_STORE")
  case POLARIS extends CatalogCatalogSource("POLARIS")
}

object CatalogCatalogSource {

  def withValueOpt(value: String): Option[CatalogCatalogSource] = CatalogCatalogSource.values.find(_.value == value)
  def withValue(value: String): CatalogCatalogSource =
    withValueOpt(value).getOrElse(throw java.lang.IllegalArgumentException(s"CatalogCatalogSource enum case not found: $value"))

  given decoderCatalogCatalogSource: Decoder[CatalogCatalogSource] = Decoder.decodeString.map(withValue)
  given encoderCatalogCatalogSource: Encoder[CatalogCatalogSource] = Encoder.encodeString.contramap[CatalogCatalogSource](_.value)

}

