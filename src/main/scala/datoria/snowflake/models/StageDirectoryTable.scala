/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** Directory table parameters of the stage.
  * @param enable Specifies whether to add a directory table to the stage. When the value is TRUE, a directory table is created with the stage.
  * @param refreshOnCreate Specifies whether to automatically refresh the directory table metadata once, immediately after the stage is created.
  * @param autoRefresh Specifies whether Snowflake should enable triggering automatic refreshes of the directory table metadata when new or updated data files are available in the named external stage specified in the URL value.
  * @param notificationIntegration Specifies the name of the notification integration used to automatically refresh the directory table metadata.
  */
case class StageDirectoryTable(
    enable: Option[Boolean] = None,
    refreshOnCreate: Option[Boolean] = None,
    autoRefresh: Option[Boolean] = None,
    notificationIntegration: Option[String] = None
)
  
object StageDirectoryTable {
  given encoderStageDirectoryTable: Encoder[StageDirectoryTable] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.enable.map(v => "enable" -> v.asJson),
        t.refreshOnCreate.map(v => "refresh_on_create" -> v.asJson),
        t.autoRefresh.map(v => "auto_refresh" -> v.asJson),
        t.notificationIntegration.map(v => "notification_integration" -> v.asJson)
      ).flatten
    }
  }
  given decoderStageDirectoryTable: Decoder[StageDirectoryTable] = Decoder.instance { c =>
    for {
      enable <- c.downField("enable").as[Option[Boolean]]
      refreshOnCreate <- c.downField("refresh_on_create").as[Option[Boolean]]
      autoRefresh <- c.downField("auto_refresh").as[Option[Boolean]]
      notificationIntegration <- c.downField("notification_integration").as[Option[String]]
    } yield StageDirectoryTable(
      enable = enable,
      refreshOnCreate = refreshOnCreate,
      autoRefresh = autoRefresh,
      notificationIntegration = notificationIntegration
    )
  }
}

