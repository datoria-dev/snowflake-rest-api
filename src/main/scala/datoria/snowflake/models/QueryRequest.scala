/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import io.circe.Json
import scala.collection.immutable.Seq

/** A search query and additional parameters for search.
  * @param query Unstructured text query.
  * @param columns List of columns to return.
  * @param filter Filter query.
  * @param limit Max number of results to return.
  * @param experimental Opaque container for experimental features. You probably do not want to use this.
  */
case class QueryRequest(
    query: String,
    columns: Seq[String],
    filter: Option[Json] = None,
    limit: Option[Int] = None,
    experimental: Option[Map[String, AnyType]] = None
)
  
object QueryRequest {
  given encoderQueryRequest: Encoder[QueryRequest] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("query" -> t.query.asJson),
        Some("columns" -> t.columns.asJson),
        t.filter.map(v => "filter" -> v.asJson),
        t.limit.map(v => "limit" -> v.asJson),
        t.experimental.map(v => "experimental" -> v.asJson)
      ).flatten
    }
  }
  given decoderQueryRequest: Decoder[QueryRequest] = Decoder.instance { c =>
    for {
      query <- c.downField("query").as[String]
      columns <- c.downField("columns").as[Seq[String]]
      filter <- c.downField("filter").as[Option[Json]]
      limit <- c.downField("limit").as[Option[Int]]
      experimental <- c.downField("experimental").as[Option[Map[String, AnyType]]]
    } yield QueryRequest(
      query = query,
      columns = columns,
      filter = filter,
      limit = limit,
      experimental = experimental
    )
  }
}

