/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** Point of time identified by an offset in reference to the current time, such as `10 min`.
  * @param offset Offset from the point of time. Example: `1 year`
  */
case class PointOfTimeOffset1(
    offset: Option[String] = None
)
  
object PointOfTimeOffset1 {
  given encoderPointOfTimeOffset1: Encoder[PointOfTimeOffset1] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.offset.map(v => "offset" -> v.asJson)
      ).flatten
    }
  }
  given decoderPointOfTimeOffset1: Decoder[PointOfTimeOffset1] = Decoder.instance { c =>
    for {
      offset <- c.downField("offset").as[Option[String]]
    } yield PointOfTimeOffset1(
      offset = offset
    )
  }
}

