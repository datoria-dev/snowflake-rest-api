/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param rowCount Number of rows in the partition.
  * @param compressedSize the partition size before the decompression. This may or may not be present in the partitionInfo. Uncompressed size would always be there.
  * @param uncompressedSize the partition size after the decompression
  */
case class ResultSetResultSetMetaDataPartitionInfoInner(
    rowCount: Option[Long] = None,
    compressedSize: Option[Long] = None,
    uncompressedSize: Option[Long] = None
)
  
object ResultSetResultSetMetaDataPartitionInfoInner {
  given encoderResultSetResultSetMetaDataPartitionInfoInner: Encoder[ResultSetResultSetMetaDataPartitionInfoInner] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.rowCount.map(v => "rowCount" -> v.asJson),
        t.compressedSize.map(v => "compressedSize" -> v.asJson),
        t.uncompressedSize.map(v => "uncompressedSize" -> v.asJson)
      ).flatten
    }
  }
  given decoderResultSetResultSetMetaDataPartitionInfoInner: Decoder[ResultSetResultSetMetaDataPartitionInfoInner] = Decoder.instance { c =>
    for {
      rowCount <- c.downField("rowCount").as[Option[Long]]
      compressedSize <- c.downField("compressedSize").as[Option[Long]]
      uncompressedSize <- c.downField("uncompressedSize").as[Option[Long]]
    } yield ResultSetResultSetMetaDataPartitionInfoInner(
      rowCount = rowCount,
      compressedSize = compressedSize,
      uncompressedSize = uncompressedSize
    )
  }
}

