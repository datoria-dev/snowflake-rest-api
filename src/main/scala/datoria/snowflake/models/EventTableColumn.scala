/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param name Column name
  * @param datatype The data type for the column
  * @param nullable Specifies that the column does allow NULL values or not
  * @param `default` Specifies whether a default value is automatically inserted in the column if a value is not explicitly specified via an INSERT or CREATE TABLE AS SELECT statement
  * @param primaryKey A primary key is the column or columns that contain values that uniquely identify each row in a table
  * @param uniqueKey Unique keys are columns in a table that uniquely identify items in the rows. This sounds a lot like a primary key, but the main difference is that unique keys can have NULL values.
  * @param check 
  * @param expression 
  * @param comment Specifies a comment for the column
  */
case class EventTableColumn(
    name: Option[String] = None,
    datatype: Option[String] = None,
    nullable: Option[Boolean] = None,
    `default`: Option[String] = None,
    primaryKey: Option[Boolean] = None,
    uniqueKey: Option[Boolean] = None,
    check: Option[String] = None,
    expression: Option[String] = None,
    comment: Option[String] = None
)
  
object EventTableColumn {
  given encoderEventTableColumn: Encoder[EventTableColumn] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.name.map(v => "name" -> v.asJson),
        t.datatype.map(v => "datatype" -> v.asJson),
        t.nullable.map(v => "nullable" -> v.asJson),
        t.`default`.map(v => "default" -> v.asJson),
        t.primaryKey.map(v => "primary_key" -> v.asJson),
        t.uniqueKey.map(v => "unique_key" -> v.asJson),
        t.check.map(v => "check" -> v.asJson),
        t.expression.map(v => "expression" -> v.asJson),
        t.comment.map(v => "comment" -> v.asJson)
      ).flatten
    }
  }
  given decoderEventTableColumn: Decoder[EventTableColumn] = Decoder.instance { c =>
    for {
      name <- c.downField("name").as[Option[String]]
      datatype <- c.downField("datatype").as[Option[String]]
      nullable <- c.downField("nullable").as[Option[Boolean]]
      `default` <- c.downField("default").as[Option[String]]
      primaryKey <- c.downField("primary_key").as[Option[Boolean]]
      uniqueKey <- c.downField("unique_key").as[Option[Boolean]]
      check <- c.downField("check").as[Option[String]]
      expression <- c.downField("expression").as[Option[String]]
      comment <- c.downField("comment").as[Option[String]]
    } yield EventTableColumn(
      name = name,
      datatype = datatype,
      nullable = nullable,
      `default` = `default`,
      primaryKey = primaryKey,
      uniqueKey = uniqueKey,
      check = check,
      expression = expression,
      comment = comment
    )
  }
}

