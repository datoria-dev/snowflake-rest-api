/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** Current state of the compute pool. Possible values include UNKNOWN, STARTING, IDLE, ACTIVE, STOPPING, SUSPENDED, and RESIZING.
  */
enum ComputePoolState(val value: String) {
  case UNKNOWN extends ComputePoolState("UNKNOWN")
  case STARTING extends ComputePoolState("STARTING")
  case IDLE extends ComputePoolState("IDLE")
  case ACTIVE extends ComputePoolState("ACTIVE")
  case STOPPING extends ComputePoolState("STOPPING")
  case SUSPENDED extends ComputePoolState("SUSPENDED")
  case RESIZING extends ComputePoolState("RESIZING")
}

object ComputePoolState {

  def withValueOpt(value: String): Option[ComputePoolState] = ComputePoolState.values.find(_.value == value)
  def withValue(value: String): ComputePoolState =
    withValueOpt(value).getOrElse(throw java.lang.IllegalArgumentException(s"ComputePoolState enum case not found: $value"))

  given decoderComputePoolState: Decoder[ComputePoolState] = Decoder.decodeString.map(withValue)
  given encoderComputePoolState: Encoder[ComputePoolState] = Encoder.encodeString.contramap[ComputePoolState](_.value)

}

