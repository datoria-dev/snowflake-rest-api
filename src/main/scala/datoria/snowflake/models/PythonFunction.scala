/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** 
  * @param externalAccessIntegrations List of external access integrations attached to this function/procedure
  * @param secrets Secrets to be used with this function/procedure for external access
  */
case class PythonFunction(
    externalAccessIntegrations: Option[Seq[String]] = None,
    secrets: Option[Map[String, String]] = None
)
  
object PythonFunction {
  given encoderPythonFunction: Encoder[PythonFunction] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.externalAccessIntegrations.map(v => "external_access_integrations" -> v.asJson),
        t.secrets.map(v => "secrets" -> v.asJson)
      ).flatten
    }
  }
  given decoderPythonFunction: Decoder[PythonFunction] = Decoder.instance { c =>
    for {
      externalAccessIntegrations <- c.downField("external_access_integrations").as[Option[Seq[String]]]
      secrets <- c.downField("secrets").as[Option[Map[String, String]]]
    } yield PythonFunction(
      externalAccessIntegrations = externalAccessIntegrations,
      secrets = secrets
    )
  }
}

