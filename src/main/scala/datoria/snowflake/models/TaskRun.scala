/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import java.time.Instant

/** A task run executing a standalone task or a DAG of tasks starting from the root task.
  * @param rootTaskName The name of the root task in the current task run.
  * @param databaseName The name of the current database for the task run.
  * @param schemaName The name of the current schema for the task run.
  * @param state 
  * @param firstErrorTaskName The name of the first task throwing an error in the task run.
  * @param firstErrorCode The first error code thrown in the task run.
  * @param firstErrorMessage The first error message thrown in the task run.
  * @param scheduledTime The scheduled time for the task run.
  * @param queryStartTime The start time for the task run query.
  * @param nextScheduledTime The next upcoming time for the task run.
  * @param completedTime The time this task run was last completed.
  * @param rootTaskId The unique task ID for the root task.
  * @param graphVersion The current version of the DAG on the task run.
  * @param runId The unique ID for the current task run.
  */
case class TaskRun(
    rootTaskName: String,
    databaseName: String,
    schemaName: String,
    state: TaskRunState,
    firstErrorTaskName: Option[String] = None,
    firstErrorCode: Option[Int] = None,
    firstErrorMessage: Option[String] = None,
    scheduledTime: Instant,
    queryStartTime: Option[Instant] = None,
    nextScheduledTime: Instant,
    completedTime: Option[Instant] = None,
    rootTaskId: String,
    graphVersion: Int,
    runId: Int
)
  
object TaskRun {
  given encoderTaskRun: Encoder[TaskRun] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("root_task_name" -> t.rootTaskName.asJson),
        Some("database_name" -> t.databaseName.asJson),
        Some("schema_name" -> t.schemaName.asJson),
        Some("state" -> t.state.asJson),
        t.firstErrorTaskName.map(v => "first_error_task_name" -> v.asJson),
        t.firstErrorCode.map(v => "first_error_code" -> v.asJson),
        t.firstErrorMessage.map(v => "first_error_message" -> v.asJson),
        Some("scheduled_time" -> t.scheduledTime.asJson),
        t.queryStartTime.map(v => "query_start_time" -> v.asJson),
        Some("next_scheduled_time" -> t.nextScheduledTime.asJson),
        t.completedTime.map(v => "completed_time" -> v.asJson),
        Some("root_task_id" -> t.rootTaskId.asJson),
        Some("graph_version" -> t.graphVersion.asJson),
        Some("run_id" -> t.runId.asJson)
      ).flatten
    }
  }
  given decoderTaskRun: Decoder[TaskRun] = Decoder.instance { c =>
    for {
      rootTaskName <- c.downField("root_task_name").as[String]
      databaseName <- c.downField("database_name").as[String]
      schemaName <- c.downField("schema_name").as[String]
      state <- c.downField("state").as[TaskRunState]
      firstErrorTaskName <- c.downField("first_error_task_name").as[Option[String]]
      firstErrorCode <- c.downField("first_error_code").as[Option[Int]]
      firstErrorMessage <- c.downField("first_error_message").as[Option[String]]
      scheduledTime <- c.downField("scheduled_time").as[Instant]
      queryStartTime <- c.downField("query_start_time").as[Option[Instant]]
      nextScheduledTime <- c.downField("next_scheduled_time").as[Instant]
      completedTime <- c.downField("completed_time").as[Option[Instant]]
      rootTaskId <- c.downField("root_task_id").as[String]
      graphVersion <- c.downField("graph_version").as[Int]
      runId <- c.downField("run_id").as[Int]
    } yield TaskRun(
      rootTaskName = rootTaskName,
      databaseName = databaseName,
      schemaName = schemaName,
      state = state,
      firstErrorTaskName = firstErrorTaskName,
      firstErrorCode = firstErrorCode,
      firstErrorMessage = firstErrorMessage,
      scheduledTime = scheduledTime,
      queryStartTime = queryStartTime,
      nextScheduledTime = nextScheduledTime,
      completedTime = completedTime,
      rootTaskId = rootTaskId,
      graphVersion = graphVersion,
      runId = runId
    )
  }
}

