/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** Specifies the encryption type used.
  */
enum StageEncryptionType(val value: String) {
  case SNOWFLAKEFULL extends StageEncryptionType("SNOWFLAKE_FULL")
  case SNOWFLAKESSE extends StageEncryptionType("SNOWFLAKE_SSE")
  case AWSCSE extends StageEncryptionType("AWS_CSE")
  case AWSSSES3 extends StageEncryptionType("AWS_SSE_S3")
  case AWSSSEKMS extends StageEncryptionType("AWS_SSE_KMS")
  case GCSSSEKMS extends StageEncryptionType("GCS_SSE_KMS")
  case AZURECSE extends StageEncryptionType("AZURE_CSE")
  case NONE extends StageEncryptionType("NONE")
}

object StageEncryptionType {

  def withValueOpt(value: String): Option[StageEncryptionType] = StageEncryptionType.values.find(_.value == value)
  def withValue(value: String): StageEncryptionType =
    withValueOpt(value).getOrElse(throw java.lang.IllegalArgumentException(s"StageEncryptionType enum case not found: $value"))

  given decoderStageEncryptionType: Decoder[StageEncryptionType] = Decoder.decodeString.map(withValue)
  given encoderStageEncryptionType: Encoder[StageEncryptionType] = Encoder.encodeString.contramap[StageEncryptionType](_.value)

}

