/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import java.time.Instant
import scala.collection.immutable.Seq

/** 
  * @param name A Snowflake object identifier.
  * @param status The current status of the service.
  * @param computePool Specifies the name of the compute pool in your account on which to run the service.
  * @param spec 
  * @param externalAccessIntegrations Specifies the names of the external access integrations that allow your service to access external sites.
  * @param queryWarehouse A Snowflake object identifier.
  * @param comment Specifies a comment for the service.
  * @param autoResume Specifies whether to automatically resume a service when a service function or ingress is called.
  * @param currentInstances The current number of instances for the service.
  * @param targetInstances The target number of service instances that should be running as determined by Snowflake.
  * @param minReadyInstances The minimum number of ready service instances to declare the service as READY.
  * @param minInstances Specifies the minimum number of service instances to run.
  * @param maxInstances Specifies the maximum number of service instances to run.
  * @param databaseName A Snowflake object identifier.
  * @param schemaName A Snowflake object identifier.
  * @param owner Role that owns the service.
  * @param dnsName Snowflake-assiged DNS name of the service. The DNS name enables service-to-service communications.
  * @param createdOn Timestamp when the service was created.
  * @param updatedOn Timestamp when the service was last updated.
  * @param resumedOn Timestamp when the service was last resumed.
  * @param ownerRoleType The role type of the service owner.
  * @param isJob True if the service is a job service; false otherwise.
  * @param specDigest The unique and immutable identifier representing the service spec content.
  * @param isUpgrading TRUE, if Snowflake is in the process of upgrading the service.
  * @param managingObjectDomain The domain of the managing object (for example, the domain of the notebook that manages the service). NULL if the service is not managed by a Snowflake entity.
  * @param managingObjectName The name of the managing object (for example, the name of the notebook that manages the service). NULL if the service is not managed by a Snowflake entity.
  */
case class Service(
    name: String,
    status: Option[String] = None,
    computePool: String,
    spec: ServiceSpec,
    externalAccessIntegrations: Option[Seq[String]] = None,
    queryWarehouse: Option[String] = None,
    comment: Option[String] = None,
    autoResume: Option[Boolean] = None,
    currentInstances: Option[Int] = None,
    targetInstances: Option[Int] = None,
    minReadyInstances: Option[Int] = None,
    minInstances: Option[Int] = None,
    maxInstances: Option[Int] = None,
    databaseName: Option[String] = None,
    schemaName: Option[String] = None,
    owner: Option[String] = None,
    dnsName: Option[String] = None,
    createdOn: Option[Instant] = None,
    updatedOn: Option[Instant] = None,
    resumedOn: Option[Instant] = None,
    ownerRoleType: Option[String] = None,
    isJob: Option[Boolean] = None,
    specDigest: Option[String] = None,
    isUpgrading: Option[Boolean] = None,
    managingObjectDomain: Option[String] = None,
    managingObjectName: Option[String] = None
)
  
object Service {
  given encoderService: Encoder[Service] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("name" -> t.name.asJson),
        t.status.map(v => "status" -> v.asJson),
        Some("compute_pool" -> t.computePool.asJson),
        Some("spec" -> t.spec.asJson),
        t.externalAccessIntegrations.map(v => "external_access_integrations" -> v.asJson),
        t.queryWarehouse.map(v => "query_warehouse" -> v.asJson),
        t.comment.map(v => "comment" -> v.asJson),
        t.autoResume.map(v => "auto_resume" -> v.asJson),
        t.currentInstances.map(v => "current_instances" -> v.asJson),
        t.targetInstances.map(v => "target_instances" -> v.asJson),
        t.minReadyInstances.map(v => "min_ready_instances" -> v.asJson),
        t.minInstances.map(v => "min_instances" -> v.asJson),
        t.maxInstances.map(v => "max_instances" -> v.asJson),
        t.databaseName.map(v => "database_name" -> v.asJson),
        t.schemaName.map(v => "schema_name" -> v.asJson),
        t.owner.map(v => "owner" -> v.asJson),
        t.dnsName.map(v => "dns_name" -> v.asJson),
        t.createdOn.map(v => "created_on" -> v.asJson),
        t.updatedOn.map(v => "updated_on" -> v.asJson),
        t.resumedOn.map(v => "resumed_on" -> v.asJson),
        t.ownerRoleType.map(v => "owner_role_type" -> v.asJson),
        t.isJob.map(v => "is_job" -> v.asJson),
        t.specDigest.map(v => "spec_digest" -> v.asJson),
        t.isUpgrading.map(v => "is_upgrading" -> v.asJson),
        t.managingObjectDomain.map(v => "managing_object_domain" -> v.asJson),
        t.managingObjectName.map(v => "managing_object_name" -> v.asJson)
      ).flatten
    }
  }
  given decoderService: Decoder[Service] = Decoder.instance { c =>
    for {
      name <- c.downField("name").as[String]
      status <- c.downField("status").as[Option[String]]
      computePool <- c.downField("compute_pool").as[String]
      spec <- c.downField("spec").as[ServiceSpec]
      externalAccessIntegrations <- c.downField("external_access_integrations").as[Option[Seq[String]]]
      queryWarehouse <- c.downField("query_warehouse").as[Option[String]]
      comment <- c.downField("comment").as[Option[String]]
      autoResume <- c.downField("auto_resume").as[Option[Boolean]]
      currentInstances <- c.downField("current_instances").as[Option[Int]]
      targetInstances <- c.downField("target_instances").as[Option[Int]]
      minReadyInstances <- c.downField("min_ready_instances").as[Option[Int]]
      minInstances <- c.downField("min_instances").as[Option[Int]]
      maxInstances <- c.downField("max_instances").as[Option[Int]]
      databaseName <- c.downField("database_name").as[Option[String]]
      schemaName <- c.downField("schema_name").as[Option[String]]
      owner <- c.downField("owner").as[Option[String]]
      dnsName <- c.downField("dns_name").as[Option[String]]
      createdOn <- c.downField("created_on").as[Option[Instant]]
      updatedOn <- c.downField("updated_on").as[Option[Instant]]
      resumedOn <- c.downField("resumed_on").as[Option[Instant]]
      ownerRoleType <- c.downField("owner_role_type").as[Option[String]]
      isJob <- c.downField("is_job").as[Option[Boolean]]
      specDigest <- c.downField("spec_digest").as[Option[String]]
      isUpgrading <- c.downField("is_upgrading").as[Option[Boolean]]
      managingObjectDomain <- c.downField("managing_object_domain").as[Option[String]]
      managingObjectName <- c.downField("managing_object_name").as[Option[String]]
    } yield Service(
      name = name,
      status = status,
      computePool = computePool,
      spec = spec,
      externalAccessIntegrations = externalAccessIntegrations,
      queryWarehouse = queryWarehouse,
      comment = comment,
      autoResume = autoResume,
      currentInstances = currentInstances,
      targetInstances = targetInstances,
      minReadyInstances = minReadyInstances,
      minInstances = minInstances,
      maxInstances = maxInstances,
      databaseName = databaseName,
      schemaName = schemaName,
      owner = owner,
      dnsName = dnsName,
      createdOn = createdOn,
      updatedOn = updatedOn,
      resumedOn = resumedOn,
      ownerRoleType = ownerRoleType,
      isJob = isJob,
      specDigest = specDigest,
      isUpgrading = isUpgrading,
      managingObjectDomain = managingObjectDomain,
      managingObjectName = managingObjectName
    )
  }
}

