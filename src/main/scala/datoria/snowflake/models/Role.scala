/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import java.time.Instant

/** A Snowflake role
  * @param name Name of the role.
  * @param comment Comment of the role.
  * @param createdOn Date and time when the role was created.
  * @param owner Specifies the role that owns this role.
  * @param isDefault Specifies whether the role being fetched is the user's default role.
  * @param isCurrent Specifies whether the role being fetched is the user's current role.
  * @param isInherited Specifies whether the role used to run the command inherits the specified role.
  * @param assignedToUsers The number of users to whom this role has been assigned.
  * @param grantedToRoles The number of roles to which this role has been granted.
  * @param grantedRoles The number of roles that have been granted to this role.
  */
case class Role(
    name: String,
    comment: Option[String] = None,
    createdOn: Option[Instant] = None,
    owner: Option[String] = None,
    isDefault: Option[Boolean] = None,
    isCurrent: Option[Boolean] = None,
    isInherited: Option[Boolean] = None,
    assignedToUsers: Option[Long] = None,
    grantedToRoles: Option[Long] = None,
    grantedRoles: Option[Long] = None
)
  
object Role {
  given encoderRole: Encoder[Role] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("name" -> t.name.asJson),
        t.comment.map(v => "comment" -> v.asJson),
        t.createdOn.map(v => "created_on" -> v.asJson),
        t.owner.map(v => "owner" -> v.asJson),
        t.isDefault.map(v => "is_default" -> v.asJson),
        t.isCurrent.map(v => "is_current" -> v.asJson),
        t.isInherited.map(v => "is_inherited" -> v.asJson),
        t.assignedToUsers.map(v => "assigned_to_users" -> v.asJson),
        t.grantedToRoles.map(v => "granted_to_roles" -> v.asJson),
        t.grantedRoles.map(v => "granted_roles" -> v.asJson)
      ).flatten
    }
  }
  given decoderRole: Decoder[Role] = Decoder.instance { c =>
    for {
      name <- c.downField("name").as[String]
      comment <- c.downField("comment").as[Option[String]]
      createdOn <- c.downField("created_on").as[Option[Instant]]
      owner <- c.downField("owner").as[Option[String]]
      isDefault <- c.downField("is_default").as[Option[Boolean]]
      isCurrent <- c.downField("is_current").as[Option[Boolean]]
      isInherited <- c.downField("is_inherited").as[Option[Boolean]]
      assignedToUsers <- c.downField("assigned_to_users").as[Option[Long]]
      grantedToRoles <- c.downField("granted_to_roles").as[Option[Long]]
      grantedRoles <- c.downField("granted_roles").as[Option[Long]]
    } yield Role(
      name = name,
      comment = comment,
      createdOn = createdOn,
      owner = owner,
      isDefault = isDefault,
      isCurrent = isCurrent,
      isInherited = isInherited,
      assignedToUsers = assignedToUsers,
      grantedToRoles = grantedToRoles,
      grantedRoles = grantedRoles
    )
  }
}

