/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param database Database name of the securable scope if applicable.
  * @param schema Schema name of the securable scope if applicable.
  */
case class ContainingScope(
    database: String,
    schema: Option[String] = None
)
  
object ContainingScope {
  given encoderContainingScope: Encoder[ContainingScope] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("database" -> t.database.asJson),
        t.schema.map(v => "schema" -> v.asJson)
      ).flatten
    }
  }
  given decoderContainingScope: Decoder[ContainingScope] = Decoder.instance { c =>
    for {
      database <- c.downField("database").as[String]
      schema <- c.downField("schema").as[Option[String]]
    } yield ContainingScope(
      database = database,
      schema = schema
    )
  }
}

