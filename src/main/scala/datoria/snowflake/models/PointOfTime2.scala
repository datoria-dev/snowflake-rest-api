/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** Point of time.
  * @param pointOfTimeType Type of the point of time. Possible values include: - `timestamp`: Exact time using the standard timezone format. Example: `2023-09-15 10:59:43`. - `offset`: Interval relative to 'now.' Example: `1 day`. - `statement`: ID of a query statement to use as the reference point for <a href=https://docs.snowflake.com/en/sql-reference/sql/create-clone#time-travel-parameters>Time Travel</a>. For more information, see https://docs.snowflake.com/en/sql-reference/data-types-datetime.
  * @param reference Relation to the point of time. Currently, the API supports `at` and `before`.
  */
case class PointOfTime2(
    pointOfTimeType: String,
    reference: Option[String] = None
)
  
object PointOfTime2 {
  given encoderPointOfTime2: Encoder[PointOfTime2] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("point_of_time_type" -> t.pointOfTimeType.asJson),
        t.reference.map(v => "reference" -> v.asJson)
      ).flatten
    }
  }
  given decoderPointOfTime2: Decoder[PointOfTime2] = Decoder.instance { c =>
    for {
      pointOfTimeType <- c.downField("point_of_time_type").as[String]
      reference <- c.downField("reference").as[Option[String]]
    } yield PointOfTime2(
      pointOfTimeType = pointOfTimeType,
      reference = reference
    )
  }
}

