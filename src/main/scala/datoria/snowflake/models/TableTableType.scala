/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** Type of the table
  */
enum TableTableType(val value: String) {
  case NORMAL extends TableTableType("NORMAL")
  case DYNAMIC extends TableTableType("DYNAMIC")
  case EXTERNAL extends TableTableType("EXTERNAL")
  case EVENT extends TableTableType("EVENT")
  case HYBRID extends TableTableType("HYBRID")
  case ICEBERG extends TableTableType("ICEBERG")
  case IMMUTABLE extends TableTableType("IMMUTABLE")
}

object TableTableType {

  def withValueOpt(value: String): Option[TableTableType] = TableTableType.values.find(_.value == value)
  def withValue(value: String): TableTableType =
    withValueOpt(value).getOrElse(throw java.lang.IllegalArgumentException(s"TableTableType enum case not found: $value"))

  given decoderTableTableType: Decoder[TableTableType] = Decoder.decodeString.map(withValue)
  given encoderTableTableType: Encoder[TableTableType] = Encoder.encodeString.contramap[TableTableType](_.value)

}

