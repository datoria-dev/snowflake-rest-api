/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** The current state of the task run.
  */
enum TaskRunState(val value: String) {
  case SCHEDULED extends TaskRunState("SCHEDULED")
  case EXECUTING extends TaskRunState("EXECUTING")
  case SUCCEEDED extends TaskRunState("SUCCEEDED")
  case FAILED extends TaskRunState("FAILED")
  case CANCELLED extends TaskRunState("CANCELLED")
  case SKIPPED extends TaskRunState("SKIPPED")
}

object TaskRunState {

  def withValueOpt(value: String): Option[TaskRunState] = TaskRunState.values.find(_.value == value)
  def withValue(value: String): TaskRunState =
    withValueOpt(value).getOrElse(throw java.lang.IllegalArgumentException(s"TaskRunState enum case not found: $value"))

  given decoderTaskRunState: Decoder[TaskRunState] = Decoder.decodeString.map(withValue)
  given encoderTaskRunState: Encoder[TaskRunState] = Encoder.encodeString.contramap[TaskRunState](_.value)

}

