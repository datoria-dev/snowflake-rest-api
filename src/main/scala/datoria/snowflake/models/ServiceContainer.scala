/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param databaseName A Snowflake object identifier.
  * @param schemaName A Snowflake object identifier.
  * @param serviceName A Snowflake object identifier.
  * @param instanceId ID of the service instance (this is the index of the service instance starting from 0).
  * @param containerName Name of the container.
  * @param status Service container status.
  * @param message Additional clarification about status.
  * @param imageName Image name used to create the service container.
  * @param imageDigest The unique and immutable identifier representing the image content.
  * @param restartCount Number of times Snowflake restarted the service.
  * @param startTime Date and time when the container started.
  */
case class ServiceContainer(
    databaseName: Option[String] = None,
    schemaName: Option[String] = None,
    serviceName: Option[String] = None,
    instanceId: Option[String] = None,
    containerName: Option[String] = None,
    status: Option[String] = None,
    message: Option[String] = None,
    imageName: Option[String] = None,
    imageDigest: Option[String] = None,
    restartCount: Option[Int] = None,
    startTime: Option[String] = None
)
  
object ServiceContainer {
  given encoderServiceContainer: Encoder[ServiceContainer] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.databaseName.map(v => "database_name" -> v.asJson),
        t.schemaName.map(v => "schema_name" -> v.asJson),
        t.serviceName.map(v => "service_name" -> v.asJson),
        t.instanceId.map(v => "instance_id" -> v.asJson),
        t.containerName.map(v => "container_name" -> v.asJson),
        t.status.map(v => "status" -> v.asJson),
        t.message.map(v => "message" -> v.asJson),
        t.imageName.map(v => "image_name" -> v.asJson),
        t.imageDigest.map(v => "image_digest" -> v.asJson),
        t.restartCount.map(v => "restart_count" -> v.asJson),
        t.startTime.map(v => "start_time" -> v.asJson)
      ).flatten
    }
  }
  given decoderServiceContainer: Decoder[ServiceContainer] = Decoder.instance { c =>
    for {
      databaseName <- c.downField("database_name").as[Option[String]]
      schemaName <- c.downField("schema_name").as[Option[String]]
      serviceName <- c.downField("service_name").as[Option[String]]
      instanceId <- c.downField("instance_id").as[Option[String]]
      containerName <- c.downField("container_name").as[Option[String]]
      status <- c.downField("status").as[Option[String]]
      message <- c.downField("message").as[Option[String]]
      imageName <- c.downField("image_name").as[Option[String]]
      imageDigest <- c.downField("image_digest").as[Option[String]]
      restartCount <- c.downField("restart_count").as[Option[Int]]
      startTime <- c.downField("start_time").as[Option[String]]
    } yield ServiceContainer(
      databaseName = databaseName,
      schemaName = schemaName,
      serviceName = serviceName,
      instanceId = instanceId,
      containerName = containerName,
      status = status,
      message = message,
      imageName = imageName,
      imageDigest = imageDigest,
      restartCount = restartCount,
      startTime = startTime
    )
  }
}

