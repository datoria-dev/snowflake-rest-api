/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param catalogNamespace Default Polaris namespace used by all Iceberg tables associated with this catalog integration
  * @param restConfig 
  * @param restAuthentication 
  */
case class Polaris(
    catalogNamespace: String,
    restConfig: RestConfig,
    restAuthentication: RestAuthentication
)
  
object Polaris {
  given encoderPolaris: Encoder[Polaris] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("catalog_namespace" -> t.catalogNamespace.asJson),
        Some("rest_config" -> t.restConfig.asJson),
        Some("rest_authentication" -> t.restAuthentication.asJson)
      ).flatten
    }
  }
  given decoderPolaris: Decoder[Polaris] = Decoder.instance { c =>
    for {
      catalogNamespace <- c.downField("catalog_namespace").as[String]
      restConfig <- c.downField("rest_config").as[RestConfig]
      restAuthentication <- c.downField("rest_authentication").as[RestAuthentication]
    } yield Polaris(
      catalogNamespace = catalogNamespace,
      restConfig = restConfig,
      restAuthentication = restAuthentication
    )
  }
}

