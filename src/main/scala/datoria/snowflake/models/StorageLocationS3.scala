/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param storageAwsRoleArn Specifies the case-sensitive Amazon Resource Name (ARN) of the AWS identity and access management (IAM) role that grants privileges on the S3 bucket containing your data files.
  * @param storageBaseUrl Specifies the base URL for your cloud storage location.
  * @param storageAwsExternalId Optionally specifies an external ID that Snowflake uses to establish a trust relationship with AWS.
  * @param encryption 
  */
case class StorageLocationS3(
    storageAwsRoleArn: String,
    storageBaseUrl: String,
    storageAwsExternalId: Option[String] = None,
    encryption: Option[Encryption] = None
)
  
object StorageLocationS3 {
  given encoderStorageLocationS3: Encoder[StorageLocationS3] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("storage_aws_role_arn" -> t.storageAwsRoleArn.asJson),
        Some("storage_base_url" -> t.storageBaseUrl.asJson),
        t.storageAwsExternalId.map(v => "storage_aws_external_id" -> v.asJson),
        t.encryption.map(v => "encryption" -> v.asJson)
      ).flatten
    }
  }
  given decoderStorageLocationS3: Decoder[StorageLocationS3] = Decoder.instance { c =>
    for {
      storageAwsRoleArn <- c.downField("storage_aws_role_arn").as[String]
      storageBaseUrl <- c.downField("storage_base_url").as[String]
      storageAwsExternalId <- c.downField("storage_aws_external_id").as[Option[String]]
      encryption <- c.downField("encryption").as[Option[Encryption]]
    } yield StorageLocationS3(
      storageAwsRoleArn = storageAwsRoleArn,
      storageBaseUrl = storageBaseUrl,
      storageAwsExternalId = storageAwsExternalId,
      encryption = encryption
    )
  }
}

