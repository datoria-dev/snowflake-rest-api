/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  */
enum ListGrantsToGranteeTypeParameter(val value: String) {
  case User extends ListGrantsToGranteeTypeParameter("user")
  case Role extends ListGrantsToGranteeTypeParameter("role")
  case ApplicationRole extends ListGrantsToGranteeTypeParameter("application-role")
  case DatabaseRole extends ListGrantsToGranteeTypeParameter("database-role")
  case Share extends ListGrantsToGranteeTypeParameter("share")
}

object ListGrantsToGranteeTypeParameter {

  def withValueOpt(value: String): Option[ListGrantsToGranteeTypeParameter] = ListGrantsToGranteeTypeParameter.values.find(_.value == value)
  def withValue(value: String): ListGrantsToGranteeTypeParameter =
    withValueOpt(value).getOrElse(throw java.lang.IllegalArgumentException(s"ListGrantsToGranteeTypeParameter enum case not found: $value"))

  given decoderListGrantsToGranteeTypeParameter: Decoder[ListGrantsToGranteeTypeParameter] = Decoder.decodeString.map(withValue)
  given encoderListGrantsToGranteeTypeParameter: Encoder[ListGrantsToGranteeTypeParameter] = Encoder.encodeString.contramap[ListGrantsToGranteeTypeParameter](_.value)

}

