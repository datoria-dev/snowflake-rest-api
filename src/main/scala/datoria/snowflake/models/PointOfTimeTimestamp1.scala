/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** Point of time identified by a timestamp.
  * @param timestamp Timestamp of the point of time.
  */
case class PointOfTimeTimestamp1(
    timestamp: Option[String] = None
)
  
object PointOfTimeTimestamp1 {
  given encoderPointOfTimeTimestamp1: Encoder[PointOfTimeTimestamp1] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.timestamp.map(v => "timestamp" -> v.asJson)
      ).flatten
    }
  }
  given decoderPointOfTimeTimestamp1: Decoder[PointOfTimeTimestamp1] = Decoder.instance { c =>
    for {
      timestamp <- c.downField("timestamp").as[Option[String]]
    } yield PointOfTimeTimestamp1(
      timestamp = timestamp
    )
  }
}

