/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import java.time.Instant
import scala.collection.immutable.Seq

/** A Snowflake view
  * @param name Name of the view
  * @param secure Whether or not this view is secure
  * @param kind 
  * @param recursive Whether or not this view can refer to itself using recursive syntax withot requiring a CTE (common table expression)
  * @param columns The columns of the view
  * @param comment user comment associated to an object in the dictionary
  * @param query Query used to create the view
  * @param createdOn Date and time when the view was created.
  * @param databaseName Database in which the view is stored
  * @param schemaName Schema in which the view is stored
  * @param owner Role that owns the view
  * @param ownerRoleType The type of role that owns the view
  */
case class View(
    name: String,
    secure: Option[Boolean] = None,
    kind: Option[ViewKind] = None,
    recursive: Option[Boolean] = None,
    columns: Seq[ViewColumn],
    comment: Option[String] = None,
    query: String,
    createdOn: Option[Instant] = None,
    databaseName: Option[String] = None,
    schemaName: Option[String] = None,
    owner: Option[String] = None,
    ownerRoleType: Option[String] = None
)
  
object View {
  given encoderView: Encoder[View] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("name" -> t.name.asJson),
        t.secure.map(v => "secure" -> v.asJson),
        t.kind.map(v => "kind" -> v.asJson),
        t.recursive.map(v => "recursive" -> v.asJson),
        Some("columns" -> t.columns.asJson),
        t.comment.map(v => "comment" -> v.asJson),
        Some("query" -> t.query.asJson),
        t.createdOn.map(v => "created_on" -> v.asJson),
        t.databaseName.map(v => "database_name" -> v.asJson),
        t.schemaName.map(v => "schema_name" -> v.asJson),
        t.owner.map(v => "owner" -> v.asJson),
        t.ownerRoleType.map(v => "owner_role_type" -> v.asJson)
      ).flatten
    }
  }
  given decoderView: Decoder[View] = Decoder.instance { c =>
    for {
      name <- c.downField("name").as[String]
      secure <- c.downField("secure").as[Option[Boolean]]
      kind <- c.downField("kind").as[Option[ViewKind]]
      recursive <- c.downField("recursive").as[Option[Boolean]]
      columns <- c.downField("columns").as[Seq[ViewColumn]]
      comment <- c.downField("comment").as[Option[String]]
      query <- c.downField("query").as[String]
      createdOn <- c.downField("created_on").as[Option[Instant]]
      databaseName <- c.downField("database_name").as[Option[String]]
      schemaName <- c.downField("schema_name").as[Option[String]]
      owner <- c.downField("owner").as[Option[String]]
      ownerRoleType <- c.downField("owner_role_type").as[Option[String]]
    } yield View(
      name = name,
      secure = secure,
      kind = kind,
      recursive = recursive,
      columns = columns,
      comment = comment,
      query = query,
      createdOn = createdOn,
      databaseName = databaseName,
      schemaName = schemaName,
      owner = owner,
      ownerRoleType = ownerRoleType
    )
  }
}

