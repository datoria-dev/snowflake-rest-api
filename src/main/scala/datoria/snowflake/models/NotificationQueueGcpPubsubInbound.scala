/** merged spec
  * merged spec
  *
  * The version of the OpenAPI document: 1.0.0
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package datoria.snowflake.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param gcpPubsubSubscriptionName Pub/Sub topic subscription ID used to allow Snowflake access to event messages.
  * @param gcpPubsubServiceAccount Google Cloud Platform (GCP) service account created for your account.
  */
case class NotificationQueueGcpPubsubInbound(
    gcpPubsubSubscriptionName: Option[String] = None,
    gcpPubsubServiceAccount: Option[String] = None
)
  
object NotificationQueueGcpPubsubInbound {
  given encoderNotificationQueueGcpPubsubInbound: Encoder[NotificationQueueGcpPubsubInbound] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.gcpPubsubSubscriptionName.map(v => "gcp_pubsub_subscription_name" -> v.asJson),
        t.gcpPubsubServiceAccount.map(v => "gcp_pubsub_service_account" -> v.asJson)
      ).flatten
    }
  }
  given decoderNotificationQueueGcpPubsubInbound: Decoder[NotificationQueueGcpPubsubInbound] = Decoder.instance { c =>
    for {
      gcpPubsubSubscriptionName <- c.downField("gcp_pubsub_subscription_name").as[Option[String]]
      gcpPubsubServiceAccount <- c.downField("gcp_pubsub_service_account").as[Option[String]]
    } yield NotificationQueueGcpPubsubInbound(
      gcpPubsubSubscriptionName = gcpPubsubSubscriptionName,
      gcpPubsubServiceAccount = gcpPubsubServiceAccount
    )
  }
}

